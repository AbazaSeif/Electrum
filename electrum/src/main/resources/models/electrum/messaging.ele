module examples/algorithms/messaging

/*
 * Generic messaging among several nodes
 *
 * By default, messages can be lost (i.e. never become visible to the
 * recipient node) or may be arbitrarily delayed.  Also, by default
 * out-of-order delivery is allowed.
 */

open util/relation as rel

sig Node {
   /** The state of each node */
   var state: one NodeState,

   /**
    * Definition of what each node does on this tick:
    *
    * Typically, a node would determine
    * the messages it sends and its next state, based on its current
    * state and the messages it reads.
    *
    * Messages that the node _can_ read in this tick, i.e. messages available
    * for reading at the beginning of this tick.  The messages that
    * the node actually reads are a subset of this set.  Determined by
    * constraints in this module.
    */
   var visible: set Msg,

   /**
    * Messages that the node _actually reads_ in this tick.  Must be a subset
    * of visible.  Determined by constraints of the particular system
    * that uses this module.
    */
   var read: set Msg,

   /**
    * Messages sent by the node in this tick.  They become visible to
    * (and can be read by) their recipients on the next tick.
    */
   var sent: set Msg,

   /**
    * For each node, at each tick, the number of messages it _needs_ to send.
    * Used to rule out "proofs" of liveness violations that are caused
    * solely by not having enough messages available for sending.
    */
   var needsToSend: set Msg

}

sig MsgState {
   /** Node that sent the message */
   from: Node,

   /** Intended recipient(s) of a message; note that broadcasts are allowed */
   to: set Node
}

sig Msg {
   state: MsgState,

   /** tick at which node reads message, if read */
   var readOn: set Node
}{

}

/** Timestamp: the tick on which the message was sent */
var sig sentOn in Msg {}
fact a {
	// all msg are sent exactly once
	all m:Msg | m not in sentOn until (m in sentOn && after always m not in sentOn)
	// all msg are read by a none at most once
	all m:Msg, n:Node | (always n not in m.readOn) or (n not in m.readOn until (n in m.readOn && after always n not in m.readOn))

	all m:Msg | always m.readOn in m.state.to
}

/**
  * Messages available for sending at this tick.  A given message
  * atom is only used once, and then it gets removed from the available
  * set and cannot be used to represent messages sent on subsequent ticks.
  * Also, two different nodes cannot send the same message atom.
  * So, a message atom represents a particular single physical message
  * sent by a given node on a given tick.
  */
var sig available in Msg {}

fun MsgsSentOnTick : set Msg { sent[Node] }
fun MsgsVisibleOnTick : set Msg { visible[Node] }
fun MsgsReadOnTick : set Msg { read[Node] }

fact MsgMovementConstraints {
   // At the beginning, no messages have been sent yet
   no visible[Node]

   // Messages sent on a given tick become visible to recipient(s)
   // on the subsequent tick.
   always {
        // messages sent on this tick are no longer available on subsequent tick
        available' = available - MsgsSentOnTick
     }

   always {
      // Messages sent on a tick are taken from the pool of available
      // (not-yet-sent) message atoms
      MsgsSentOnTick in available

      // Timestamps are correct
      MsgsSentOnTick = sentOn
      MsgsReadOnTick = readOn.Node

      // The only new message atoms are those sent by nodes
      MsgsSentOnTick = sent[Node]

      all n: Node, m: Msg |
           m in readOn.n => m in read[n]
      // Return addresses are correct
      all n: Node | sent[n].state.from in n

      // messages sent to a node on a tick become visible to that node on some subseqent tick,
      // and permanently stop being visible to that node on the tick after that node reads the message
      all n: Node, m: Msg | {
          // message starts being visible to node n no earlier than it is sent;
          // only messages sent to this node are visible to this node.
          (m in visible[n] => (n in m.state.to && previous once m in sentOn))
          // message permanently stops being visible immediately after being read
          (m in read[n] => after always m not in visible[n])
      }
   }
}

sig NodeState {
}

fact CleanupViz {
    // cleans up visualization without precluding any interesting traces

    // all messages must be sent
    all m : Msg | eventually m in sent[Node]
}

pred ReadInOrder  {
    //
    // This function ensures that messages are read in order.
    //
    // for all pairs of nodes
    all n1, n2: Node |
        // for all pairs of messages sent from n1 to n2
        all m1, m2: Msg |
            {
              m1.state.from = n1
              m2.state.from = n1
              m1.state.to = n2
              m2.state.to = n2
           } => {
            // if both m1 and m2 are read by n2, *and*
            // n2 reads m1 before m2, then m1 must have
            // been sent before m2
            (eventually (m1 in readOn.n2 && after eventually m2 in readOn.n2)) =>
                (eventually (m1 in sentOn && eventually m2 in sentOn))
           }
    
}

fact ReadOnlyVisible { always read in visible }

/**
 * this function ensures that messages will not
 * be lost, i.e. a message send to a node will
 * eventually be visible to that node
 */
pred NoLostMessages {
  all m: Msg, n: m.state.to |
        always (m in sentOn => eventually m in visible[n])
}

/**
 * this function ensures that there will be
 * no shortage of messages in the available
 * message pool during the trace
 */
pred NoMessageShortage {
  always
    lte[(sum n: Node | # needsToSend[n]), # available]
}

pred SomeState  {
   # Node > 1
   //# Tick$read > 1
}

pred OutOfOrder  {
   ! ReadInOrder
}

run SomeState for 2 expect 1
run OutOfOrder for 4 but exactly 2 Msg, 20 Time expect 1



// DEFINED VARIABLES
// Defined variables are uncalled, no-argument functions.
// They are helpful for getting good visualization.
fun FROM: Msg -> Node {{m: Msg, n: Node | n in m.state.from}}
fun TO: Msg -> Node {{m: Msg, n: Node | n in m.state.to}}
