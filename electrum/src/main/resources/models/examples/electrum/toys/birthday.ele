module examples/toys/birthday

/*
 * Birthday Book
 *
 * A classic Z example to explain the basic form of an Alloy model. For the original,
 * see J.M. Spivey, The Z Notation, Second Edition, Prentice Hall, 1992.
 *
 * A birthday book has two fields: known, a set of names (of persons whose birthdays are known),
 * and date, a function from known names to dates. The operation AddBirthday adds an association
 * between a name and a date; it uses the relational override operator (++), so any existing
 * mapping from the name to a date is replaced. DelBirthday removes the entry for a given name.
 * FindBirthday obtains the date d for a name n. The argument d is declared to be optional (that is,
 * a singleton or empty set), so if there is no entry for n, d will be empty. Remind gives the set
 * of names whose birthdays fall on a particular day.
 *
 * The assertion AddWorks says that if you add an entry, then look it up, you get back what you
 * just entered. DelIsUndo says that doing DelBirthday after AddBirthday undoes it, as if the add
 * had never happened. The first of these assertions is valid; the second isn't.
 *
 * The function BusyDay shows a case in which Remind produces more than one card.
 *
 * author: Daniel Jackson, 11/14/01
 */

sig Name {}
sig Date {}
var sig known in Name {
	var date : one Date
} 

pred AddBirthday [n: Name, d: Date] {
    date' = date ++ (n->d)
    }

pred DelBirthday [n: Name] {
    date' = date - (n->Date)
    }

pred FindBirthday [n: Name, d: lone Date] {
    d = date[n]
    }

pred Remind [today: Date, cards: set Name] {
    cards = date.today
    }

pred InitBirthdayBook {
    no known
    }

assert AddWorks {
    all n: Name, d: Date, d1: lone Date |
        always (AddBirthday [n,d] && after FindBirthday [n,d1] => d = d1)
    }

assert DelIsUndo {
    all n: Name, d: Date |
        always (((AddBirthday [n,d]) && after DelBirthday [n])
            => {n1:Name,d1:Date | n1->d1 in date} = {n1:Name,d1:Date | after after n1->d1 in date})
    }

check AddWorks for 3 but exactly 2 Time expect 0
check DelIsUndo for 3 but exactly 3 Time expect 1

pred BusyDay [d: Date]{
    some cards: set Name | Remind [d,cards] && !lone cards
    }

run BusyDay for 3 but 1 Time expect 1
