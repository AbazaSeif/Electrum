/* The following code was generated by JFlex 1.6.0 */

// Alloy Analyzer 4 -- Copyright (c) 2006-2008, Felix Chang
// Electrum -- Copiright (c) 2015-present, Nuno Macedo
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files
// (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify,
// merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
// OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

package edu.mit.csail.sdg.alloy4compiler.parser;

import edu.mit.csail.sdg.alloy4.Err;
import edu.mit.csail.sdg.alloy4.ErrorSyntax;
import edu.mit.csail.sdg.alloy4.Pos;
import edu.mit.csail.sdg.alloy4.Version;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprConstant;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprVar;
import java.util.List;
import java_cup.runtime.*;

/** Autogenerated by JFlex 1.4.1 */

// @modified: Nuno Macedo // [HASLab] temporal solving


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>Alloy.lex</tt>
 */
public final class CompLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\76\1\77\1\67\1\70\1\71\1\67\16\76\4\0\1\77\1\2"+
    "\1\65\1\3\1\73\1\0\1\4\1\1\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\14\1\15\12\74\1\16\1\0\1\17\1\20\1\13"+
    "\1\0\1\21\10\73\1\60\11\73\1\63\1\64\6\73\1\22\1\66"+
    "\1\23\1\24\1\73\1\0\1\31\1\32\1\36\1\53\1\43\1\42"+
    "\1\62\1\47\1\50\1\55\1\54\1\37\1\56\1\45\1\51\1\52"+
    "\1\61\1\35\1\33\1\34\1\46\1\44\1\40\1\57\1\41\1\73"+
    "\1\25\1\26\1\27\1\30\6\76\1\72\32\76\2\0\4\75\4\0"+
    "\1\75\2\0\1\76\7\0\1\75\4\0\1\75\5\0\27\75\1\0"+
    "\37\75\1\0\u01ca\75\4\0\14\75\16\0\5\75\7\0\1\75\1\0"+
    "\1\75\21\0\160\76\5\75\1\0\2\75\2\0\4\75\10\0\1\75"+
    "\1\0\3\75\1\0\1\75\1\0\24\75\1\0\123\75\1\0\213\75"+
    "\1\0\5\76\2\0\236\75\11\0\46\75\2\0\1\75\7\0\47\75"+
    "\7\0\1\75\1\0\55\76\1\0\1\76\1\0\2\76\1\0\2\76"+
    "\1\0\1\76\10\0\33\75\5\0\3\75\15\0\5\76\6\0\1\75"+
    "\4\0\13\76\5\0\53\75\37\76\4\0\2\75\1\76\143\75\1\0"+
    "\1\75\10\76\1\0\6\76\2\75\2\76\1\0\4\76\2\75\12\76"+
    "\3\75\2\0\1\75\17\0\1\76\1\75\1\76\36\75\33\76\2\0"+
    "\131\75\13\76\1\75\16\0\12\76\41\75\11\76\2\75\4\0\1\75"+
    "\5\0\26\75\4\76\1\75\11\76\1\75\3\76\1\75\5\76\22\0"+
    "\31\75\3\76\104\0\1\75\1\0\13\75\67\0\33\76\1\0\4\76"+
    "\66\75\3\76\1\75\22\76\1\75\7\76\12\75\2\76\2\0\12\76"+
    "\1\0\7\75\1\0\7\75\1\0\3\76\1\0\10\75\2\0\2\75"+
    "\2\0\26\75\1\0\7\75\1\0\1\75\3\0\4\75\2\0\1\76"+
    "\1\75\7\76\2\0\2\76\2\0\3\76\1\75\10\0\1\76\4\0"+
    "\2\75\1\0\3\75\2\76\2\0\12\76\4\75\7\0\1\75\5\0"+
    "\3\76\1\0\6\75\4\0\2\75\2\0\26\75\1\0\7\75\1\0"+
    "\2\75\1\0\2\75\1\0\2\75\2\0\1\76\1\0\5\76\4\0"+
    "\2\76\2\0\3\76\3\0\1\76\7\0\4\75\1\0\1\75\7\0"+
    "\14\76\3\75\1\76\13\0\3\76\1\0\11\75\1\0\3\75\1\0"+
    "\26\75\1\0\7\75\1\0\2\75\1\0\5\75\2\0\1\76\1\75"+
    "\10\76\1\0\3\76\1\0\3\76\2\0\1\75\17\0\2\75\2\76"+
    "\2\0\12\76\1\0\1\75\17\0\3\76\1\0\10\75\2\0\2\75"+
    "\2\0\26\75\1\0\7\75\1\0\2\75\1\0\5\75\2\0\1\76"+
    "\1\75\7\76\2\0\2\76\2\0\3\76\10\0\2\76\4\0\2\75"+
    "\1\0\3\75\2\76\2\0\12\76\1\0\1\75\20\0\1\76\1\75"+
    "\1\0\6\75\3\0\3\75\1\0\4\75\3\0\2\75\1\0\1\75"+
    "\1\0\2\75\3\0\2\75\3\0\3\75\3\0\14\75\4\0\5\76"+
    "\3\0\3\76\1\0\4\76\2\0\1\75\6\0\1\76\16\0\12\76"+
    "\11\0\1\75\7\0\3\76\1\0\10\75\1\0\3\75\1\0\27\75"+
    "\1\0\12\75\1\0\5\75\3\0\1\75\7\76\1\0\3\76\1\0"+
    "\4\76\7\0\2\76\1\0\2\75\6\0\2\75\2\76\2\0\12\76"+
    "\22\0\2\76\1\0\10\75\1\0\3\75\1\0\27\75\1\0\12\75"+
    "\1\0\5\75\2\0\1\76\1\75\7\76\1\0\3\76\1\0\4\76"+
    "\7\0\2\76\7\0\1\75\1\0\2\75\2\76\2\0\12\76\1\0"+
    "\2\75\17\0\2\76\1\0\10\75\1\0\3\75\1\0\51\75\2\0"+
    "\1\75\7\76\1\0\3\76\1\0\4\76\1\75\10\0\1\76\10\0"+
    "\2\75\2\76\2\0\12\76\12\0\6\75\2\0\2\76\1\0\22\75"+
    "\3\0\30\75\1\0\11\75\1\0\1\75\2\0\7\75\3\0\1\76"+
    "\4\0\6\76\1\0\1\76\1\0\10\76\22\0\2\76\15\0\60\75"+
    "\1\76\2\75\7\76\4\0\10\75\10\76\1\0\12\76\47\0\2\75"+
    "\1\0\1\75\2\0\2\75\1\0\1\75\2\0\1\75\6\0\4\75"+
    "\1\0\7\75\1\0\3\75\1\0\1\75\1\0\1\75\2\0\2\75"+
    "\1\0\4\75\1\76\2\75\6\76\1\0\2\76\1\75\2\0\5\75"+
    "\1\0\1\75\1\0\6\76\2\0\12\76\2\0\4\75\40\0\1\75"+
    "\27\0\2\76\6\0\12\76\13\0\1\76\1\0\1\76\1\0\1\76"+
    "\4\0\2\76\10\75\1\0\44\75\4\0\24\76\1\0\2\76\5\75"+
    "\13\76\1\0\44\76\11\0\1\76\71\0\53\75\24\76\1\75\12\76"+
    "\6\0\6\75\4\76\4\75\3\76\1\75\3\76\2\75\7\76\3\75"+
    "\4\76\15\75\14\76\1\75\17\76\2\0\46\75\1\0\1\75\5\0"+
    "\1\75\2\0\53\75\1\0\u014d\75\1\0\4\75\2\0\7\75\1\0"+
    "\1\75\1\0\4\75\2\0\51\75\1\0\4\75\2\0\41\75\1\0"+
    "\4\75\2\0\7\75\1\0\1\75\1\0\4\75\2\0\17\75\1\0"+
    "\71\75\1\0\4\75\2\0\103\75\2\0\3\76\40\0\20\75\20\0"+
    "\125\75\14\0\u026c\75\2\0\21\75\1\0\32\75\5\0\113\75\3\0"+
    "\3\75\17\0\15\75\1\0\4\75\3\76\13\0\22\75\3\76\13\0"+
    "\22\75\2\76\14\0\15\75\1\0\3\75\1\0\2\76\14\0\64\75"+
    "\40\76\3\0\1\75\3\0\2\75\1\76\2\0\12\76\41\0\3\76"+
    "\2\0\12\76\6\0\130\75\10\0\51\75\1\76\1\75\5\0\106\75"+
    "\12\0\35\75\3\0\14\76\4\0\14\76\12\0\12\76\36\75\2\0"+
    "\5\75\13\0\54\75\4\0\21\76\7\75\2\76\6\0\12\76\46\0"+
    "\27\75\5\76\4\0\65\75\12\76\1\0\35\76\2\0\13\76\6\0"+
    "\12\76\15\0\1\75\130\0\5\76\57\75\21\76\7\75\4\0\12\76"+
    "\21\0\11\76\14\0\3\76\36\75\15\76\2\75\12\76\54\75\16\76"+
    "\14\0\44\75\24\76\10\0\12\76\3\0\3\75\12\76\44\75\122\0"+
    "\3\76\1\0\25\76\4\75\1\76\4\75\3\76\2\75\11\0\300\75"+
    "\47\76\25\0\4\76\u0116\75\2\0\6\75\2\0\46\75\2\0\6\75"+
    "\2\0\10\75\1\0\1\75\1\0\1\75\1\0\1\75\1\0\37\75"+
    "\2\0\65\75\1\0\7\75\1\0\1\75\3\0\3\75\1\0\7\75"+
    "\3\0\4\75\2\0\6\75\4\0\15\75\5\0\3\75\1\0\7\75"+
    "\16\0\5\76\30\0\1\70\1\70\5\76\20\0\2\75\23\0\1\75"+
    "\13\0\5\76\5\0\6\76\1\0\1\75\15\0\1\75\20\0\15\75"+
    "\3\0\33\75\25\0\15\76\4\0\1\76\3\0\14\76\21\0\1\75"+
    "\4\0\1\75\2\0\12\75\1\0\1\75\3\0\5\75\6\0\1\75"+
    "\1\0\1\75\1\0\1\75\1\0\4\75\1\0\13\75\2\0\4\75"+
    "\5\0\5\75\4\0\1\75\21\0\51\75\u0a77\0\57\75\1\0\57\75"+
    "\1\0\205\75\6\0\4\75\3\76\2\75\14\0\46\75\1\0\1\75"+
    "\5\0\1\75\2\0\70\75\7\0\1\75\17\0\1\76\27\75\11\0"+
    "\7\75\1\0\7\75\1\0\7\75\1\0\7\75\1\0\7\75\1\0"+
    "\7\75\1\0\7\75\1\0\7\75\1\0\40\76\57\0\1\75\u01d5\0"+
    "\3\75\31\0\11\75\6\76\1\0\5\75\2\0\5\75\4\0\126\75"+
    "\2\0\2\76\2\0\3\75\1\0\132\75\1\0\4\75\5\0\51\75"+
    "\3\0\136\75\21\0\33\75\65\0\20\75\u0200\0\u19b6\75\112\0\u51cd\75"+
    "\63\0\u048d\75\103\0\56\75\2\0\u010d\75\3\0\20\75\12\76\2\75"+
    "\24\0\57\75\1\76\4\0\12\76\1\0\31\75\7\0\1\76\120\75"+
    "\2\76\45\0\11\75\2\0\147\75\2\0\4\75\1\0\4\75\14\0"+
    "\13\75\115\0\12\75\1\76\3\75\1\76\4\75\1\76\27\75\5\76"+
    "\20\0\1\75\7\0\64\75\14\0\2\76\62\75\21\76\13\0\12\76"+
    "\6\0\22\76\6\75\3\0\1\75\4\0\12\76\34\75\10\76\2\0"+
    "\27\75\15\76\14\0\35\75\3\0\4\76\57\75\16\76\16\0\1\75"+
    "\12\76\46\0\51\75\16\76\11\0\3\75\1\76\10\75\2\76\2\0"+
    "\12\76\6\0\27\75\3\0\1\75\1\76\4\0\60\75\1\76\1\75"+
    "\3\76\2\75\2\76\5\75\2\76\1\75\1\76\1\75\30\0\3\75"+
    "\2\0\13\75\5\76\2\0\3\75\2\76\12\0\6\75\2\0\6\75"+
    "\2\0\6\75\11\0\7\75\1\0\7\75\221\0\43\75\10\76\1\0"+
    "\2\76\2\0\12\76\6\0\u2ba4\75\14\0\27\75\4\0\61\75\u2104\0"+
    "\u016e\75\2\0\152\75\46\0\7\75\14\0\5\75\5\0\1\75\1\76"+
    "\12\75\1\0\15\75\1\0\5\75\1\0\1\75\1\0\2\75\1\0"+
    "\2\75\1\0\154\75\41\0\u016b\75\22\0\100\75\2\0\66\75\50\0"+
    "\15\75\3\0\20\76\20\0\7\76\14\0\2\75\30\0\3\75\31\0"+
    "\1\75\6\0\5\75\1\0\207\75\2\0\1\76\4\0\1\75\13\0"+
    "\12\76\7\0\32\75\4\0\1\75\1\0\32\75\13\0\131\75\3\0"+
    "\6\75\2\0\6\75\2\0\6\75\2\0\3\75\3\0\2\75\3\0"+
    "\2\75\22\0\3\76\4\0\14\75\1\0\32\75\1\0\23\75\1\0"+
    "\2\75\1\0\17\75\2\0\16\75\42\0\173\75\105\0\65\75\210\0"+
    "\1\76\202\0\35\75\3\0\61\75\57\0\37\75\21\0\33\75\65\0"+
    "\36\75\2\0\44\75\4\0\10\75\1\0\5\75\52\0\236\75\2\0"+
    "\12\76\u0356\0\6\75\2\0\1\75\1\0\54\75\1\0\2\75\3\0"+
    "\1\75\2\0\27\75\252\0\26\75\12\0\32\75\106\0\70\75\6\0"+
    "\2\75\100\0\1\75\3\76\1\0\2\76\5\0\4\76\4\75\1\0"+
    "\3\75\1\0\33\75\4\0\3\76\4\0\1\76\40\0\35\75\203\0"+
    "\66\75\12\0\26\75\12\0\23\75\215\0\111\75\u03b7\0\3\76\65\75"+
    "\17\76\37\0\12\76\20\0\3\76\55\75\13\76\2\0\1\76\22\0"+
    "\31\75\7\0\12\76\6\0\3\76\44\75\16\76\1\0\12\76\100\0"+
    "\3\76\60\75\16\76\4\75\13\0\12\76\u04a6\0\53\75\15\76\10\0"+
    "\12\76\u0936\0\u036f\75\221\0\143\75\u0b9d\0\u042f\75\u33d1\0\u0239\75\u04c7\0"+
    "\105\75\13\0\1\75\56\76\20\0\4\76\15\75\u4060\0\2\75\u2163\0"+
    "\5\76\3\0\26\76\2\0\7\76\36\0\4\76\224\0\3\76\u01bb\0"+
    "\125\75\1\0\107\75\1\0\2\75\2\0\1\75\2\0\2\75\2\0"+
    "\4\75\1\0\14\75\1\0\1\75\1\0\7\75\1\0\101\75\1\0"+
    "\4\75\2\0\10\75\1\0\7\75\1\0\34\75\1\0\4\75\1\0"+
    "\5\75\1\0\1\75\3\0\7\75\1\0\u0154\75\2\0\31\75\1\0"+
    "\31\75\1\0\37\75\1\0\31\75\1\0\37\75\1\0\31\75\1\0"+
    "\37\75\1\0\31\75\1\0\37\75\1\0\31\75\1\0\10\75\2\0"+
    "\62\76\u1600\0\4\75\1\0\33\75\1\0\2\75\1\0\1\75\2\0"+
    "\1\75\1\0\12\75\1\0\4\75\1\0\1\75\1\0\1\75\6\0"+
    "\1\75\4\0\1\75\1\0\1\75\1\0\1\75\1\0\3\75\1\0"+
    "\2\75\1\0\1\75\2\0\1\75\1\0\1\75\1\0\1\75\1\0"+
    "\1\75\1\0\1\75\1\0\2\75\1\0\1\75\2\0\4\75\1\0"+
    "\7\75\1\0\4\75\1\0\4\75\1\0\1\75\1\0\12\75\1\0"+
    "\21\75\5\0\3\75\1\0\5\75\1\0\21\75\u1144\0\ua6d7\75\51\0"+
    "\u1035\75\13\0\336\75\u3fe2\0\u021e\75\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\76\36\0\140\76\200\0\360\76\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\26\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\34\1\40\1\41\1\42\1\0\1\43\1\44\1\45"+
    "\1\46\1\47\1\46\1\50\1\32\1\51\27\32\1\52"+
    "\3\32\1\53\2\32\1\50\11\32\1\54\1\0\1\55"+
    "\1\56\2\0\1\57\2\32\1\60\1\61\2\32\1\36"+
    "\1\62\1\63\1\64\1\65\1\32\1\66\3\32\1\67"+
    "\1\32\1\70\2\32\1\71\1\72\5\32\1\73\1\32"+
    "\1\74\1\3\4\32\1\57\1\75\3\32\1\76\6\32"+
    "\1\77\2\32\1\100\1\0\1\34\5\32\1\101\1\102"+
    "\2\32\1\103\1\104\1\105\1\32\1\106\4\32\1\107"+
    "\1\32\1\110\1\32\1\111\1\32\1\112\1\113\1\114"+
    "\1\32\1\115\1\32\1\116\3\32\1\117\3\32\1\120"+
    "\1\121\1\32\1\122\5\32\1\123\12\32\1\124\1\125"+
    "\5\32\1\126\6\32\1\127\1\32\1\130\1\32\1\131"+
    "\1\32\1\132\1\133\2\32\1\47\2\32\1\134\2\32"+
    "\1\135\4\32\1\136\1\116\1\137\3\32\1\114\1\140"+
    "\1\73\2\32\1\141";

  private static int [] zzUnpackAction() {
    int [] result = new int[273];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\100\0\100\0\100\0\200\0\100\0\100"+
    "\0\100\0\300\0\100\0\u0100\0\u0140\0\100\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\100\0\100\0\100\0\100\0\100\0\u0280"+
    "\0\100\0\100\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0\0\u0400"+
    "\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0\0\u0600"+
    "\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0800"+
    "\0\u0840\0\100\0\u0880\0\100\0\100\0\u08c0\0\100\0\u0900"+
    "\0\100\0\u0940\0\100\0\100\0\100\0\u0980\0\100\0\100"+
    "\0\100\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0b40"+
    "\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40"+
    "\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40"+
    "\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140"+
    "\0\u1180\0\u0480\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300"+
    "\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\100\0\u14c0"+
    "\0\u1500\0\100\0\u1540\0\u1580\0\u0480\0\u0480\0\u15c0\0\u1600"+
    "\0\u0480\0\u0480\0\u0480\0\u0480\0\u0480\0\u1640\0\u0480\0\u1680"+
    "\0\u16c0\0\u1700\0\u0480\0\u1740\0\u0480\0\u1780\0\u17c0\0\u0480"+
    "\0\u0480\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900\0\u1940\0\u1980"+
    "\0\u0480\0\u0480\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u0480\0\u0480"+
    "\0\u1ac0\0\u1b00\0\u1b40\0\u0480\0\u1b80\0\u1bc0\0\u1c00\0\u1c40"+
    "\0\u1c80\0\u1cc0\0\u0480\0\u1d00\0\u1d40\0\u1400\0\u1d80\0\u14c0"+
    "\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u0480\0\u0480\0\u1f00"+
    "\0\u1f40\0\u0480\0\u0480\0\u0480\0\u1f80\0\u0480\0\u1fc0\0\u2000"+
    "\0\u2040\0\u2080\0\u0480\0\u20c0\0\u0480\0\u2100\0\u0480\0\u2140"+
    "\0\u0480\0\u0480\0\u2180\0\u21c0\0\u0480\0\u2200\0\u2240\0\u2280"+
    "\0\u22c0\0\u2300\0\u0480\0\u2340\0\u2380\0\u23c0\0\u0480\0\u0480"+
    "\0\u2400\0\u0480\0\u2440\0\u2480\0\u24c0\0\u2500\0\u2540\0\u0480"+
    "\0\u2580\0\u25c0\0\u2600\0\u2640\0\u2680\0\u26c0\0\u2700\0\u2740"+
    "\0\u2780\0\u27c0\0\u0480\0\u0480\0\u2800\0\u2840\0\u2880\0\u28c0"+
    "\0\u2900\0\u0480\0\u2940\0\u2980\0\u29c0\0\u2a00\0\u2a40\0\u2a80"+
    "\0\u0480\0\u2ac0\0\u0480\0\u2b00\0\u0480\0\u2b40\0\u0480\0\u0480"+
    "\0\u2b80\0\u2bc0\0\u0480\0\u2c00\0\u2c40\0\u0480\0\u2c80\0\u2cc0"+
    "\0\u0480\0\u2d00\0\u2d40\0\u2d80\0\u2dc0\0\u0480\0\u0480\0\u0480"+
    "\0\u2e00\0\u2e40\0\u2e80\0\u0480\0\u0480\0\u0480\0\u2ec0\0\u2f00"+
    "\0\u0480";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[273];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\2\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\2\42\1\55\1\42\1\56\2\42"+
    "\1\57\1\60\1\61\1\2\1\62\1\0\1\62\1\0"+
    "\1\42\1\63\1\42\1\2\1\62\104\0\1\64\103\0"+
    "\1\65\101\0\1\66\1\67\77\0\1\70\4\0\1\71"+
    "\66\0\1\72\5\0\1\66\75\0\1\73\2\0\1\16"+
    "\77\0\1\74\1\75\1\76\72\0\1\77\3\0\1\100"+
    "\106\0\1\101\102\0\1\42\1\102\1\103\2\42\1\104"+
    "\1\105\2\42\1\106\2\42\1\107\20\42\4\0\5\42"+
    "\32\0\15\42\1\110\17\42\4\0\5\42\32\0\12\42"+
    "\1\111\2\42\1\112\1\42\1\113\1\114\14\42\4\0"+
    "\5\42\32\0\16\42\1\115\16\42\4\0\5\42\32\0"+
    "\12\42\1\116\2\42\1\117\17\42\4\0\5\42\32\0"+
    "\16\42\1\120\16\42\4\0\5\42\32\0\12\42\1\121"+
    "\5\42\1\122\14\42\4\0\5\42\32\0\35\42\4\0"+
    "\5\42\32\0\1\123\14\42\1\124\2\42\1\125\14\42"+
    "\4\0\5\42\32\0\6\42\1\126\4\42\1\127\1\130"+
    "\11\42\1\131\6\42\4\0\5\42\32\0\1\132\34\42"+
    "\4\0\5\42\32\0\20\42\1\133\14\42\4\0\5\42"+
    "\32\0\14\42\1\134\20\42\4\0\5\42\32\0\17\42"+
    "\1\135\15\42\4\0\5\42\32\0\11\42\1\136\2\42"+
    "\1\137\5\42\1\140\2\42\1\141\7\42\4\0\5\42"+
    "\32\0\4\42\1\142\7\42\1\143\4\42\1\144\13\42"+
    "\4\0\5\42\32\0\1\145\3\42\1\146\30\42\4\0"+
    "\5\42\32\0\17\42\1\147\15\42\4\0\5\42\32\0"+
    "\20\42\1\150\14\42\4\0\5\42\32\0\14\42\1\151"+
    "\20\42\4\0\5\42\32\0\3\42\1\152\31\42\4\0"+
    "\5\42\32\0\17\42\1\153\15\42\4\0\5\42\1\0"+
    "\65\61\1\154\1\155\11\61\31\0\35\156\5\0\1\156"+
    "\1\63\3\0\67\66\1\62\10\66\13\0\1\157\64\0"+
    "\7\160\1\161\70\160\13\0\1\162\115\0\2\42\1\163"+
    "\32\42\4\0\5\42\32\0\2\42\1\164\32\42\4\0"+
    "\5\42\32\0\3\42\1\165\31\42\4\0\5\42\32\0"+
    "\6\42\1\166\1\167\25\42\4\0\5\42\32\0\3\42"+
    "\1\170\31\42\4\0\5\42\32\0\22\42\1\171\12\42"+
    "\4\0\5\42\32\0\3\42\1\172\31\42\4\0\5\42"+
    "\32\0\3\42\1\173\24\42\1\174\4\42\4\0\5\42"+
    "\32\0\25\42\1\175\7\42\4\0\5\42\32\0\14\42"+
    "\1\176\14\42\1\177\3\42\4\0\5\42\32\0\25\42"+
    "\1\200\7\42\4\0\5\42\32\0\17\42\1\201\15\42"+
    "\4\0\5\42\32\0\6\42\1\202\26\42\4\0\5\42"+
    "\32\0\14\42\1\203\20\42\4\0\5\42\32\0\12\42"+
    "\1\204\22\42\4\0\5\42\32\0\3\42\1\205\31\42"+
    "\4\0\5\42\32\0\14\42\1\206\20\42\4\0\5\42"+
    "\32\0\5\42\1\207\27\42\4\0\5\42\32\0\14\42"+
    "\1\210\20\42\4\0\5\42\32\0\4\42\1\211\30\42"+
    "\4\0\5\42\32\0\2\42\1\212\32\42\4\0\5\42"+
    "\32\0\12\42\1\213\22\42\4\0\5\42\32\0\15\42"+
    "\1\214\17\42\4\0\5\42\32\0\1\215\2\42\1\216"+
    "\12\42\1\217\2\42\1\220\13\42\4\0\5\42\32\0"+
    "\4\42\1\221\30\42\4\0\5\42\32\0\3\42\1\222"+
    "\10\42\1\223\20\42\4\0\5\42\32\0\3\42\1\224"+
    "\13\42\1\225\15\42\4\0\5\42\32\0\2\42\1\226"+
    "\32\42\4\0\5\42\32\0\11\42\1\227\23\42\4\0"+
    "\5\42\32\0\3\42\1\230\31\42\4\0\5\42\32\0"+
    "\12\42\1\231\22\42\4\0\5\42\32\0\21\42\1\232"+
    "\13\42\4\0\5\42\32\0\5\42\1\233\4\42\1\234"+
    "\22\42\4\0\5\42\32\0\12\42\1\235\22\42\4\0"+
    "\5\42\32\0\4\42\1\236\30\42\4\0\5\42\32\0"+
    "\12\42\1\237\4\42\1\240\15\42\4\0\5\42\32\0"+
    "\2\42\1\241\32\42\4\0\5\42\32\0\22\42\1\242"+
    "\12\42\4\0\5\42\32\0\3\42\1\243\31\42\4\0"+
    "\5\42\32\0\4\42\1\244\30\42\4\0\5\42\32\0"+
    "\25\42\1\245\7\42\4\0\5\42\32\0\35\246\5\0"+
    "\2\246\3\0\67\61\4\0\5\61\31\0\35\156\5\0"+
    "\2\156\3\0\7\160\1\247\77\160\1\247\5\160\1\250"+
    "\62\160\31\0\3\42\1\251\31\42\4\0\5\42\32\0"+
    "\12\42\1\252\22\42\4\0\5\42\32\0\1\253\34\42"+
    "\4\0\5\42\32\0\12\42\1\254\22\42\4\0\5\42"+
    "\32\0\5\42\1\255\27\42\4\0\5\42\32\0\12\42"+
    "\1\256\22\42\4\0\5\42\32\0\2\42\1\257\32\42"+
    "\4\0\5\42\32\0\12\42\1\260\22\42\4\0\5\42"+
    "\32\0\5\42\1\261\27\42\4\0\5\42\32\0\12\42"+
    "\1\262\22\42\4\0\5\42\32\0\3\42\1\263\31\42"+
    "\4\0\5\42\32\0\12\42\1\264\22\42\4\0\5\42"+
    "\32\0\14\42\1\265\20\42\4\0\5\42\32\0\25\42"+
    "\1\266\7\42\4\0\5\42\32\0\5\42\1\267\27\42"+
    "\4\0\5\42\32\0\12\42\1\270\22\42\4\0\5\42"+
    "\32\0\1\271\34\42\4\0\5\42\32\0\12\42\1\272"+
    "\22\42\4\0\5\42\32\0\12\42\1\273\22\42\4\0"+
    "\5\42\32\0\17\42\1\274\15\42\4\0\5\42\32\0"+
    "\13\42\1\275\21\42\4\0\5\42\32\0\3\42\1\276"+
    "\31\42\4\0\5\42\32\0\14\42\1\277\20\42\4\0"+
    "\5\42\32\0\6\42\1\300\26\42\4\0\5\42\32\0"+
    "\12\42\1\301\22\42\4\0\5\42\32\0\14\42\1\302"+
    "\20\42\4\0\5\42\32\0\3\42\1\303\31\42\4\0"+
    "\5\42\32\0\13\42\1\304\6\42\1\305\12\42\4\0"+
    "\5\42\32\0\13\42\1\306\21\42\4\0\5\42\32\0"+
    "\24\42\1\307\10\42\4\0\5\42\32\0\15\42\1\310"+
    "\1\42\1\311\15\42\4\0\5\42\32\0\17\42\1\312"+
    "\15\42\4\0\5\42\32\0\12\42\1\313\22\42\4\0"+
    "\5\42\1\0\7\160\1\247\5\160\1\62\62\160\31\0"+
    "\4\42\1\314\30\42\4\0\5\42\32\0\4\42\1\315"+
    "\30\42\4\0\5\42\32\0\10\42\1\316\24\42\4\0"+
    "\5\42\32\0\4\42\1\317\30\42\4\0\5\42\32\0"+
    "\12\42\1\320\22\42\4\0\5\42\32\0\1\321\34\42"+
    "\4\0\5\42\32\0\23\42\1\322\11\42\4\0\5\42"+
    "\32\0\3\42\1\323\31\42\4\0\5\42\32\0\3\42"+
    "\1\324\31\42\4\0\5\42\32\0\14\42\1\325\20\42"+
    "\4\0\5\42\32\0\15\42\1\326\17\42\4\0\5\42"+
    "\32\0\5\42\1\327\27\42\4\0\5\42\32\0\6\42"+
    "\1\330\26\42\4\0\5\42\32\0\20\42\1\331\14\42"+
    "\4\0\5\42\32\0\17\42\1\332\15\42\4\0\5\42"+
    "\32\0\17\42\1\333\15\42\4\0\5\42\32\0\17\42"+
    "\1\334\15\42\4\0\5\42\32\0\1\335\34\42\4\0"+
    "\5\42\32\0\20\42\1\336\14\42\4\0\5\42\32\0"+
    "\6\42\1\337\26\42\4\0\5\42\32\0\11\42\1\340"+
    "\23\42\4\0\5\42\32\0\14\42\1\341\20\42\4\0"+
    "\5\42\32\0\1\342\34\42\4\0\5\42\32\0\3\42"+
    "\1\343\31\42\4\0\5\42\32\0\2\42\1\344\32\42"+
    "\4\0\5\42\32\0\2\42\1\345\32\42\4\0\5\42"+
    "\32\0\15\42\1\346\17\42\4\0\5\42\32\0\6\42"+
    "\1\347\26\42\4\0\5\42\32\0\22\42\1\350\12\42"+
    "\4\0\5\42\32\0\2\42\1\351\32\42\4\0\5\42"+
    "\32\0\3\42\1\352\31\42\4\0\5\42\32\0\4\42"+
    "\1\353\30\42\4\0\5\42\32\0\12\42\1\354\22\42"+
    "\4\0\5\42\32\0\3\42\1\355\31\42\4\0\5\42"+
    "\32\0\20\42\1\356\14\42\4\0\5\42\32\0\3\42"+
    "\1\357\31\42\4\0\5\42\32\0\17\42\1\360\15\42"+
    "\4\0\5\42\32\0\12\42\1\361\22\42\4\0\5\42"+
    "\32\0\17\42\1\362\15\42\4\0\5\42\32\0\31\42"+
    "\1\363\3\42\4\0\5\42\32\0\5\42\1\364\27\42"+
    "\4\0\5\42\32\0\12\42\1\365\22\42\4\0\5\42"+
    "\32\0\1\366\34\42\4\0\5\42\32\0\10\42\1\367"+
    "\24\42\4\0\5\42\32\0\2\42\1\370\32\42\4\0"+
    "\5\42\32\0\3\42\1\371\31\42\4\0\5\42\32\0"+
    "\17\42\1\372\15\42\4\0\5\42\32\0\2\42\1\373"+
    "\32\42\4\0\5\42\32\0\17\42\1\374\15\42\4\0"+
    "\5\42\32\0\15\42\1\375\17\42\4\0\5\42\32\0"+
    "\12\42\1\376\22\42\4\0\5\42\32\0\14\42\1\377"+
    "\20\42\4\0\5\42\32\0\12\42\1\u0100\22\42\4\0"+
    "\5\42\32\0\3\42\1\u0101\31\42\4\0\5\42\32\0"+
    "\6\42\1\u0102\26\42\4\0\5\42\32\0\17\42\1\u0103"+
    "\15\42\4\0\5\42\32\0\5\42\1\u0104\27\42\4\0"+
    "\5\42\32\0\20\42\1\u0105\14\42\4\0\5\42\32\0"+
    "\2\42\1\u0106\32\42\4\0\5\42\32\0\3\42\1\u0107"+
    "\31\42\4\0\5\42\32\0\2\42\1\u0108\32\42\4\0"+
    "\5\42\32\0\6\42\1\u0109\26\42\4\0\5\42\32\0"+
    "\13\42\1\u010a\21\42\4\0\5\42\32\0\1\u010b\34\42"+
    "\4\0\5\42\32\0\14\42\1\u010c\20\42\4\0\5\42"+
    "\32\0\10\42\1\u010d\24\42\4\0\5\42\32\0\12\42"+
    "\1\u010e\22\42\4\0\5\42\32\0\6\42\1\u010f\26\42"+
    "\4\0\5\42\32\0\6\42\1\u0110\26\42\4\0\5\42"+
    "\32\0\10\42\1\u0111\24\42\4\0\5\42\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12096];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\4\11\1\1\3\11\1\1\1\11\2\1\1\11"+
    "\4\1\5\11\1\1\2\11\27\1\1\11\1\1\2\11"+
    "\1\1\1\11\1\1\1\11\1\0\3\11\1\1\3\11"+
    "\53\1\1\0\1\1\1\11\2\0\1\11\64\1\1\0"+
    "\152\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[273];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
 public String alloy_filename="";
 public int alloy_lineoffset=0; // If not zero, it is added to the current LINE NUMBER
 public List<Object> alloy_seenDollar;
 public CompModule alloy_module;
 private final Pos alloy_here(String txt) {
    return new Pos(alloy_filename,yycolumn+1,yyline+1+alloy_lineoffset,yycolumn+txt.length(),yyline+1);
 }
 private final Symbol alloy_sym(String txt, int type) {
    Pos p = alloy_here(txt); return new Symbol(type, p, p);
 }
 private final Symbol alloy_string(String txt) throws Err {
    Pos p = alloy_here(txt);
    if (!Version.experimental) throw new ErrorSyntax(p, "String literal is not currently supported.");
    StringBuilder sb = new StringBuilder(txt.length());
    for(int i=0; i<txt.length(); i++) {
       char c = txt.charAt(i);
       if (c=='\r' || c=='\n') throw new ErrorSyntax(p, "String literal cannot span multiple lines; use \\n instead.");
       if (c=='\\') {
          i++;
          if (i>=txt.length()) throw new ErrorSyntax(p, "String literal cannot end with a single \\");
          c = txt.charAt(i);
          if (c=='n') c='\n'; else if (c!='\"' && c!='\\') throw new ErrorSyntax(p, "String literal currenty only supports\nthree escape sequences: \\\\, \\n, and \\\""); // [HASLab]
       }
       sb.append(c);
    }
    txt = sb.toString();
    if (txt.length()==2) throw new ErrorSyntax(p, "Empty string is not allowed; try rewriting your model to use an empty set instead.");
    return new Symbol(CompSym.STR, p, ExprConstant.Op.STRING.make(p, txt));
 }
 private final Symbol alloy_id(String txt) throws Err {
    Pos p=alloy_here(txt);
    if (alloy_seenDollar.size()==0 && txt.indexOf('$')>=0) alloy_seenDollar.add(null);
    return new Symbol(CompSym.ID, p, ExprVar.make(p,txt));
 }
 private final Symbol alloy_num(String txt) throws Err {
    Pos p=alloy_here(txt);
    int n=0;
    try {
       n=Integer.parseInt(txt);
    } catch(NumberFormatException ex) {
       throw new ErrorSyntax(p, "The number "+txt+" is too large to be stored in a Java integer");
    }
    return new Symbol(CompSym.NUMBER, p, ExprConstant.Op.NUMBER.make(p, n));
 }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CompLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2870) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException, Err {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { throw new ErrorSyntax(alloy_here(" "), "Syntax error at the "+yytext()+" character.");
          }
        case 98: break;
        case 2: 
          { return alloy_sym(yytext(), CompSym.PRIME       );
          }
        case 99: break;
        case 3: 
          { return alloy_sym(yytext(), CompSym.NOT         );
          }
        case 100: break;
        case 4: 
          { return alloy_sym(yytext(), CompSym.HASH        );
          }
        case 101: break;
        case 5: 
          { return alloy_sym(yytext(), CompSym.AMPERSAND   );
          }
        case 102: break;
        case 6: 
          { return alloy_sym(yytext(), CompSym.LPAREN      );
          }
        case 103: break;
        case 7: 
          { return alloy_sym(yytext(), CompSym.RPAREN      );
          }
        case 104: break;
        case 8: 
          { return alloy_sym(yytext(), CompSym.STAR        );
          }
        case 105: break;
        case 9: 
          { return alloy_sym(yytext(), CompSym.PLUS        );
          }
        case 106: break;
        case 10: 
          { return alloy_sym(yytext(), CompSym.COMMA       );
          }
        case 107: break;
        case 11: 
          { return alloy_sym(yytext(), CompSym.MINUS       );
          }
        case 108: break;
        case 12: 
          { return alloy_sym(yytext(), CompSym.GT          );
          }
        case 109: break;
        case 13: 
          { return alloy_sym(yytext(), CompSym.DOT         );
          }
        case 110: break;
        case 14: 
          { return alloy_sym(yytext(), CompSym.SLASH       );
          }
        case 111: break;
        case 15: 
          { return alloy_sym(yytext(), CompSym.COLON       );
          }
        case 112: break;
        case 16: 
          { return alloy_sym(yytext(), CompSym.LT          );
          }
        case 113: break;
        case 17: 
          { return alloy_sym(yytext(), CompSym.EQUALS      );
          }
        case 114: break;
        case 18: 
          { return alloy_sym(yytext(), CompSym.AT          );
          }
        case 115: break;
        case 19: 
          { return alloy_sym(yytext(), CompSym.LBRACKET    );
          }
        case 116: break;
        case 20: 
          { return alloy_sym(yytext(), CompSym.RBRACKET    );
          }
        case 117: break;
        case 21: 
          { return alloy_sym(yytext(), CompSym.CARET       );
          }
        case 118: break;
        case 22: 
          { return alloy_sym(yytext(), CompSym.LBRACE      );
          }
        case 119: break;
        case 23: 
          { return alloy_sym(yytext(), CompSym.BAR         );
          }
        case 120: break;
        case 24: 
          { return alloy_sym(yytext(), CompSym.RBRACE      );
          }
        case 121: break;
        case 25: 
          { return alloy_sym(yytext(), CompSym.TILDE       );
          }
        case 122: break;
        case 26: 
          { return alloy_id  (yytext());
          }
        case 123: break;
        case 27: 
          { throw new ErrorSyntax(alloy_here(yytext()),"String literal is missing its closing \" character");
          }
        case 124: break;
        case 28: 
          { 
          }
        case 125: break;
        case 29: 
          { return alloy_num (yytext());
          }
        case 126: break;
        case 30: 
          { return alloy_sym(yytext(), CompSym.AND         );
          }
        case 127: break;
        case 31: 
          { return alloy_sym(yytext(), CompSym.PLUSPLUS    );
          }
        case 128: break;
        case 32: 
          { return alloy_sym(yytext(), CompSym.ARROW       );
          }
        case 129: break;
        case 33: 
          { return alloy_sym(yytext(), CompSym.SHA         );
          }
        case 130: break;
        case 34: 
          { return alloy_sym(yytext(), CompSym.GTE         );
          }
        case 131: break;
        case 35: 
          { return alloy_sym(yytext(), CompSym.RANGE       );
          }
        case 132: break;
        case 36: 
          { return alloy_sym(yytext(), CompSym.DOMAIN      );
          }
        case 133: break;
        case 37: 
          { return alloy_sym(yytext(), CompSym.SHL         );
          }
        case 134: break;
        case 38: 
          { return alloy_sym(yytext(), CompSym.LTE         );
          }
        case 135: break;
        case 39: 
          { return alloy_sym(yytext(), CompSym.IMPLIES     );
          }
        case 136: break;
        case 40: 
          { return alloy_sym(yytext(), CompSym.OR          );
          }
        case 137: break;
        case 41: 
          { return alloy_sym(yytext(), CompSym.AS          );
          }
        case 138: break;
        case 42: 
          { return alloy_sym(yytext(), CompSym.NO          );
          }
        case 139: break;
        case 43: 
          { return alloy_sym(yytext(), CompSym.IN          );
          }
        case 140: break;
        case 44: 
          { return alloy_string(yytext());
          }
        case 141: break;
        case 45: 
          { throw new ErrorSyntax(alloy_here(yytext()),"Name cannot start with a number.");
          }
        case 142: break;
        case 46: 
          { return alloy_sym(yytext(), CompSym.SHR         );
          }
        case 143: break;
        case 47: 
          { return alloy_sym(yytext(), CompSym.IFF         );
          }
        case 144: break;
        case 48: 
          { return alloy_sym(yytext(), CompSym.ACT         );
          }
        case 145: break;
        case 49: 
          { return alloy_sym(yytext(), CompSym.ALL         );
          }
        case 146: break;
        case 50: 
          { return alloy_sym(yytext(), CompSym.BUT         );
          }
        case 147: break;
        case 51: 
          { return alloy_sym(yytext(), CompSym.SET         );
          }
        case 148: break;
        case 52: 
          { return alloy_sym(yytext(), CompSym.SEQ         );
          }
        case 149: break;
        case 53: 
          { return alloy_sym(yytext(), CompSym.SUM         );
          }
        case 150: break;
        case 54: 
          { return alloy_sym(yytext(), CompSym.SIG         );
          }
        case 151: break;
        case 55: 
          { return alloy_sym(yytext(), CompSym.RUN         );
          }
        case 152: break;
        case 56: 
          { return alloy_sym(yytext(), CompSym.LET         );
          }
        case 153: break;
        case 57: 
          { return alloy_sym(yytext(), CompSym.FUN         );
          }
        case 154: break;
        case 58: 
          { return alloy_sym(yytext(), CompSym.FOR         );
          }
        case 155: break;
        case 59: 
          { return alloy_sym(yytext(), CompSym.EXH         );
          }
        case 156: break;
        case 60: 
          { return alloy_sym(yytext(), CompSym.VAR         );
          }
        case 157: break;
        case 61: 
          { return alloy_sym(yytext(), CompSym.INT         );
          }
        case 158: break;
        case 62: 
          { return alloy_sym(yytext(), CompSym.ONE         );
          }
        case 159: break;
        case 63: 
          { return alloy_sym(yytext(), CompSym.SIGINT      );
          }
        case 160: break;
        case 64: 
          { throw new ErrorSyntax(alloy_here(yytext()),"String literal cannot be followed by a legal identifier character.");
          }
        case 161: break;
        case 65: 
          { return alloy_sym(yytext(), CompSym.SOME        );
          }
        case 162: break;
        case 66: 
          { return alloy_sym(yytext(), CompSym.THIS        );
          }
        case 163: break;
        case 67: 
          { return alloy_sym(yytext(), CompSym.LONE        );
          }
        case 164: break;
        case 68: 
          { return alloy_sym(yytext(), CompSym.FACT        );
          }
        case 165: break;
        case 69: 
          { return alloy_sym(yytext(), CompSym.ELSE        );
          }
        case 166: break;
        case 70: 
          { return alloy_sym(yytext(), CompSym.ENUM        );
          }
        case 167: break;
        case 71: 
          { return alloy_sym(yytext(), CompSym.NONE        );
          }
        case 168: break;
        case 72: 
          { return alloy_sym(yytext(), CompSym.UNIV        );
          }
        case 169: break;
        case 73: 
          { return alloy_sym(yytext(), CompSym.IDEN        );
          }
        case 170: break;
        case 74: 
          { return alloy_sym(yytext(), CompSym.ONCE        );
          }
        case 171: break;
        case 75: 
          { return alloy_sym(yytext(), CompSym.OPEN        );
          }
        case 172: break;
        case 76: 
          { return alloy_sym(yytext(), CompSym.PART        );
          }
        case 173: break;
        case 77: 
          { return alloy_sym(yytext(), CompSym.PRED        );
          }
        case 174: break;
        case 78: 
          { return alloy_sym(yytext(), CompSym.DISJ        );
          }
        case 175: break;
        case 79: 
          { return alloy_sym(yytext(), CompSym.TIME        );
          }
        case 176: break;
        case 80: 
          { return alloy_sym(yytext(), CompSym.AFTER       );
          }
        case 177: break;
        case 81: 
          { return alloy_sym(yytext(), CompSym.SINCE       );
          }
        case 178: break;
        case 82: 
          { return alloy_sym(yytext(), CompSym.CHECK       );
          }
        case 179: break;
        case 83: 
          { return alloy_sym(yytext(), CompSym.UNTIL       );
          }
        case 180: break;
        case 84: 
          { return alloy_sym(yytext(), CompSym.ASSERT      );
          }
        case 181: break;
        case 85: 
          { return alloy_sym(yytext(), CompSym.ALWAYS      );
          }
        case 182: break;
        case 86: 
          { return alloy_sym(yytext(), CompSym.EXPECT      );
          }
        case 183: break;
        case 87: 
          { return alloy_sym(yytext(), CompSym.MODULE      );
          }
        case 184: break;
        case 88: 
          { return alloy_sym(yytext(), CompSym.STRING      );
          }
        case 185: break;
        case 89: 
          { return alloy_sym(yytext(), CompSym.RELEASE     );
          }
        case 186: break;
        case 90: 
          { return alloy_sym(yytext(), CompSym.EXACTLY     );
          }
        case 187: break;
        case 91: 
          { return alloy_sym(yytext(), CompSym.EXTENDS     );
          }
        case 188: break;
        case 92: 
          { return alloy_sym(yytext(), CompSym.PRIVATE     );
          }
        case 189: break;
        case 93: 
          { return alloy_sym(yytext(), CompSym.ABSTRACT    );
          }
        case 190: break;
        case 94: 
          { return alloy_sym(yytext(), CompSym.PREVIOUS    );
          }
        case 191: break;
        case 95: 
          { return alloy_sym(yytext(), CompSym.MODIFIES    );
          }
        case 192: break;
        case 96: 
          { return alloy_sym(yytext(), CompSym.EVENTUALLY  );
          }
        case 193: break;
        case 97: 
          { return alloy_sym(yytext(), CompSym.HISTORICALLY);
          }
        case 194: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {   return new Symbol(CompSym.EOF, alloy_here(" "), alloy_here(" "));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
