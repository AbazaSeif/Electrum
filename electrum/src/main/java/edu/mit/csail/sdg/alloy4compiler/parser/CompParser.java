
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jan 08 15:47:22 WET 2018
//----------------------------------------------------

package edu.mit.csail.sdg.alloy4compiler.parser;

import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.TreeSet;
import java.util.Map;
import java.util.LinkedHashMap;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.Reader;
import java.io.IOException;
import java.io.StringReader;
import java_cup.runtime.*;
import edu.mit.csail.sdg.alloy4.Err;
import edu.mit.csail.sdg.alloy4.ErrorFatal;
import edu.mit.csail.sdg.alloy4.ErrorSyntax;
import edu.mit.csail.sdg.alloy4.Pos;
import edu.mit.csail.sdg.alloy4.Pair;
import edu.mit.csail.sdg.alloy4.Util;
import edu.mit.csail.sdg.alloy4.Version;
import edu.mit.csail.sdg.alloy4compiler.ast.Attr.AttrType;
import edu.mit.csail.sdg.alloy4compiler.ast.CommandScope;
import edu.mit.csail.sdg.alloy4compiler.ast.Decl;
import edu.mit.csail.sdg.alloy4compiler.ast.Expr;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprBadJoin;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprITE;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprLet;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprList;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprConstant;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprQt;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprUnary;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprVar;
import edu.mit.csail.sdg.alloy4compiler.ast.Sig;
import edu.mit.csail.sdg.alloy4compiler.ast.Sig.PrimSig;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jan 08 15:47:22 WET 2018
  */
public class CompParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CompParser() {super();}

  /** Constructor which sets the default scanner. */
  public CompParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u018a\000\002\112\003\000\002\002\004\000\002\113" +
    "\005\000\002\113\010\000\002\113\006\000\002\113\010" +
    "\000\002\113\011\000\002\113\013\000\002\113\011\000" +
    "\002\113\010\000\002\113\005\000\002\113\006\000\002" +
    "\113\006\000\002\113\005\000\002\113\006\000\002\113" +
    "\006\000\002\113\004\000\002\113\004\000\002\113\004" +
    "\000\002\113\004\000\002\113\004\000\002\113\002\000" +
    "\002\013\003\000\002\013\003\000\002\012\007\000\002" +
    "\012\006\000\002\012\011\000\002\012\010\000\002\012" +
    "\007\000\002\012\006\000\002\012\011\000\002\012\010" +
    "\000\002\027\002\000\002\027\004\000\002\101\004\000" +
    "\002\101\006\000\002\101\004\000\002\101\002\000\002" +
    "\116\003\000\002\116\005\000\002\115\004\000\002\115" +
    "\004\000\002\115\004\000\002\115\004\000\002\115\004" +
    "\000\002\115\004\000\002\115\004\000\002\115\004\000" +
    "\002\114\004\000\002\114\007\000\002\114\011\000\002" +
    "\114\006\000\002\114\003\000\002\114\006\000\002\114" +
    "\010\000\002\114\005\000\002\051\011\000\002\051\010" +
    "\000\002\051\011\000\002\051\010\000\002\051\006\000" +
    "\002\052\003\000\002\052\004\000\002\037\013\000\002" +
    "\037\013\000\002\037\010\000\002\037\015\000\002\037" +
    "\015\000\002\037\012\000\002\073\011\000\002\073\011" +
    "\000\002\073\006\000\002\073\013\000\002\073\013\000" +
    "\002\073\010\000\002\131\002\000\002\131\003\000\002" +
    "\102\011\000\002\104\003\000\002\104\003\000\002\104" +
    "\003\000\002\104\003\000\002\104\003\000\002\104\003" +
    "\000\002\105\003\000\002\105\004\000\002\103\004\000" +
    "\002\103\004\000\002\103\004\000\002\103\002\000\002" +
    "\106\003\000\002\106\003\000\002\106\003\000\002\106" +
    "\003\000\002\106\003\000\002\106\005\000\002\106\003" +
    "\000\002\110\002\000\002\110\003\000\002\107\003\000" +
    "\002\107\005\000\002\111\003\000\002\111\005\000\002" +
    "\053\003\000\002\053\005\000\002\053\005\000\002\054" +
    "\003\000\002\054\005\000\002\055\003\000\002\055\005" +
    "\000\002\056\003\000\002\056\004\000\002\056\005\000" +
    "\002\056\006\000\002\014\006\000\002\014\006\000\002" +
    "\014\006\000\002\014\007\000\002\014\006\000\002\014" +
    "\005\000\002\014\007\000\002\014\010\000\002\014\007" +
    "\000\002\014\006\000\002\014\007\000\002\014\007\000" +
    "\002\014\007\000\002\014\010\000\002\014\007\000\002" +
    "\014\006\000\002\014\010\000\002\014\011\000\002\014" +
    "\010\000\002\014\007\000\002\015\003\000\002\015\006" +
    "\000\002\015\006\000\002\015\006\000\002\015\007\000" +
    "\002\015\006\000\002\015\005\000\002\015\007\000\002" +
    "\015\007\000\002\015\007\000\002\015\010\000\002\015" +
    "\007\000\002\015\006\000\002\020\005\000\002\020\003" +
    "\000\002\016\005\000\002\016\003\000\002\017\002\000" +
    "\002\017\003\000\002\017\005\000\002\017\004\000\002" +
    "\050\006\000\002\050\007\000\002\032\002\000\002\032" +
    "\003\000\002\031\005\000\002\031\004\000\002\033\003" +
    "\000\002\033\004\000\002\034\004\000\002\034\003\000" +
    "\002\035\002\000\002\035\003\000\002\036\003\000\002" +
    "\036\005\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\005\004\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\067\003\000\002\067\005\000\002" +
    "\070\003\000\002\070\005\000\002\025\003\000\002\025" +
    "\005\000\002\026\003\000\002\026\005\000\002\040\003" +
    "\000\002\040\003\000\002\042\003\000\002\042\007\000" +
    "\002\044\007\000\002\044\005\000\002\042\007\000\002" +
    "\044\005\000\002\041\003\000\002\041\003\000\002\043" +
    "\003\000\002\043\007\000\002\045\007\000\002\045\005" +
    "\000\002\002\003\000\002\002\005\000\002\003\003\000" +
    "\002\003\005\000\002\063\003\000\002\063\005\000\002" +
    "\063\005\000\002\063\005\000\002\063\005\000\002\064" +
    "\003\000\002\064\005\000\002\064\005\000\002\064\005" +
    "\000\002\064\005\000\002\061\003\000\002\061\004\000" +
    "\002\061\004\000\002\061\004\000\002\061\004\000\002" +
    "\061\004\000\002\061\004\000\002\061\004\000\002\061" +
    "\004\000\002\061\004\000\002\061\004\000\002\061\004" +
    "\000\002\061\004\000\002\062\003\000\002\062\004\000" +
    "\002\062\004\000\002\062\004\000\002\062\004\000\002" +
    "\062\004\000\002\062\004\000\002\057\003\000\002\057" +
    "\004\000\002\057\004\000\002\060\003\000\002\060\004" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\010\004\000\002\010\004\000\002" +
    "\010\003\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\003\000\002\117\003\000\002\117\005\000" +
    "\002\117\005\000\002\117\005\000\002\120\003\000\002" +
    "\120\005\000\002\120\005\000\002\120\005\000\002\123" +
    "\003\000\002\123\005\000\002\123\005\000\002\123\005" +
    "\000\002\123\005\000\002\124\003\000\002\124\005\000" +
    "\002\124\005\000\002\124\005\000\002\124\005\000\002" +
    "\121\003\000\002\121\005\000\002\121\005\000\002\121" +
    "\005\000\002\122\003\000\002\122\005\000\002\122\005" +
    "\000\002\122\005\000\002\065\003\000\002\065\004\000" +
    "\002\065\004\000\002\065\004\000\002\065\004\000\002" +
    "\065\004\000\002\065\004\000\002\066\003\000\002\066" +
    "\004\000\002\066\004\000\002\066\004\000\002\071\003" +
    "\000\002\071\005\000\002\072\003\000\002\072\005\000" +
    "\002\046\003\000\002\046\005\000\002\047\003\000\002" +
    "\047\005\000\002\076\003\000\002\076\003\000\002\076" +
    "\003\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\076\003\000\002\076\003\000\002\076\003\000" +
    "\002\076\003\000\002\076\003\000\002\076\003\000\002" +
    "\076\003\000\002\076\003\000\002\076\003\000\002\076" +
    "\003\000\002\077\003\000\002\077\005\000\002\100\003" +
    "\000\002\100\005\000\002\021\003\000\002\021\005\000" +
    "\002\022\003\000\002\022\005\000\002\074\003\000\002" +
    "\074\005\000\002\075\003\000\002\075\005\000\002\006" +
    "\003\000\002\007\003\000\002\007\006\000\002\007\006" +
    "\000\002\007\006\000\002\007\006\000\002\007\006\000" +
    "\002\023\003\000\002\023\005\000\002\024\003\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\125\004\000\002\125\004" +
    "\000\002\125\004\000\002\125\004\000\002\125\004\000" +
    "\002\125\004\000\002\126\003\000\002\126\004\000\002" +
    "\126\004\000\002\126\004\000\002\125\004\000\002\125" +
    "\004\000\002\126\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\005\000\002" +
    "\004\003\000\002\004\004\000\002\004\003\000\002\004" +
    "\006\000\002\004\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0306\000\002\001\uffec\000\004\002\u0308\001\002\000" +
    "\034\002\001\035\026\043\010\050\017\065\016\104\006" +
    "\111\022\125\027\126\032\147\012\154\023\162\013\166" +
    "\030\001\uffb6\000\002\001\uffb2\000\002\001\uffef\000\014" +
    "\100\260\155\055\173\051\200\045\202\u0304\001\002\000" +
    "\002\001\uffee\000\014\057\uffb5\067\uffb5\102\uffb5\141\uffb5" +
    "\146\uffb5\001\uffaf\000\002\001\uffad\000\012\100\260\155" +
    "\055\173\051\200\045\001\002\000\002\001\ufff0\000\014" +
    "\100\260\155\055\173\051\200\045\202\u02f3\001\002\000" +
    "\002\001\uffeb\000\002\001\ufff1\000\020\035\026\104\006" +
    "\125\027\126\032\147\u02f1\162\013\166\030\001\002\000" +
    "\010\155\055\173\051\200\045\001\002\000\002\001\uffea" +
    "\000\010\155\055\173\051\200\045\001\002\000\004\075" +
    "\u02a3\001\uffed\000\002\001\uffb3\000\002\001\uffb1\000\002" +
    "\001\uffb0\000\014\057\033\067\037\102\034\141\036\146" +
    "\035\001\002\000\002\001\uffae\000\010\155\055\173\051" +
    "\200\045\001\002\000\010\155\055\173\051\200\045\001" +
    "\002\000\022\114\047\155\043\163\050\170\042\173\051" +
    "\174\040\176\046\200\045\001\002\000\010\155\055\173" +
    "\051\200\045\001\002\000\022\114\047\155\043\163\050" +
    "\170\042\173\051\174\040\176\046\200\045\001\002\000" +
    "\002\001\uffa4\000\010\051\u025c\101\u025e\105\u025d\001\uffa7" +
    "\000\002\001\uffa5\000\004\164\u0126\001\002\000\004\164" +
    "\060\001\uff9a\000\002\001\uff97\000\002\001\uffa6\000\002" +
    "\001\uffa1\000\002\001\uffa3\000\004\164\u0176\001\002\000" +
    "\004\055\053\001\002\000\010\155\055\173\051\200\045" +
    "\001\002\000\010\051\062\101\064\105\063\001\002\000" +
    "\004\164\056\001\002\000\004\200\045\001\002\000\004" +
    "\164\060\001\uff98\000\004\200\061\001\002\000\002\001" +
    "\uff96\000\134\031\125\032\154\033\160\034\161\036\131" +
    "\037\206\044\105\047\224\053\240\072\235\073\123\077" +
    "\176\100\133\102\232\103\220\104\163\105\135\112\162" +
    "\113\227\114\047\115\142\124\120\125\164\127\132\130" +
    "\204\131\144\132\151\133\225\134\167\155\214\156\211" +
    "\163\050\165\172\166\221\167\173\170\042\171\210\172" +
    "\126\173\202\174\040\175\143\176\046\200\045\201\157" +
    "\202\146\001\002\000\024\052\076\053\065\062\067\126" +
    "\074\143\066\147\077\155\055\173\051\200\045\001\uff6a" +
    "\000\024\052\076\053\065\062\067\126\074\143\066\147" +
    "\077\155\055\173\051\200\045\001\uff6a\000\010\155\055" +
    "\173\051\200\045\001\002\000\010\155\055\173\051\200" +
    "\045\001\002\000\010\155\055\173\051\200\045\001\002" +
    "\000\002\001\uff95\000\004\052\u0244\001\uff69\000\002\001" +
    "\uff7b\000\010\051\u01f0\052\102\060\u0240\001\002\000\014" +
    "\053\u0229\147\u022b\155\055\173\051\200\045\001\002\000" +
    "\004\152\u0225\001\002\000\024\052\076\053\065\062\067" +
    "\126\074\143\066\147\077\155\055\173\051\200\045\001" +
    "\uff6a\000\012\053\100\155\055\173\051\200\045\001\002" +
    "\000\010\155\055\173\051\200\045\001\002\000\010\051" +
    "\104\052\102\060\103\001\002\000\010\155\055\173\051" +
    "\200\045\001\002\000\134\031\125\032\154\033\160\034" +
    "\161\036\131\037\206\044\105\047\224\053\u021c\072\235" +
    "\073\123\077\176\100\133\102\232\103\220\104\163\105" +
    "\135\112\162\113\227\114\047\115\142\124\120\125\164" +
    "\127\132\130\204\131\144\132\151\133\225\134\167\155" +
    "\214\156\211\163\050\165\172\166\221\167\173\170\042" +
    "\171\210\172\126\173\202\174\040\175\143\176\046\200" +
    "\045\201\157\202\146\001\002\000\134\031\125\032\154" +
    "\033\160\034\161\036\131\037\206\044\105\047\224\053" +
    "\200\072\235\073\123\077\176\100\133\102\232\103\220" +
    "\104\163\105\135\112\162\113\227\114\047\115\142\124" +
    "\120\125\164\127\132\130\204\131\144\132\151\133\225" +
    "\134\167\155\214\156\211\163\050\165\172\166\221\167" +
    "\173\170\042\171\210\172\126\173\202\174\040\175\143" +
    "\176\046\200\045\201\157\202\146\001\002\000\010\155" +
    "\055\173\051\200\045\001\002\000\002\001\uff48\000\002" +
    "\001\uff4a\000\006\140\u0218\177\242\001\uff56\000\006\041" +
    "\u020f\075\u020e\001\uff3c\000\002\001\uff44\000\004\140\u020c" +
    "\001\uff2f\000\002\001\uff34\000\044\004\367\005\354\006" +
    "\370\007\362\010\363\011\372\012\365\013\357\014\373" +
    "\015\361\016\356\017\364\020\355\021\366\022\360\023" +
    "\374\054\u0208\001\ufeaa\000\002\001\ufeac\000\002\001\ufed3" +
    "\000\022\053\065\062\067\126\074\143\066\147\077\155" +
    "\055\173\051\200\045\001\002\000\002\001\ufed7\000\004" +
    "\145\u0204\001\ufec8\000\002\001\ufe82\000\002\001\ufecf\000" +
    "\002\001\ufe80\000\104\031\125\032\154\033\160\034\161" +
    "\037\206\044\105\047\224\053\240\072\235\073\123\077" +
    "\176\100\133\101\331\102\232\103\220\105\135\112\162" +
    "\114\047\124\120\155\043\163\050\165\172\167\173\170" +
    "\042\171\210\172\126\173\202\174\040\175\143\176\046" +
    "\200\045\201\157\202\146\001\002\000\002\001\uff1d\000" +
    "\002\001\uff2a\000\102\031\125\032\154\033\160\034\161" +
    "\037\206\044\105\047\224\053\240\072\235\073\123\077" +
    "\176\100\133\102\232\103\220\105\135\112\162\114\047" +
    "\124\120\155\043\163\050\165\172\167\173\170\042\171" +
    "\210\172\126\173\202\174\040\175\143\176\046\200\045" +
    "\201\157\202\146\001\002\000\134\031\125\032\154\033" +
    "\160\034\161\036\131\037\206\044\105\047\224\053\240" +
    "\072\235\073\123\077\176\100\133\102\232\103\220\104" +
    "\163\105\135\112\162\113\227\114\047\115\142\124\120" +
    "\125\164\127\132\130\204\131\144\132\151\133\225\134" +
    "\167\155\214\156\211\163\050\165\172\166\221\167\173" +
    "\170\042\171\210\172\126\173\202\174\040\175\143\176" +
    "\046\200\045\201\157\202\146\001\002\000\146\031\125" +
    "\032\154\033\160\034\161\036\131\037\206\044\105\047" +
    "\224\053\u01da\062\u01d6\072\235\073\123\077\176\100\133" +
    "\102\232\103\220\104\163\105\135\112\162\113\227\114" +
    "\047\115\142\124\120\125\164\126\074\127\132\130\204" +
    "\131\144\132\151\133\225\134\167\143\u01d7\147\u01dd\151" +
    "\264\155\214\156\211\163\050\165\172\166\221\167\173" +
    "\170\042\171\210\172\126\173\202\174\040\175\143\176" +
    "\046\200\045\201\157\202\146\001\002\000\002\001\uff8b" +
    "\000\134\031\125\032\154\033\160\034\161\036\131\037" +
    "\206\044\105\047\224\053\240\072\235\073\123\077\176" +
    "\100\133\102\232\103\220\104\163\105\135\112\162\113" +
    "\227\114\047\115\142\124\120\125\164\127\132\130\204" +
    "\131\144\132\151\133\225\134\167\155\214\156\211\163" +
    "\050\165\172\166\221\167\173\170\042\171\210\172\126" +
    "\173\202\174\040\175\143\176\046\200\045\201\157\202" +
    "\146\001\002\000\004\150\u01d2\001\ufea6\000\002\001\ufea8" +
    "\000\006\055\u01d0\101\317\001\ufea2\000\002\001\ufea4\000" +
    "\120\031\125\032\154\033\160\034\161\036\131\037\206" +
    "\044\105\047\224\053\240\072\235\073\123\077\176\100" +
    "\133\102\232\103\220\104\163\105\135\112\162\113\227" +
    "\114\047\115\142\124\120\125\164\155\214\156\211\163" +
    "\050\165\172\166\221\167\173\170\042\171\210\172\126" +
    "\173\202\174\040\175\143\176\046\200\045\201\157\202" +
    "\146\001\002\000\070\031\125\032\154\033\160\037\206" +
    "\044\105\047\224\073\123\100\133\102\232\103\220\105" +
    "\135\112\162\114\047\124\120\155\043\163\050\165\172" +
    "\167\173\170\042\171\210\173\202\174\040\175\143\176" +
    "\046\200\045\201\157\202\146\001\002\000\134\031\125" +
    "\032\154\033\160\034\161\036\131\037\206\044\105\047" +
    "\224\053\240\072\235\073\123\077\176\100\133\102\232" +
    "\103\220\104\163\105\135\112\162\113\227\114\047\115" +
    "\142\124\120\125\164\127\132\130\204\131\144\132\151" +
    "\133\225\134\167\155\214\156\211\163\050\165\172\166" +
    "\221\167\173\170\042\171\210\172\126\173\202\174\040" +
    "\175\143\176\046\200\045\201\157\202\146\001\002\000" +
    "\002\001\ufe7c\000\002\001\ufe83\000\010\157\u010d\160\u010b" +
    "\161\u010c\001\ufeea\000\002\001\ufefe\000\134\031\125\032" +
    "\154\033\160\034\161\036\131\037\206\044\105\047\224" +
    "\053\240\072\235\073\123\077\176\100\133\102\232\103" +
    "\220\104\163\105\135\112\162\113\227\114\047\115\142" +
    "\124\120\125\164\127\132\130\204\131\144\132\151\133" +
    "\225\134\167\155\214\156\211\163\050\165\172\166\221" +
    "\167\173\170\042\171\210\172\126\173\202\174\040\175" +
    "\143\176\046\200\045\201\157\202\146\001\002\000\032" +
    "\060\u01ae\070\u01ac\071\u01a6\076\u01a7\106\u01af\107\u01a8\116" +
    "\u01a5\117\u01aa\120\u01a9\121\u01a4\122\u01ad\123\u01ab\001\uff13" +
    "\000\002\001\uff16\000\002\001\ufe7f\000\004\142\u01a0\001" +
    "\uff57\000\002\001\uff58\000\002\001\ufe84\000\002\001\ufe7e" +
    "\000\004\101\u019d\001\002\000\022\053\065\062\067\126" +
    "\074\143\066\147\077\155\055\173\051\200\045\001\002" +
    "\000\102\031\125\032\154\033\160\034\161\037\206\044" +
    "\105\047\224\053\240\072\235\073\123\077\176\100\133" +
    "\102\232\103\220\105\135\112\162\114\047\124\120\155" +
    "\043\163\050\165\172\167\173\170\042\171\210\172\126" +
    "\173\202\174\040\175\143\176\046\200\045\201\157\202" +
    "\146\001\002\000\102\031\125\032\154\033\160\034\161" +
    "\037\206\044\105\047\224\053\240\072\235\073\123\077" +
    "\176\100\133\102\232\103\220\105\135\112\162\114\047" +
    "\124\120\155\043\163\050\165\172\167\173\170\042\171" +
    "\210\172\126\173\202\174\040\175\143\176\046\200\045" +
    "\201\157\202\146\001\002\000\004\074\u0187\001\uff4c\000" +
    "\002\001\uff4e\000\134\031\125\032\154\033\160\034\161" +
    "\036\131\037\206\044\105\047\224\053\240\072\235\073" +
    "\123\077\176\100\133\102\232\103\220\104\163\105\135" +
    "\112\162\113\227\114\047\115\142\124\120\125\164\127" +
    "\132\130\204\131\144\132\151\133\225\134\167\155\214" +
    "\156\211\163\050\165\172\166\221\167\173\170\042\171" +
    "\210\172\126\173\202\174\040\175\143\176\046\200\045" +
    "\201\157\202\146\001\002\000\002\001\ufebe\000\002\001" +
    "\ufec0\000\022\053\065\062\067\126\074\143\066\147\077" +
    "\155\055\173\051\200\045\001\002\000\070\031\125\032" +
    "\154\033\160\037\206\044\105\047\224\073\123\100\133" +
    "\102\232\103\220\105\135\112\162\114\047\124\120\155" +
    "\043\163\050\165\172\167\173\170\042\171\210\173\202" +
    "\174\040\175\143\176\046\200\045\201\157\202\146\001" +
    "\002\000\004\177\326\001\ufe97\000\004\177\u011e\001\ufe99" +
    "\000\104\031\125\032\154\033\160\034\161\037\206\044" +
    "\105\047\224\053\240\072\235\073\123\077\176\100\133" +
    "\101\334\102\232\103\220\105\135\112\162\114\047\124" +
    "\120\155\043\163\050\165\172\167\173\170\042\171\210" +
    "\172\126\173\202\174\040\175\143\176\046\200\045\201" +
    "\157\202\146\001\002\000\002\001\ufe8b\000\136\031\125" +
    "\032\154\033\160\034\161\036\131\037\206\044\105\047" +
    "\224\053\240\072\235\073\123\077\176\100\133\101\243" +
    "\102\232\103\220\104\163\105\135\112\162\113\227\114" +
    "\047\115\142\124\120\125\164\127\132\130\204\131\144" +
    "\132\151\133\225\134\167\155\214\156\211\163\050\165" +
    "\172\166\221\167\173\170\042\171\210\172\126\173\202" +
    "\174\040\175\143\176\046\200\045\201\157\202\146\001" +
    "\002\000\010\026\u0178\027\u017a\030\u0179\001\ufedc\000\004" +
    "\164\u0176\001\ufe81\000\002\001\ufee1\000\134\031\125\032" +
    "\154\033\160\034\161\036\131\037\206\044\105\047\224" +
    "\053\240\072\235\073\123\077\176\100\133\102\232\103" +
    "\220\104\163\105\135\112\162\113\227\114\047\115\142" +
    "\124\120\125\164\127\132\130\204\131\144\132\151\133" +
    "\225\134\167\155\214\156\211\163\050\165\172\166\221" +
    "\167\173\170\042\171\210\172\126\173\202\174\040\175" +
    "\143\176\046\200\045\201\157\202\146\001\002\000\004" +
    "\040\u0172\001\ufec2\000\022\053\065\062\067\126\074\143" +
    "\066\147\077\155\055\173\051\200\045\001\002\000\002" +
    "\001\ufec4\000\022\053\065\062\067\126\074\143\066\147" +
    "\077\155\055\173\051\200\045\001\002\000\102\031\125" +
    "\032\154\033\160\034\161\037\206\044\105\047\224\053" +
    "\240\072\235\073\123\077\176\100\133\102\232\103\220" +
    "\105\135\112\162\114\047\124\120\155\043\163\050\165" +
    "\172\167\173\170\042\171\210\172\126\173\202\174\040" +
    "\175\143\176\046\200\045\201\157\202\146\001\002\000" +
    "\010\135\u012a\136\u012c\137\u012b\001\uff36\000\002\001\uff38" +
    "\000\104\031\125\032\154\033\160\034\161\037\206\044" +
    "\105\047\224\053\240\072\235\073\123\077\176\100\133" +
    "\102\232\103\220\105\135\112\162\114\047\124\120\155" +
    "\043\163\050\164\u0126\165\172\167\173\170\042\171\210" +
    "\172\126\173\202\174\040\175\143\176\046\200\045\201" +
    "\157\202\146\001\002\000\002\001\uffa7\000\002\001\ufe9f" +
    "\000\002\001\ufea0\000\022\053\065\062\067\126\074\143" +
    "\066\147\077\155\055\173\051\200\045\001\002\000\102" +
    "\031\125\032\154\033\160\034\161\037\206\044\105\047" +
    "\224\053\240\072\235\073\123\077\176\100\133\102\232" +
    "\103\220\105\135\112\162\114\047\124\120\155\043\163" +
    "\050\165\172\167\173\170\042\171\210\172\126\173\202" +
    "\174\040\175\143\176\046\200\045\201\157\202\146\001" +
    "\002\000\002\001\uff3e\000\002\001\uff46\000\070\031\125" +
    "\032\154\033\160\037\206\044\105\047\224\073\123\100" +
    "\133\102\232\103\220\105\135\112\162\114\047\124\120" +
    "\155\043\163\050\165\172\167\173\170\042\171\210\173" +
    "\202\174\040\175\143\176\046\200\045\201\157\202\146" +
    "\001\002\000\134\031\125\032\154\033\160\034\161\036" +
    "\131\037\206\044\105\047\224\053\240\072\235\073\123" +
    "\077\176\100\133\102\232\103\220\104\163\105\135\112" +
    "\162\113\227\114\047\115\142\124\120\125\164\127\132" +
    "\130\204\131\144\132\151\133\225\134\167\155\214\156" +
    "\211\163\050\165\172\166\221\167\173\170\042\171\210" +
    "\172\126\173\202\174\040\175\143\176\046\200\045\201" +
    "\157\202\146\001\002\000\002\001\ufe7a\000\102\031\125" +
    "\032\154\033\160\034\161\037\206\044\105\047\224\053" +
    "\240\072\235\073\123\077\176\100\133\102\232\103\220" +
    "\105\135\112\162\114\047\124\120\155\043\163\050\165" +
    "\172\167\173\170\042\171\210\172\126\173\202\174\040" +
    "\175\143\176\046\200\045\201\157\202\146\001\002\000" +
    "\012\024\275\025\273\110\274\144\272\001\ufee5\000\002" +
    "\001\ufee9\000\010\155\055\173\051\200\045\001\002\000" +
    "\002\001\uff3d\000\002\001\uff45\000\102\031\125\032\154" +
    "\033\160\034\161\037\206\044\105\047\224\053\240\072" +
    "\235\073\123\077\176\100\133\102\232\103\220\105\135" +
    "\112\162\114\047\124\120\155\043\163\050\165\172\167" +
    "\173\170\042\171\210\172\126\173\202\174\040\175\143" +
    "\176\046\200\045\201\157\202\146\001\002\000\002\001" +
    "\ufec7\000\002\001\ufecb\000\004\101\243\001\002\000\004" +
    "\177\242\001\ufece\000\002\001\ufe87\000\134\031\125\032" +
    "\154\033\160\034\161\036\131\037\206\044\105\047\224" +
    "\053\240\072\235\073\123\077\176\100\133\102\232\103" +
    "\220\104\163\105\135\112\162\113\227\114\047\115\142" +
    "\124\120\125\164\127\132\130\204\131\144\132\151\133" +
    "\225\134\167\155\214\156\211\163\050\165\172\166\221" +
    "\167\173\170\042\171\210\172\126\173\202\174\040\175" +
    "\143\176\046\200\045\201\157\202\146\001\uff5c\000\002" +
    "\001\uff5a\000\004\152\251\001\002\000\004\052\247\001" +
    "\uff5b\000\134\031\125\032\154\033\160\034\161\036\131" +
    "\037\206\044\105\047\224\053\240\072\235\073\123\077" +
    "\176\100\133\102\232\103\220\104\163\105\135\112\162" +
    "\113\227\114\047\115\142\124\120\125\164\127\132\130" +
    "\204\131\144\132\151\133\225\134\167\155\214\156\211" +
    "\163\050\165\172\166\221\167\173\170\042\171\210\172" +
    "\126\173\202\174\040\175\143\176\046\200\045\201\157" +
    "\202\146\001\002\000\002\001\uff59\000\002\001\ufe9d\000" +
    "\004\060\254\001\002\000\002\001\uff55\000\134\031\125" +
    "\032\154\033\160\034\161\036\131\037\206\044\105\047" +
    "\224\053\240\072\235\073\123\077\176\100\133\102\232" +
    "\103\220\104\163\105\135\112\162\113\227\114\047\115" +
    "\142\124\120\125\164\127\132\130\204\131\144\132\151" +
    "\133\225\134\167\155\214\156\211\163\050\165\172\166" +
    "\221\167\173\170\042\171\210\172\126\173\202\174\040" +
    "\175\143\176\046\200\045\201\157\202\146\001\002\000" +
    "\010\045\261\052\256\100\260\001\002\000\010\155\055" +
    "\173\051\200\045\001\002\000\002\001\uff66\000\136\031" +
    "\125\032\154\033\160\034\161\036\131\037\206\044\105" +
    "\047\224\053\240\072\235\073\123\077\176\100\133\102" +
    "\232\103\220\104\163\105\135\112\162\113\227\114\047" +
    "\115\142\124\120\125\164\127\132\130\204\131\144\132" +
    "\151\133\225\134\167\151\264\155\214\156\211\163\050" +
    "\165\172\166\221\167\173\170\042\171\210\172\126\173" +
    "\202\174\040\175\143\176\046\200\045\201\157\202\146" +
    "\001\002\000\134\031\125\032\154\033\160\034\161\036" +
    "\131\037\206\044\105\047\224\053\240\072\235\073\123" +
    "\077\176\100\133\102\232\103\220\104\163\105\135\112" +
    "\162\113\227\114\047\115\142\124\120\125\164\127\132" +
    "\130\204\131\144\132\151\133\225\134\167\155\214\156" +
    "\211\163\050\165\172\166\221\167\173\170\042\171\210" +
    "\172\126\173\202\174\040\175\143\176\046\200\045\201" +
    "\157\202\146\001\002\000\002\001\uff5d\000\002\001\uff5e" +
    "\000\002\001\uff61\000\002\001\uff60\000\136\031\125\032" +
    "\154\033\160\034\161\036\131\037\206\044\105\047\224" +
    "\053\240\072\235\073\123\077\176\100\133\102\232\103" +
    "\220\104\163\105\135\112\162\113\227\114\047\115\142" +
    "\124\120\125\164\127\132\130\204\131\144\132\151\133" +
    "\225\134\167\151\267\155\214\156\211\163\050\165\172" +
    "\166\221\167\173\170\042\171\210\172\126\173\202\174" +
    "\040\175\143\176\046\200\045\201\157\202\146\001\002" +
    "\000\002\001\uff62\000\002\001\uff5f\000\002\001\uff65\000" +
    "\102\031\125\032\154\033\160\034\161\037\206\044\105" +
    "\047\305\053\240\072\277\073\123\077\300\100\133\102" +
    "\232\103\220\105\135\112\162\114\047\124\120\155\043" +
    "\163\050\165\172\167\302\170\042\171\210\172\310\173" +
    "\202\174\040\175\301\176\046\200\045\201\157\202\146" +
    "\001\002\000\102\031\125\032\154\033\160\034\161\037" +
    "\206\044\105\047\305\053\240\072\277\073\123\077\300" +
    "\100\133\102\232\103\220\105\135\112\162\114\047\124" +
    "\120\155\043\163\050\165\172\167\302\170\042\171\210" +
    "\172\310\173\202\174\040\175\301\176\046\200\045\201" +
    "\157\202\146\001\002\000\102\031\125\032\154\033\160" +
    "\034\161\037\206\044\105\047\305\053\240\072\277\073" +
    "\123\077\300\100\133\102\232\103\220\105\135\112\162" +
    "\114\047\124\120\155\043\163\050\165\172\167\302\170" +
    "\042\171\210\172\310\173\202\174\040\175\301\176\046" +
    "\200\045\201\157\202\146\001\002\000\102\031\125\032" +
    "\154\033\160\034\161\037\206\044\105\047\305\053\240" +
    "\072\277\073\123\077\300\100\133\102\232\103\220\105" +
    "\135\112\162\114\047\124\120\155\043\163\050\165\172" +
    "\167\302\170\042\171\210\172\310\173\202\174\040\175" +
    "\301\176\046\200\045\201\157\202\146\001\002\000\004" +
    "\040\351\001\ufec2\000\064\031\125\032\154\033\160\034" +
    "\161\044\105\047\305\053\240\072\277\073\123\077\300" +
    "\100\133\105\135\114\047\155\043\163\050\167\302\170" +
    "\042\172\310\173\202\174\040\175\301\176\046\200\045" +
    "\201\157\202\146\001\002\000\066\031\125\032\154\033" +
    "\160\034\161\044\105\047\305\053\240\072\277\073\123" +
    "\077\300\100\133\101\334\105\135\114\047\155\043\163" +
    "\050\167\302\170\042\172\310\173\202\174\040\175\301" +
    "\176\046\200\045\201\157\202\146\001\002\000\052\031" +
    "\125\032\154\033\160\044\105\047\305\073\123\100\133" +
    "\105\135\114\047\155\043\163\050\167\302\170\042\173" +
    "\202\174\040\175\301\176\046\200\045\201\157\202\146" +
    "\001\002\000\052\031\125\032\154\033\160\044\105\047" +
    "\305\073\123\100\133\105\135\114\047\155\043\163\050" +
    "\167\302\170\042\173\202\174\040\175\301\176\046\200" +
    "\045\201\157\202\146\001\002\000\044\004\367\005\354" +
    "\006\370\007\362\010\363\011\372\012\365\013\357\014" +
    "\373\015\361\016\356\017\364\020\355\021\366\022\360" +
    "\023\374\054\353\001\ufeaa\000\004\145\347\001\ufec8\000" +
    "\052\031\125\032\154\033\160\044\105\047\305\073\123" +
    "\100\133\105\135\114\047\155\043\163\050\167\302\170" +
    "\042\173\202\174\040\175\301\176\046\200\045\201\157" +
    "\202\146\001\002\000\010\026\340\027\342\030\341\001" +
    "\ufed9\000\006\055\320\101\317\001\ufea2\000\066\031\125" +
    "\032\154\033\160\034\161\044\105\047\305\053\240\072" +
    "\277\073\123\077\300\100\133\101\331\105\135\114\047" +
    "\155\043\163\050\167\302\170\042\172\310\173\202\174" +
    "\040\175\301\176\046\200\045\201\157\202\146\001\002" +
    "\000\004\150\313\001\ufea6\000\002\001\ufede\000\062\031" +
    "\125\032\154\033\160\034\161\044\105\047\305\053\240" +
    "\073\123\077\314\100\133\105\135\114\047\155\043\163" +
    "\050\167\302\170\042\172\315\173\202\174\040\175\301" +
    "\176\046\200\045\201\157\202\146\001\002\000\004\101" +
    "\334\001\002\000\004\101\331\001\002\000\006\055\320" +
    "\101\317\001\ufea1\000\134\031\125\032\154\033\160\034" +
    "\161\036\131\037\206\044\105\047\224\053\240\072\235" +
    "\073\123\077\176\100\133\102\232\103\220\104\163\105" +
    "\135\112\162\113\227\114\047\115\142\124\120\125\164" +
    "\127\132\130\204\131\144\132\151\133\225\134\167\155" +
    "\214\156\211\163\050\165\172\166\221\167\173\170\042" +
    "\171\210\172\126\173\202\174\040\175\143\176\046\200" +
    "\045\201\157\202\146\001\uff5c\000\062\031\125\032\154" +
    "\033\160\034\321\044\105\047\305\053\323\073\123\077" +
    "\322\100\133\105\135\114\047\155\043\163\050\167\302" +
    "\170\042\172\324\173\202\174\040\175\301\176\046\200" +
    "\045\201\157\202\146\001\002\000\002\001\ufe94\000\002" +
    "\001\ufe93\000\002\001\ufe95\000\002\001\ufe92\000\004\177" +
    "\326\001\ufe96\000\002\001\ufe85\000\004\152\330\001\002" +
    "\000\002\001\ufe9e\000\134\031\125\032\154\033\160\034" +
    "\161\036\131\037\206\044\105\047\224\053\240\072\235" +
    "\073\123\077\176\100\133\102\232\103\220\104\163\105" +
    "\135\112\162\113\227\114\047\115\142\124\120\125\164" +
    "\127\132\130\204\131\144\132\151\133\225\134\167\155" +
    "\214\156\211\163\050\165\172\166\221\167\173\170\042" +
    "\171\210\172\126\173\202\174\040\175\143\176\046\200" +
    "\045\201\157\202\146\001\uff5c\000\004\152\333\001\002" +
    "\000\002\001\ufe9a\000\134\031\125\032\154\033\160\034" +
    "\161\036\131\037\206\044\105\047\224\053\240\072\235" +
    "\073\123\077\176\100\133\102\232\103\220\104\163\105" +
    "\135\112\162\113\227\114\047\115\142\124\120\125\164" +
    "\127\132\130\204\131\144\132\151\133\225\134\167\155" +
    "\214\156\211\163\050\165\172\166\221\167\173\170\042" +
    "\171\210\172\126\173\202\174\040\175\143\176\046\200" +
    "\045\201\157\202\146\001\uff5c\000\004\152\336\001\002" +
    "\000\002\001\ufe9b\000\002\001\ufec6\000\064\031\125\032" +
    "\154\033\160\034\161\044\105\047\305\053\240\072\277" +
    "\073\123\077\300\100\133\105\135\114\047\155\043\163" +
    "\050\167\302\170\042\172\310\173\202\174\040\175\301" +
    "\176\046\200\045\201\157\202\146\001\002\000\064\031" +
    "\125\032\154\033\160\034\161\044\105\047\305\053\240" +
    "\072\277\073\123\077\300\100\133\105\135\114\047\155" +
    "\043\163\050\167\302\170\042\172\310\173\202\174\040" +
    "\175\301\176\046\200\045\201\157\202\146\001\002\000" +
    "\064\031\125\032\154\033\160\034\161\044\105\047\305" +
    "\053\240\072\277\073\123\077\300\100\133\105\135\114" +
    "\047\155\043\163\050\167\302\170\042\172\310\173\202" +
    "\174\040\175\301\176\046\200\045\201\157\202\146\001" +
    "\002\000\002\001\ufed1\000\002\001\ufed0\000\002\001\ufed2" +
    "\000\004\177\326\001\ufe88\000\062\031\125\032\154\033" +
    "\160\034\161\044\105\047\305\053\240\073\123\077\314" +
    "\100\133\105\135\114\047\155\043\163\050\167\302\170" +
    "\042\172\315\173\202\174\040\175\301\176\046\200\045" +
    "\201\157\202\146\001\002\000\004\040\351\001\ufec1\000" +
    "\062\031\125\032\154\033\160\034\161\044\105\047\305" +
    "\053\240\073\123\077\314\100\133\105\135\114\047\155" +
    "\043\163\050\167\302\170\042\172\315\173\202\174\040" +
    "\175\301\176\046\200\045\201\157\202\146\001\002\000" +
    "\002\001\ufebd\000\062\031\125\032\154\033\160\034\161" +
    "\044\105\047\305\053\240\073\123\077\314\100\133\105" +
    "\135\114\047\155\043\163\050\167\302\170\042\172\315" +
    "\173\202\174\040\175\301\176\046\200\045\201\157\202" +
    "\146\001\002\000\002\001\ufebb\000\002\001\ufeb0\000\002" +
    "\001\ufeb2\000\002\001\ufeb5\000\002\001\ufeae\000\002\001" +
    "\ufeb3\000\002\001\ufeb9\000\002\001\ufeb8\000\002\001\ufeb1" +
    "\000\002\001\ufeb6\000\002\001\ufeaf\000\002\001\ufebc\000" +
    "\002\001\ufeba\000\062\031\125\032\154\033\160\034\161" +
    "\044\105\047\305\053\240\073\123\077\314\100\133\105" +
    "\135\114\047\155\043\163\050\167\302\170\042\172\315" +
    "\173\202\174\040\175\301\176\046\200\045\201\157\202" +
    "\146\001\002\000\002\001\ufeb7\000\002\001\ufeb4\000\002" +
    "\001\ufead\000\002\001\ufea9\000\004\150\313\001\ufea5\000" +
    "\004\177\326\001\ufe89\000\004\177\326\001\ufe8a\000\002" +
    "\001\ufec5\000\010\026\340\027\342\030\341\001\ufeda\000" +
    "\002\001\ufedf\000\010\026\340\027\342\030\341\001\ufed8" +
    "\000\002\001\ufedd\000\010\026\340\027\342\030\341\001" +
    "\ufedb\000\002\001\ufee0\000\010\157\u010d\160\u010b\161\u010c" +
    "\001\ufef0\000\002\001\uff04\000\004\177\242\001\002\000" +
    "\102\031\125\032\154\033\160\034\161\037\206\044\105" +
    "\047\305\053\240\072\277\073\123\077\300\100\133\102" +
    "\232\103\220\105\135\112\162\114\047\124\120\155\043" +
    "\163\050\165\172\167\302\170\042\171\210\172\310\173" +
    "\202\174\040\175\301\176\046\200\045\201\157\202\146" +
    "\001\002\000\102\031\125\032\154\033\160\034\161\037" +
    "\206\044\105\047\305\053\240\072\277\073\123\077\300" +
    "\100\133\102\232\103\220\105\135\112\162\114\047\124" +
    "\120\155\043\163\050\165\172\167\302\170\042\171\210" +
    "\172\310\173\202\174\040\175\301\176\046\200\045\201" +
    "\157\202\146\001\002\000\102\031\125\032\154\033\160" +
    "\034\161\037\206\044\105\047\305\053\240\072\277\073" +
    "\123\077\300\100\133\102\232\103\220\105\135\112\162" +
    "\114\047\124\120\155\043\163\050\165\172\167\302\170" +
    "\042\171\210\172\310\173\202\174\040\175\301\176\046" +
    "\200\045\201\157\202\146\001\002\000\010\026\340\027" +
    "\342\030\341\001\ufedc\000\012\024\u0114\025\u0112\110\u0113" +
    "\144\u0111\001\ufee4\000\002\001\ufee8\000\064\031\125\032" +
    "\154\033\160\034\161\044\105\047\305\053\240\072\277" +
    "\073\123\077\300\100\133\105\135\114\047\155\043\163" +
    "\050\167\302\170\042\172\310\173\202\174\040\175\301" +
    "\176\046\200\045\201\157\202\146\001\002\000\064\031" +
    "\125\032\154\033\160\034\161\044\105\047\305\053\240" +
    "\072\277\073\123\077\300\100\133\105\135\114\047\155" +
    "\043\163\050\167\302\170\042\172\310\173\202\174\040" +
    "\175\301\176\046\200\045\201\157\202\146\001\002\000" +
    "\064\031\125\032\154\033\160\034\161\044\105\047\305" +
    "\053\240\072\277\073\123\077\300\100\133\105\135\114" +
    "\047\155\043\163\050\167\302\170\042\172\310\173\202" +
    "\174\040\175\301\176\046\200\045\201\157\202\146\001" +
    "\002\000\064\031\125\032\154\033\160\034\161\044\105" +
    "\047\305\053\240\072\277\073\123\077\300\100\133\105" +
    "\135\114\047\155\043\163\050\167\302\170\042\172\310" +
    "\173\202\174\040\175\301\176\046\200\045\201\157\202" +
    "\146\001\002\000\012\024\u0114\025\u0112\110\u0113\144\u0111" +
    "\001\ufee2\000\002\001\ufee6\000\012\024\u0114\025\u0112\110" +
    "\u0113\144\u0111\001\ufee3\000\002\001\ufee7\000\004\177\242" +
    "\001\uff26\000\002\001\uff19\000\002\001\uff20\000\004\177" +
    "\242\001\ufe8f\000\004\177\u011e\001\ufe8c\000\002\001\ufe86" +
    "\000\010\157\u010d\160\u010b\161\u010c\001\ufeef\000\002\001" +
    "\uff03\000\002\001\uff6b\000\010\045\261\052\u0123\100\260" +
    "\001\002\000\022\053\065\062\067\126\074\143\066\147" +
    "\077\155\055\173\051\200\045\001\002\000\002\001\uff51" +
    "\000\002\001\uff6c\000\006\163\u0129\200\045\001\002\000" +
    "\010\157\u010d\160\u010b\161\u010c\001\ufeeb\000\002\001\ufeff" +
    "\000\002\001\uffa2\000\134\031\125\032\154\033\160\034" +
    "\161\036\u013c\037\206\044\105\047\305\053\240\072\277" +
    "\073\123\077\300\100\133\102\232\103\220\104\u013b\105" +
    "\135\112\162\113\u0136\114\047\115\u012f\124\120\125\u0135" +
    "\127\u013f\130\u0138\131\u013a\132\u0139\133\u0133\134\u0137\155" +
    "\u012d\156\u013d\163\050\165\172\166\u012e\167\302\170\042" +
    "\171\210\172\310\173\202\174\040\175\301\176\046\200" +
    "\045\201\157\202\146\001\002\000\134\031\125\032\154" +
    "\033\160\034\161\036\u013c\037\206\044\105\047\305\053" +
    "\240\072\277\073\123\077\300\100\133\102\232\103\220" +
    "\104\u013b\105\135\112\162\113\u0136\114\047\115\u012f\124" +
    "\120\125\u0135\127\u013f\130\u0138\131\u013a\132\u0139\133\u0133" +
    "\134\u0137\155\u012d\156\u013d\163\050\165\172\166\u012e\167" +
    "\302\170\042\171\210\172\310\173\202\174\040\175\301" +
    "\176\046\200\045\201\157\202\146\001\002\000\134\031" +
    "\125\032\154\033\160\034\161\036\u013c\037\206\044\105" +
    "\047\305\053\240\072\277\073\123\077\300\100\133\102" +
    "\232\103\220\104\u013b\105\135\112\162\113\u0136\114\047" +
    "\115\u012f\124\120\125\u0135\127\u013f\130\u0138\131\u013a\132" +
    "\u0139\133\u0133\134\u0137\155\u012d\156\u013d\163\050\165\172" +
    "\166\u012e\167\302\170\042\171\210\172\310\173\202\174" +
    "\040\175\301\176\046\200\045\201\157\202\146\001\002" +
    "\000\066\031\125\032\154\033\160\034\161\044\105\047" +
    "\305\053\240\072\277\073\123\077\300\100\133\105\135" +
    "\114\047\155\043\163\050\164\u0126\167\302\170\042\172" +
    "\310\173\202\174\040\175\301\176\046\200\045\201\157" +
    "\202\146\001\002\000\064\031\125\032\154\033\160\034" +
    "\161\044\105\047\305\053\240\072\277\073\123\077\300" +
    "\100\133\105\135\114\047\155\043\163\050\167\302\170" +
    "\042\172\310\173\202\174\040\175\301\176\046\200\045" +
    "\201\157\202\146\001\002\000\102\031\125\032\154\033" +
    "\160\034\161\036\u013c\044\105\047\305\053\240\072\277" +
    "\073\123\077\300\100\133\104\u013b\105\135\113\u0136\114" +
    "\047\115\u012f\125\u0135\155\u012d\156\u013d\163\050\166\u012e" +
    "\167\302\170\042\172\310\173\202\174\040\175\301\176" +
    "\046\200\045\201\157\202\146\001\002\000\010\157\u0144" +
    "\160\u0142\161\u0143\001\ufeea\000\032\060\u0157\070\u0155\071" +
    "\u014e\076\u0150\106\u0158\107\u0151\116\u014f\117\u0153\120\u0152" +
    "\121\u014d\122\u0156\123\u0154\001\uff13\000\002\001\uff2e\000" +
    "\116\031\125\032\154\033\160\034\161\036\u013c\044\105" +
    "\047\305\053\240\072\277\073\123\077\300\100\133\104" +
    "\u013b\105\135\113\u0136\114\047\115\u012f\125\u0135\127\u013f" +
    "\130\u0138\131\u013a\132\u0139\133\u0133\134\u0137\155\u012d\156" +
    "\u013d\163\050\166\u012e\167\302\170\042\172\310\173\202" +
    "\174\040\175\301\176\046\200\045\201\157\202\146\001" +
    "\002\000\012\024\u0114\025\u0112\110\u0113\144\u0111\001\ufee5" +
    "\000\064\031\125\032\154\033\160\034\161\044\105\047" +
    "\305\053\240\072\277\073\123\077\300\100\133\105\135" +
    "\114\047\155\043\163\050\167\302\170\042\172\310\173" +
    "\202\174\040\175\301\176\046\200\045\201\157\202\146" +
    "\001\002\000\064\031\125\032\154\033\160\034\161\044" +
    "\105\047\305\053\240\072\277\073\123\077\300\100\133" +
    "\105\135\114\047\155\043\163\050\167\302\170\042\172" +
    "\310\173\202\174\040\175\301\176\046\200\045\201\157" +
    "\202\146\001\002\000\116\031\125\032\154\033\160\034" +
    "\161\036\u013c\044\105\047\305\053\240\072\277\073\123" +
    "\077\300\100\133\104\u013b\105\135\113\u0136\114\047\115" +
    "\u012f\125\u0135\127\u013f\130\u0138\131\u013a\132\u0139\133\u0133" +
    "\134\u0137\155\u012d\156\u013d\163\050\166\u012e\167\302\170" +
    "\042\172\310\173\202\174\040\175\301\176\046\200\045" +
    "\201\157\202\146\001\002\000\116\031\125\032\154\033" +
    "\160\034\161\036\u013c\044\105\047\305\053\240\072\277" +
    "\073\123\077\300\100\133\104\u013b\105\135\113\u0136\114" +
    "\047\115\u012f\125\u0135\127\u013f\130\u0138\131\u013a\132\u0139" +
    "\133\u0133\134\u0137\155\u012d\156\u013d\163\050\166\u012e\167" +
    "\302\170\042\172\310\173\202\174\040\175\301\176\046" +
    "\200\045\201\157\202\146\001\002\000\116\031\125\032" +
    "\154\033\160\034\161\036\u013c\044\105\047\305\053\240" +
    "\072\277\073\123\077\300\100\133\104\u013b\105\135\113" +
    "\u0136\114\047\115\u012f\125\u0135\127\u013f\130\u0138\131\u013a" +
    "\132\u0139\133\u0133\134\u0137\155\u012d\156\u013d\163\050\166" +
    "\u012e\167\302\170\042\172\310\173\202\174\040\175\301" +
    "\176\046\200\045\201\157\202\146\001\002\000\116\031" +
    "\125\032\154\033\160\034\161\036\u013c\044\105\047\305" +
    "\053\240\072\277\073\123\077\300\100\133\104\u013b\105" +
    "\135\113\u0136\114\047\115\u012f\125\u0135\127\u013f\130\u0138" +
    "\131\u013a\132\u0139\133\u0133\134\u0137\155\u012d\156\u013d\163" +
    "\050\166\u012e\167\302\170\042\172\310\173\202\174\040" +
    "\175\301\176\046\200\045\201\157\202\146\001\002\000" +
    "\064\031\125\032\154\033\160\034\161\044\105\047\305" +
    "\053\240\072\277\073\123\077\300\100\133\105\135\114" +
    "\047\155\043\163\050\167\302\170\042\172\310\173\202" +
    "\174\040\175\301\176\046\200\045\201\157\202\146\001" +
    "\002\000\064\031\125\032\154\033\160\034\161\044\105" +
    "\047\305\053\240\072\277\073\123\077\300\100\133\105" +
    "\135\114\047\155\043\163\050\167\302\170\042\172\310" +
    "\173\202\174\040\175\301\176\046\200\045\201\157\202" +
    "\146\001\002\000\064\031\125\032\154\033\160\034\161" +
    "\044\105\047\305\053\240\072\277\073\123\077\300\100" +
    "\133\105\135\114\047\155\043\163\050\167\302\170\042" +
    "\172\310\173\202\174\040\175\301\176\046\200\045\201" +
    "\157\202\146\001\002\000\002\001\uff33\000\116\031\125" +
    "\032\154\033\160\034\161\036\u013c\044\105\047\305\053" +
    "\240\072\277\073\123\077\300\100\133\104\u013b\105\135" +
    "\113\u0136\114\047\115\u012f\125\u0135\127\u013f\130\u0138\131" +
    "\u013a\132\u0139\133\u0133\134\u0137\155\u012d\156\u013d\163\050" +
    "\166\u012e\167\302\170\042\172\310\173\202\174\040\175" +
    "\301\176\046\200\045\201\157\202\146\001\002\000\002" +
    "\001\uff1c\000\010\157\u0144\160\u0142\161\u0143\001\ufeec\000" +
    "\064\031\125\032\154\033\160\034\161\044\105\047\305" +
    "\053\240\072\277\073\123\077\300\100\133\105\135\114" +
    "\047\155\043\163\050\167\302\170\042\172\310\173\202" +
    "\174\040\175\301\176\046\200\045\201\157\202\146\001" +
    "\002\000\064\031\125\032\154\033\160\034\161\044\105" +
    "\047\305\053\240\072\277\073\123\077\300\100\133\105" +
    "\135\114\047\155\043\163\050\167\302\170\042\172\310" +
    "\173\202\174\040\175\301\176\046\200\045\201\157\202" +
    "\146\001\002\000\064\031\125\032\154\033\160\034\161" +
    "\044\105\047\305\053\240\072\277\073\123\077\300\100" +
    "\133\105\135\114\047\155\043\163\050\167\302\170\042" +
    "\172\310\173\202\174\040\175\301\176\046\200\045\201" +
    "\157\202\146\001\002\000\010\157\u0144\160\u0142\161\u0143" +
    "\001\ufef1\000\010\157\u0144\160\u0142\161\u0143\001\ufeee\000" +
    "\002\001\uff1a\000\002\001\uff18\000\002\001\uff1b\000\002" +
    "\001\uff17\000\010\157\u0144\160\u0142\161\u0143\001\ufef0\000" +
    "\010\157\u0144\160\u0142\161\u0143\001\ufeed\000\064\031\125" +
    "\032\154\033\160\034\161\044\105\047\305\053\240\072" +
    "\277\073\123\077\300\100\133\105\135\114\047\155\043" +
    "\163\050\167\302\170\042\172\310\173\202\174\040\175" +
    "\301\176\046\200\045\201\157\202\146\001\002\000\064" +
    "\031\125\032\154\033\160\034\161\044\105\047\305\053" +
    "\240\072\277\073\123\077\300\100\133\105\135\114\047" +
    "\155\043\163\050\167\302\170\042\172\310\173\202\174" +
    "\040\175\301\176\046\200\045\201\157\202\146\001\002" +
    "\000\064\031\125\032\154\033\160\034\161\044\105\047" +
    "\305\053\240\072\277\073\123\077\300\100\133\105\135" +
    "\114\047\155\043\163\050\167\302\170\042\172\310\173" +
    "\202\174\040\175\301\176\046\200\045\201\157\202\146" +
    "\001\002\000\064\031\125\032\154\033\160\034\161\044" +
    "\105\047\305\053\240\072\277\073\123\077\300\100\133" +
    "\105\135\114\047\155\043\163\050\167\302\170\042\172" +
    "\310\173\202\174\040\175\301\176\046\200\045\201\157" +
    "\202\146\001\002\000\064\031\125\032\154\033\160\034" +
    "\161\044\105\047\305\053\240\072\277\073\123\077\300" +
    "\100\133\105\135\114\047\155\043\163\050\167\302\170" +
    "\042\172\310\173\202\174\040\175\301\176\046\200\045" +
    "\201\157\202\146\001\002\000\064\031\125\032\154\033" +
    "\160\034\161\044\105\047\305\053\240\072\277\073\123" +
    "\077\300\100\133\105\135\114\047\155\043\163\050\167" +
    "\302\170\042\172\310\173\202\174\040\175\301\176\046" +
    "\200\045\201\157\202\146\001\002\000\064\031\125\032" +
    "\154\033\160\034\161\044\105\047\305\053\240\072\277" +
    "\073\123\077\300\100\133\105\135\114\047\155\043\163" +
    "\050\167\302\170\042\172\310\173\202\174\040\175\301" +
    "\176\046\200\045\201\157\202\146\001\002\000\064\031" +
    "\125\032\154\033\160\034\161\044\105\047\305\053\240" +
    "\072\277\073\123\077\300\100\133\105\135\114\047\155" +
    "\043\163\050\167\302\170\042\172\310\173\202\174\040" +
    "\175\301\176\046\200\045\201\157\202\146\001\002\000" +
    "\064\031\125\032\154\033\160\034\161\044\105\047\305" +
    "\053\240\072\277\073\123\077\300\100\133\105\135\114" +
    "\047\155\043\163\050\167\302\170\042\172\310\173\202" +
    "\174\040\175\301\176\046\200\045\201\157\202\146\001" +
    "\002\000\064\031\125\032\154\033\160\034\161\044\105" +
    "\047\305\053\240\072\277\073\123\077\300\100\133\105" +
    "\135\114\047\155\043\163\050\167\302\170\042\172\310" +
    "\173\202\174\040\175\301\176\046\200\045\201\157\202" +
    "\146\001\002\000\064\031\125\032\154\033\160\034\161" +
    "\044\105\047\305\053\240\072\277\073\123\077\300\100" +
    "\133\105\135\114\047\155\043\163\050\167\302\170\042" +
    "\172\310\173\202\174\040\175\301\176\046\200\045\201" +
    "\157\202\146\001\002\000\064\031\125\032\154\033\160" +
    "\034\161\044\105\047\305\053\240\072\277\073\123\077" +
    "\300\100\133\105\135\114\047\155\043\163\050\167\302" +
    "\170\042\172\310\173\202\174\040\175\301\176\046\200" +
    "\045\201\157\202\146\001\002\000\010\157\u0144\160\u0142" +
    "\161\u0143\001\ufefb\000\010\157\u0144\160\u0142\161\u0143\001" +
    "\ufefc\000\010\157\u0144\160\u0142\161\u0143\001\ufef5\000\010" +
    "\157\u0144\160\u0142\161\u0143\001\ufefa\000\010\157\u0144\160" +
    "\u0142\161\u0143\001\ufef3\000\010\157\u0144\160\u0142\161\u0143" +
    "\001\ufef4\000\010\157\u0144\160\u0142\161\u0143\001\ufef2\000" +
    "\010\157\u0144\160\u0142\161\u0143\001\ufef9\000\010\157\u0144" +
    "\160\u0142\161\u0143\001\ufefd\000\010\157\u0144\160\u0142\161" +
    "\u0143\001\ufef6\000\010\157\u0144\160\u0142\161\u0143\001\ufef8" +
    "\000\010\157\u0144\160\u0142\161\u0143\001\ufef7\000\002\001" +
    "\uff12\000\010\157\u0144\160\u0142\161\u0143\001\ufeef\000\010" +
    "\157\u0144\160\u0142\161\u0143\001\ufeeb\000\002\001\uff2d\000" +
    "\002\001\uff32\000\002\001\uff2c\000\002\001\uff31\000\010" +
    "\157\u010d\160\u010b\161\u010c\001\ufeec\000\002\001\uff00\000" +
    "\010\045\261\052\u0123\100\260\001\002\000\002\001\uff4f" +
    "\000\010\045\261\052\u0123\100\260\001\002\000\002\001" +
    "\uff54\000\100\031\125\032\154\033\160\034\161\037\206" +
    "\044\105\047\305\053\240\073\123\077\314\100\133\102" +
    "\232\103\220\105\135\112\162\114\047\124\120\155\043" +
    "\163\050\165\172\167\302\170\042\171\210\172\315\173" +
    "\202\174\040\175\301\176\046\200\045\201\157\202\146" +
    "\001\002\000\002\001\ufebf\000\004\177\242\001\uff28\000" +
    "\002\001\uff22\000\004\200\045\001\002\000\004\164\060" +
    "\001\uff99\000\102\031\125\032\154\033\160\034\161\037" +
    "\206\044\105\047\305\053\240\072\277\073\123\077\300" +
    "\100\133\102\232\103\220\105\135\112\162\114\047\124" +
    "\120\155\043\163\050\165\172\167\302\170\042\171\210" +
    "\172\310\173\202\174\040\175\301\176\046\200\045\201" +
    "\157\202\146\001\002\000\102\031\125\032\154\033\160" +
    "\034\161\037\206\044\105\047\305\053\240\072\277\073" +
    "\123\077\300\100\133\102\232\103\220\105\135\112\162" +
    "\114\047\124\120\155\043\163\050\165\172\167\302\170" +
    "\042\171\210\172\310\173\202\174\040\175\301\176\046" +
    "\200\045\201\157\202\146\001\002\000\102\031\125\032" +
    "\154\033\160\034\161\037\206\044\105\047\305\053\240" +
    "\072\277\073\123\077\300\100\133\102\232\103\220\105" +
    "\135\112\162\114\047\124\120\155\043\163\050\165\172" +
    "\167\302\170\042\171\210\172\310\173\202\174\040\175" +
    "\301\176\046\200\045\201\157\202\146\001\002\000\002" +
    "\001\ufed5\000\002\001\ufed4\000\002\001\ufed6\000\002\001" +
    "\uff81\000\002\001\ufec9\000\004\177\242\001\ufecc\000\004" +
    "\177\242\001\ufe90\000\004\177\u011e\001\ufe8d\000\010\045" +
    "\261\052\u0123\100\260\001\002\000\002\001\uff52\000\004" +
    "\177\242\001\uff24\000\002\001\uff1e\000\134\031\125\032" +
    "\154\033\160\034\161\036\u013c\037\206\044\105\047\305" +
    "\053\240\072\277\073\123\077\300\100\133\102\232\103" +
    "\220\104\u013b\105\135\112\162\113\u0136\114\047\115\u012f" +
    "\124\120\125\u0135\127\u013f\130\u0138\131\u013a\132\u0139\133" +
    "\u0133\134\u0137\155\u012d\156\u013d\163\050\165\172\166\u012e" +
    "\167\302\170\042\171\210\172\310\173\202\174\040\175" +
    "\301\176\046\200\045\201\157\202\146\001\002\000\006" +
    "\041\u0190\075\u018f\001\uff3c\000\002\001\uff47\000\010\135" +
    "\u018c\136\u018e\137\u018d\001\uff36\000\002\001\uff49\000\116" +
    "\031\125\032\154\033\160\034\161\036\u013c\044\105\047" +
    "\305\053\240\072\277\073\123\077\300\100\133\104\u013b" +
    "\105\135\113\u0136\114\047\115\u012f\125\u0135\127\u013f\130" +
    "\u0138\131\u013a\132\u0139\133\u0133\134\u0137\155\u012d\156\u013d" +
    "\163\050\166\u012e\167\302\170\042\172\310\173\202\174" +
    "\040\175\301\176\046\200\045\201\157\202\146\001\002" +
    "\000\116\031\125\032\154\033\160\034\161\036\u013c\044" +
    "\105\047\305\053\240\072\277\073\123\077\300\100\133" +
    "\104\u013b\105\135\113\u0136\114\047\115\u012f\125\u0135\127" +
    "\u013f\130\u0138\131\u013a\132\u0139\133\u0133\134\u0137\155\u012d" +
    "\156\u013d\163\050\166\u012e\167\302\170\042\172\310\173" +
    "\202\174\040\175\301\176\046\200\045\201\157\202\146" +
    "\001\002\000\116\031\125\032\154\033\160\034\161\036" +
    "\u013c\044\105\047\305\053\240\072\277\073\123\077\300" +
    "\100\133\104\u013b\105\135\113\u0136\114\047\115\u012f\125" +
    "\u0135\127\u013f\130\u0138\131\u013a\132\u0139\133\u0133\134\u0137" +
    "\155\u012d\156\u013d\163\050\166\u012e\167\302\170\042\172" +
    "\310\173\202\174\040\175\301\176\046\200\045\201\157" +
    "\202\146\001\002\000\116\031\125\032\154\033\160\034" +
    "\161\036\u013c\044\105\047\305\053\240\072\277\073\123" +
    "\077\300\100\133\104\u013b\105\135\113\u0136\114\047\115" +
    "\u012f\125\u0135\127\u013f\130\u0138\131\u013a\132\u0139\133\u0133" +
    "\134\u0137\155\u012d\156\u013d\163\050\166\u012e\167\302\170" +
    "\042\172\310\173\202\174\040\175\301\176\046\200\045" +
    "\201\157\202\146\001\002\000\116\031\125\032\154\033" +
    "\160\034\161\036\u013c\044\105\047\305\053\240\072\277" +
    "\073\123\077\300\100\133\104\u013b\105\135\113\u0136\114" +
    "\047\115\u012f\125\u0135\127\u013f\130\u0138\131\u013a\132\u0139" +
    "\133\u0133\134\u0137\155\u012d\156\u013d\163\050\166\u012e\167" +
    "\302\170\042\172\310\173\202\174\040\175\301\176\046" +
    "\200\045\201\157\202\146\001\002\000\010\135\u018c\136" +
    "\u018e\137\u018d\001\uff35\000\002\001\uff39\000\004\056\u0194" +
    "\001\uff3e\000\116\031\125\032\154\033\160\034\161\036" +
    "\u013c\044\105\047\305\053\240\072\277\073\123\077\300" +
    "\100\133\104\u013b\105\135\113\u0136\114\047\115\u012f\125" +
    "\u0135\127\u013f\130\u0138\131\u013a\132\u0139\133\u0133\134\u0137" +
    "\155\u012d\156\u013d\163\050\166\u012e\167\302\170\042\172" +
    "\310\173\202\174\040\175\301\176\046\200\045\201\157" +
    "\202\146\001\002\000\002\001\uff3a\000\002\001\uff3b\000" +
    "\010\157\u010d\160\u010b\161\u010c\001\ufeed\000\002\001\uff01" +
    "\000\010\157\u010d\160\u010b\161\u010c\001\ufeee\000\002\001" +
    "\uff02\000\010\045\261\052\u0123\100\260\001\002\000\002" +
    "\001\uff53\000\134\031\125\032\154\033\160\034\161\036" +
    "\131\037\206\044\105\047\224\053\240\072\235\073\123" +
    "\077\176\100\133\102\232\103\220\104\163\105\135\112" +
    "\162\113\227\114\047\115\142\124\120\125\164\127\132" +
    "\130\204\131\144\132\151\133\225\134\167\155\214\156" +
    "\211\163\050\165\172\166\221\167\173\170\042\171\210" +
    "\172\126\173\202\174\040\175\143\176\046\200\045\201" +
    "\157\202\146\001\uff5c\000\004\152\u019f\001\002\000\002" +
    "\001\ufe9c\000\134\031\125\032\154\033\160\034\161\036" +
    "\u013c\037\206\044\105\047\305\053\240\072\277\073\123" +
    "\077\300\100\133\102\232\103\220\104\u013b\105\135\112" +
    "\162\113\u0136\114\047\115\u012f\124\120\125\u0135\127\u013f" +
    "\130\u0138\131\u013a\132\u0139\133\u0133\134\u0137\155\u012d\156" +
    "\u013d\163\050\165\172\166\u012e\167\302\170\042\171\210" +
    "\172\310\173\202\174\040\175\301\176\046\200\045\201" +
    "\157\202\146\001\002\000\002\001\uff4d\000\004\074\u01a3" +
    "\001\uff4b\000\116\031\125\032\154\033\160\034\161\036" +
    "\u013c\044\105\047\305\053\240\072\277\073\123\077\300" +
    "\100\133\104\u013b\105\135\113\u0136\114\047\115\u012f\125" +
    "\u0135\127\u013f\130\u0138\131\u013a\132\u0139\133\u0133\134\u0137" +
    "\155\u012d\156\u013d\163\050\166\u012e\167\302\170\042\172" +
    "\310\173\202\174\040\175\301\176\046\200\045\201\157" +
    "\202\146\001\002\000\102\031\125\032\154\033\160\034" +
    "\161\037\206\044\105\047\224\053\240\072\235\073\123" +
    "\077\176\100\133\102\232\103\220\105\135\112\162\114" +
    "\047\124\120\155\043\163\050\165\172\167\173\170\042" +
    "\171\210\172\126\173\202\174\040\175\143\176\046\200" +
    "\045\201\157\202\146\001\002\000\102\031\125\032\154" +
    "\033\160\034\161\037\206\044\105\047\224\053\240\072" +
    "\235\073\123\077\176\100\133\102\232\103\220\105\135" +
    "\112\162\114\047\124\120\155\043\163\050\165\172\167" +
    "\173\170\042\171\210\172\126\173\202\174\040\175\143" +
    "\176\046\200\045\201\157\202\146\001\002\000\102\031" +
    "\125\032\154\033\160\034\161\037\206\044\105\047\224" +
    "\053\240\072\235\073\123\077\176\100\133\102\232\103" +
    "\220\105\135\112\162\114\047\124\120\155\043\163\050" +
    "\165\172\167\173\170\042\171\210\172\126\173\202\174" +
    "\040\175\143\176\046\200\045\201\157\202\146\001\002" +
    "\000\102\031\125\032\154\033\160\034\161\037\206\044" +
    "\105\047\224\053\240\072\235\073\123\077\176\100\133" +
    "\102\232\103\220\105\135\112\162\114\047\124\120\155" +
    "\043\163\050\165\172\167\173\170\042\171\210\172\126" +
    "\173\202\174\040\175\143\176\046\200\045\201\157\202" +
    "\146\001\002\000\102\031\125\032\154\033\160\034\161" +
    "\037\206\044\105\047\224\053\240\072\235\073\123\077" +
    "\176\100\133\102\232\103\220\105\135\112\162\114\047" +
    "\124\120\155\043\163\050\165\172\167\173\170\042\171" +
    "\210\172\126\173\202\174\040\175\143\176\046\200\045" +
    "\201\157\202\146\001\002\000\102\031\125\032\154\033" +
    "\160\034\161\037\206\044\105\047\224\053\240\072\235" +
    "\073\123\077\176\100\133\102\232\103\220\105\135\112" +
    "\162\114\047\124\120\155\043\163\050\165\172\167\173" +
    "\170\042\171\210\172\126\173\202\174\040\175\143\176" +
    "\046\200\045\201\157\202\146\001\002\000\102\031\125" +
    "\032\154\033\160\034\161\037\206\044\105\047\224\053" +
    "\240\072\235\073\123\077\176\100\133\102\232\103\220" +
    "\105\135\112\162\114\047\124\120\155\043\163\050\165" +
    "\172\167\173\170\042\171\210\172\126\173\202\174\040" +
    "\175\143\176\046\200\045\201\157\202\146\001\002\000" +
    "\102\031\125\032\154\033\160\034\161\037\206\044\105" +
    "\047\224\053\240\072\235\073\123\077\176\100\133\102" +
    "\232\103\220\105\135\112\162\114\047\124\120\155\043" +
    "\163\050\165\172\167\173\170\042\171\210\172\126\173" +
    "\202\174\040\175\143\176\046\200\045\201\157\202\146" +
    "\001\002\000\102\031\125\032\154\033\160\034\161\037" +
    "\206\044\105\047\224\053\240\072\235\073\123\077\176" +
    "\100\133\102\232\103\220\105\135\112\162\114\047\124" +
    "\120\155\043\163\050\165\172\167\173\170\042\171\210" +
    "\172\126\173\202\174\040\175\143\176\046\200\045\201" +
    "\157\202\146\001\002\000\102\031\125\032\154\033\160" +
    "\034\161\037\206\044\105\047\224\053\240\072\235\073" +
    "\123\077\176\100\133\102\232\103\220\105\135\112\162" +
    "\114\047\124\120\155\043\163\050\165\172\167\173\170" +
    "\042\171\210\172\126\173\202\174\040\175\143\176\046" +
    "\200\045\201\157\202\146\001\002\000\102\031\125\032" +
    "\154\033\160\034\161\037\206\044\105\047\224\053\240" +
    "\072\235\073\123\077\176\100\133\102\232\103\220\105" +
    "\135\112\162\114\047\124\120\155\043\163\050\165\172" +
    "\167\173\170\042\171\210\172\126\173\202\174\040\175" +
    "\143\176\046\200\045\201\157\202\146\001\002\000\102" +
    "\031\125\032\154\033\160\034\161\037\206\044\105\047" +
    "\224\053\240\072\235\073\123\077\176\100\133\102\232" +
    "\103\220\105\135\112\162\114\047\124\120\155\043\163" +
    "\050\165\172\167\173\170\042\171\210\172\126\173\202" +
    "\174\040\175\143\176\046\200\045\201\157\202\146\001" +
    "\002\000\010\157\u010d\160\u010b\161\u010c\001\ufefb\000\002" +
    "\001\uff0f\000\010\157\u010d\160\u010b\161\u010c\001\ufefc\000" +
    "\002\001\uff10\000\010\157\u010d\160\u010b\161\u010c\001\ufef5" +
    "\000\002\001\uff09\000\010\157\u010d\160\u010b\161\u010c\001" +
    "\ufefa\000\002\001\uff0e\000\010\157\u010d\160\u010b\161\u010c" +
    "\001\ufef3\000\002\001\uff07\000\010\157\u010d\160\u010b\161" +
    "\u010c\001\ufef4\000\002\001\uff08\000\010\157\u010d\160\u010b" +
    "\161\u010c\001\ufef2\000\002\001\uff06\000\010\157\u010d\160" +
    "\u010b\161\u010c\001\ufef9\000\002\001\uff0d\000\010\157\u010d" +
    "\160\u010b\161\u010c\001\ufefd\000\002\001\uff11\000\010\157" +
    "\u010d\160\u010b\161\u010c\001\ufef8\000\002\001\uff0c\000\010" +
    "\157\u010d\160\u010b\161\u010c\001\ufef6\000\002\001\uff0a\000" +
    "\010\157\u010d\160\u010b\161\u010c\001\ufef7\000\002\001\uff0b" +
    "\000\004\177\242\001\uff25\000\002\001\uff1f\000\004\177" +
    "\242\001\uff27\000\002\001\uff21\000\004\177\242\001\ufe91" +
    "\000\004\177\u011e\001\ufe8e\000\004\177\242\001\uff15\000" +
    "\002\001\uff14\000\100\031\125\032\154\033\160\034\321" +
    "\037\206\044\105\047\305\053\323\073\123\077\322\100" +
    "\133\102\232\103\220\105\135\112\162\114\047\124\120" +
    "\155\043\163\050\165\172\167\302\170\042\171\210\172" +
    "\324\173\202\174\040\175\301\176\046\200\045\201\157" +
    "\202\146\001\002\000\002\001\ufe98\000\100\031\125\032" +
    "\154\033\160\034\161\037\206\044\105\047\305\053\240" +
    "\073\123\077\314\100\133\102\232\103\220\105\135\112" +
    "\162\114\047\124\120\155\043\163\050\165\172\167\302" +
    "\170\042\171\210\172\315\173\202\174\040\175\301\176" +
    "\046\200\045\201\157\202\146\001\002\000\002\001\ufea3" +
    "\000\004\153\u01d5\001\002\000\002\001\ufe7d\000\010\155" +
    "\055\173\051\200\045\001\002\000\010\155\055\173\051" +
    "\200\045\001\002\000\006\051\u01f0\052\102\001\002\000" +
    "\012\045\261\052\u01ea\100\260\151\u01ec\001\002\000\012" +
    "\101\243\155\055\173\051\200\045\001\002\000\002\001" +
    "\uff6d\000\006\051\uff95\052\uff95\001\uffa7\000\012\053\u01de" +
    "\155\055\173\051\200\045\001\002\000\010\155\055\173" +
    "\051\200\045\001\002\000\006\051\104\052\102\001\002" +
    "\000\006\051\u01e1\052\102\001\002\000\134\031\125\032" +
    "\154\033\160\034\161\036\131\037\206\044\105\047\224" +
    "\053\u01e3\072\235\073\123\077\176\100\133\102\232\103" +
    "\220\104\163\105\135\112\162\113\227\114\047\115\142" +
    "\124\120\125\164\127\132\130\204\131\144\132\151\133" +
    "\225\134\167\155\214\156\211\163\050\165\172\166\221" +
    "\167\173\170\042\171\210\172\126\173\202\174\040\175" +
    "\143\176\046\200\045\201\157\202\146\001\002\000\002" +
    "\001\uff8c\000\136\031\125\032\154\033\160\034\161\036" +
    "\131\037\206\044\105\047\224\053\240\072\235\073\123" +
    "\077\176\100\133\101\243\102\232\103\220\104\163\105" +
    "\135\112\162\113\227\114\047\115\142\124\120\125\164" +
    "\127\132\130\204\131\144\132\151\133\225\134\167\155" +
    "\214\156\211\163\050\165\172\166\221\167\173\170\042" +
    "\171\210\172\126\173\202\174\040\175\143\176\046\200" +
    "\045\201\157\202\146\001\002\000\002\001\uff82\000\006" +
    "\051\u01e6\052\102\001\002\000\134\031\125\032\154\033" +
    "\160\034\161\036\131\037\206\044\105\047\224\053\u01e8" +
    "\072\235\073\123\077\176\100\133\102\232\103\220\104" +
    "\163\105\135\112\162\113\227\114\047\115\142\124\120" +
    "\125\164\127\132\130\204\131\144\132\151\133\225\134" +
    "\167\155\214\156\211\163\050\165\172\166\221\167\173" +
    "\170\042\171\210\172\126\173\202\174\040\175\143\176" +
    "\046\200\045\201\157\202\146\001\002\000\002\001\uff8d" +
    "\000\136\031\125\032\154\033\160\034\161\036\131\037" +
    "\206\044\105\047\224\053\240\072\235\073\123\077\176" +
    "\100\133\101\243\102\232\103\220\104\163\105\135\112" +
    "\162\113\227\114\047\115\142\124\120\125\164\127\132" +
    "\130\204\131\144\132\151\133\225\134\167\155\214\156" +
    "\211\163\050\165\172\166\221\167\173\170\042\171\210" +
    "\172\126\173\202\174\040\175\143\176\046\200\045\201" +
    "\157\202\146\001\002\000\002\001\uff83\000\022\053\u01ee" +
    "\062\u01d6\126\074\143\u01d7\147\u01dd\155\055\173\051\200" +
    "\045\001\002\000\004\151\u01ed\001\002\000\002\001\ufe78" +
    "\000\002\001\ufe79\000\010\155\055\173\051\200\045\001" +
    "\002\000\002\001\uff6e\000\134\031\125\032\154\033\160" +
    "\034\161\036\131\037\206\044\105\047\224\053\u01f2\072" +
    "\235\073\123\077\176\100\133\102\232\103\220\104\163" +
    "\105\135\112\162\113\227\114\047\115\142\124\120\125" +
    "\164\127\132\130\204\131\144\132\151\133\225\134\167" +
    "\155\214\156\211\163\050\165\172\166\221\167\173\170" +
    "\042\171\210\172\126\173\202\174\040\175\143\176\046" +
    "\200\045\201\157\202\146\001\002\000\002\001\uff8a\000" +
    "\136\031\125\032\154\033\160\034\161\036\131\037\206" +
    "\044\105\047\224\053\240\072\235\073\123\077\176\100" +
    "\133\101\243\102\232\103\220\104\163\105\135\112\162" +
    "\113\227\114\047\115\142\124\120\125\164\127\132\130" +
    "\204\131\144\132\151\133\225\134\167\155\214\156\211" +
    "\163\050\165\172\166\221\167\173\170\042\171\210\172" +
    "\126\173\202\174\040\175\143\176\046\200\045\201\157" +
    "\202\146\001\002\000\002\001\uff80\000\006\051\u01f5\052" +
    "\102\001\002\000\134\031\125\032\154\033\160\034\161" +
    "\036\131\037\206\044\105\047\224\053\u01f7\072\235\073" +
    "\123\077\176\100\133\102\232\103\220\104\163\105\135" +
    "\112\162\113\227\114\047\115\142\124\120\125\164\127" +
    "\132\130\204\131\144\132\151\133\225\134\167\155\214" +
    "\156\211\163\050\165\172\166\221\167\173\170\042\171" +
    "\210\172\126\173\202\174\040\175\143\176\046\200\045" +
    "\201\157\202\146\001\002\000\002\001\uff8f\000\136\031" +
    "\125\032\154\033\160\034\161\036\131\037\206\044\105" +
    "\047\224\053\240\072\235\073\123\077\176\100\133\101" +
    "\243\102\232\103\220\104\163\105\135\112\162\113\227" +
    "\114\047\115\142\124\120\125\164\127\132\130\204\131" +
    "\144\132\151\133\225\134\167\155\214\156\211\163\050" +
    "\165\172\166\221\167\173\170\042\171\210\172\126\173" +
    "\202\174\040\175\143\176\046\200\045\201\157\202\146" +
    "\001\002\000\002\001\uff85\000\006\051\u01fa\052\102\001" +
    "\002\000\134\031\125\032\154\033\160\034\161\036\131" +
    "\037\206\044\105\047\224\053\u01fc\072\235\073\123\077" +
    "\176\100\133\102\232\103\220\104\163\105\135\112\162" +
    "\113\227\114\047\115\142\124\120\125\164\127\132\130" +
    "\204\131\144\132\151\133\225\134\167\155\214\156\211" +
    "\163\050\165\172\166\221\167\173\170\042\171\210\172" +
    "\126\173\202\174\040\175\143\176\046\200\045\201\157" +
    "\202\146\001\002\000\002\001\uff8e\000\136\031\125\032" +
    "\154\033\160\034\161\036\131\037\206\044\105\047\224" +
    "\053\240\072\235\073\123\077\176\100\133\101\243\102" +
    "\232\103\220\104\163\105\135\112\162\113\227\114\047" +
    "\115\142\124\120\125\164\127\132\130\204\131\144\132" +
    "\151\133\225\134\167\155\214\156\211\163\050\165\172" +
    "\166\221\167\173\170\042\171\210\172\126\173\202\174" +
    "\040\175\143\176\046\200\045\201\157\202\146\001\002" +
    "\000\002\001\uff84\000\004\177\242\001\uff29\000\002\001" +
    "\uff23\000\010\157\u010d\160\u010b\161\u010c\001\ufef1\000\002" +
    "\001\uff05\000\002\001\ufeca\000\004\177\242\001\ufecd\000" +
    "\100\031\125\032\154\033\160\034\161\037\206\044\105" +
    "\047\305\053\240\073\123\077\314\100\133\102\232\103" +
    "\220\105\135\112\162\114\047\124\120\155\043\163\050" +
    "\165\172\167\302\170\042\171\210\172\315\173\202\174" +
    "\040\175\301\176\046\200\045\201\157\202\146\001\002" +
    "\000\002\001\ufec3\000\010\045\261\052\u0123\100\260\001" +
    "\002\000\002\001\uff50\000\100\031\125\032\154\033\160" +
    "\034\161\037\206\044\105\047\305\053\240\073\123\077" +
    "\314\100\133\102\232\103\220\105\135\112\162\114\047" +
    "\124\120\155\043\163\050\165\172\167\302\170\042\171" +
    "\210\172\315\173\202\174\040\175\301\176\046\200\045" +
    "\201\157\202\146\001\002\000\100\031\125\032\154\033" +
    "\160\034\161\037\206\044\105\047\305\053\240\073\123" +
    "\077\314\100\133\102\232\103\220\105\135\112\162\114" +
    "\047\124\120\155\043\163\050\165\172\167\302\170\042" +
    "\171\210\172\315\173\202\174\040\175\301\176\046\200" +
    "\045\201\157\202\146\001\002\000\002\001\ufeab\000\002" +
    "\001\ufea7\000\116\031\125\032\154\033\160\034\161\036" +
    "\u013c\044\105\047\305\053\240\072\277\073\123\077\300" +
    "\100\133\104\u013b\105\135\113\u0136\114\047\115\u012f\125" +
    "\u0135\127\u013f\130\u0138\131\u013a\132\u0139\133\u0133\134\u0137" +
    "\155\u012d\156\u013d\163\050\166\u012e\167\302\170\042\172" +
    "\310\173\202\174\040\175\301\176\046\200\045\201\157" +
    "\202\146\001\002\000\002\001\uff2b\000\134\031\125\032" +
    "\154\033\160\034\161\036\131\037\206\044\105\047\224" +
    "\053\240\072\235\073\123\077\176\100\133\102\232\103" +
    "\220\104\163\105\135\112\162\113\227\114\047\115\142" +
    "\124\120\125\164\127\132\130\204\131\144\132\151\133" +
    "\225\134\167\155\214\156\211\163\050\165\172\166\221" +
    "\167\173\170\042\171\210\172\126\173\202\174\040\175" +
    "\143\176\046\200\045\201\157\202\146\001\002\000\134" +
    "\031\125\032\154\033\160\034\161\036\u013c\037\206\044" +
    "\105\047\305\053\240\072\277\073\123\077\300\100\133" +
    "\102\232\103\220\104\u013b\105\135\112\162\113\u0136\114" +
    "\047\115\u012f\124\120\125\u0135\127\u013f\130\u0138\131\u013a" +
    "\132\u0139\133\u0133\134\u0137\155\u012d\156\u013d\163\050\165" +
    "\172\166\u012e\167\302\170\042\171\210\172\310\173\202" +
    "\174\040\175\301\176\046\200\045\201\157\202\146\001" +
    "\002\000\002\001\uff37\000\002\001\uff41\000\006\140\u0218" +
    "\177\242\001\uff3f\000\004\056\u0214\001\uff3e\000\134\031" +
    "\125\032\154\033\160\034\161\036\131\037\206\044\105" +
    "\047\224\053\240\072\235\073\123\077\176\100\133\102" +
    "\232\103\220\104\163\105\135\112\162\113\227\114\047" +
    "\115\142\124\120\125\164\127\132\130\204\131\144\132" +
    "\151\133\225\134\167\155\214\156\211\163\050\165\172" +
    "\166\221\167\173\170\042\171\210\172\126\173\202\174" +
    "\040\175\143\176\046\200\045\201\157\202\146\001\002" +
    "\000\006\140\u0218\177\242\001\uff40\000\002\001\uff43\000" +
    "\002\001\uff42\000\116\031\125\032\154\033\160\034\161" +
    "\036\u013c\044\105\047\305\053\240\072\277\073\123\077" +
    "\300\100\133\104\u013b\105\135\113\u0136\114\047\115\u012f" +
    "\125\u0135\127\u013f\130\u0138\131\u013a\132\u0139\133\u0133\134" +
    "\u0137\155\u012d\156\u013d\163\050\166\u012e\167\302\170\042" +
    "\172\310\173\202\174\040\175\301\176\046\200\045\201" +
    "\157\202\146\001\002\000\010\135\u018c\136\u018e\137\u018d" +
    "\001\uff30\000\002\001\ufe7b\000\002\001\uff76\000\136\031" +
    "\125\032\154\033\160\034\161\036\131\037\206\044\105" +
    "\047\224\053\240\072\235\073\123\077\176\100\133\101" +
    "\243\102\232\103\220\104\163\105\135\112\162\113\227" +
    "\114\047\115\142\124\120\125\164\127\132\130\204\131" +
    "\144\132\151\133\225\134\167\155\214\156\211\163\050" +
    "\165\172\166\221\167\173\170\042\171\210\172\126\173" +
    "\202\174\040\175\143\176\046\200\045\201\157\202\146" +
    "\001\002\000\002\001\uff70\000\002\001\uff94\000\010\051" +
    "\u01e1\052\102\060\u0220\001\002\000\134\031\125\032\154" +
    "\033\160\034\161\036\131\037\206\044\105\047\224\053" +
    "\u0222\072\235\073\123\077\176\100\133\102\232\103\220" +
    "\104\163\105\135\112\162\113\227\114\047\115\142\124" +
    "\120\125\164\127\132\130\204\131\144\132\151\133\225" +
    "\134\167\155\214\156\211\163\050\165\172\166\221\167" +
    "\173\170\042\171\210\172\126\173\202\174\040\175\143" +
    "\176\046\200\045\201\157\202\146\001\002\000\002\001" +
    "\uff77\000\136\031\125\032\154\033\160\034\161\036\131" +
    "\037\206\044\105\047\224\053\240\072\235\073\123\077" +
    "\176\100\133\101\243\102\232\103\220\104\163\105\135" +
    "\112\162\113\227\114\047\115\142\124\120\125\164\127" +
    "\132\130\204\131\144\132\151\133\225\134\167\155\214" +
    "\156\211\163\050\165\172\166\221\167\173\170\042\171" +
    "\210\172\126\173\202\174\040\175\143\176\046\200\045" +
    "\201\157\202\146\001\002\000\002\001\uff71\000\002\001" +
    "\uff67\000\004\051\u0226\001\002\000\134\031\125\032\154" +
    "\033\160\034\161\036\131\037\206\044\105\047\224\053" +
    "\240\072\235\073\123\077\176\100\133\102\232\103\220" +
    "\104\163\105\135\112\162\113\227\114\047\115\142\124" +
    "\120\125\164\127\132\130\204\131\144\132\151\133\225" +
    "\134\167\155\214\156\211\163\050\165\172\166\221\167" +
    "\173\170\042\171\210\172\126\173\202\174\040\175\143" +
    "\176\046\200\045\201\157\202\146\001\002\000\004\100" +
    "\260\001\002\000\002\001\uffbe\000\010\155\055\173\051" +
    "\200\045\001\002\000\006\051\u0237\052\102\001\002\000" +
    "\012\053\u022c\155\055\173\051\200\045\001\002\000\010" +
    "\155\055\173\051\200\045\001\002\000\006\051\u022e\052" +
    "\102\001\002\000\134\031\125\032\154\033\160\034\161" +
    "\036\131\037\206\044\105\047\224\053\u0230\072\235\073" +
    "\123\077\176\100\133\102\232\103\220\104\163\105\135" +
    "\112\162\113\227\114\047\115\142\124\120\125\164\127" +
    "\132\130\204\131\144\132\151\133\225\134\167\155\214" +
    "\156\211\163\050\165\172\166\221\167\173\170\042\171" +
    "\210\172\126\173\202\174\040\175\143\176\046\200\045" +
    "\201\157\202\146\001\002\000\002\001\uff87\000\136\031" +
    "\125\032\154\033\160\034\161\036\131\037\206\044\105" +
    "\047\224\053\240\072\235\073\123\077\176\100\133\101" +
    "\243\102\232\103\220\104\163\105\135\112\162\113\227" +
    "\114\047\115\142\124\120\125\164\127\132\130\204\131" +
    "\144\132\151\133\225\134\167\155\214\156\211\163\050" +
    "\165\172\166\221\167\173\170\042\171\210\172\126\173" +
    "\202\174\040\175\143\176\046\200\045\201\157\202\146" +
    "\001\002\000\002\001\uff7d\000\006\051\u0233\052\102\001" +
    "\002\000\134\031\125\032\154\033\160\034\161\036\131" +
    "\037\206\044\105\047\224\053\u0235\072\235\073\123\077" +
    "\176\100\133\102\232\103\220\104\163\105\135\112\162" +
    "\113\227\114\047\115\142\124\120\125\164\127\132\130" +
    "\204\131\144\132\151\133\225\134\167\155\214\156\211" +
    "\163\050\165\172\166\221\167\173\170\042\171\210\172" +
    "\126\173\202\174\040\175\143\176\046\200\045\201\157" +
    "\202\146\001\002\000\002\001\uff88\000\136\031\125\032" +
    "\154\033\160\034\161\036\131\037\206\044\105\047\224" +
    "\053\240\072\235\073\123\077\176\100\133\101\243\102" +
    "\232\103\220\104\163\105\135\112\162\113\227\114\047" +
    "\115\142\124\120\125\164\127\132\130\204\131\144\132" +
    "\151\133\225\134\167\155\214\156\211\163\050\165\172" +
    "\166\221\167\173\170\042\171\210\172\126\173\202\174" +
    "\040\175\143\176\046\200\045\201\157\202\146\001\002" +
    "\000\002\001\uff7e\000\134\031\125\032\154\033\160\034" +
    "\161\036\131\037\206\044\105\047\224\053\u0239\072\235" +
    "\073\123\077\176\100\133\102\232\103\220\104\163\105" +
    "\135\112\162\113\227\114\047\115\142\124\120\125\164" +
    "\127\132\130\204\131\144\132\151\133\225\134\167\155" +
    "\214\156\211\163\050\165\172\166\221\167\173\170\042" +
    "\171\210\172\126\173\202\174\040\175\143\176\046\200" +
    "\045\201\157\202\146\001\002\000\002\001\uff86\000\136" +
    "\031\125\032\154\033\160\034\161\036\131\037\206\044" +
    "\105\047\224\053\240\072\235\073\123\077\176\100\133" +
    "\101\243\102\232\103\220\104\163\105\135\112\162\113" +
    "\227\114\047\115\142\124\120\125\164\127\132\130\204" +
    "\131\144\132\151\133\225\134\167\155\214\156\211\163" +
    "\050\165\172\166\221\167\173\170\042\171\210\172\126" +
    "\173\202\174\040\175\143\176\046\200\045\201\157\202" +
    "\146\001\002\000\002\001\uff7c\000\006\051\u023c\052\102" +
    "\001\002\000\134\031\125\032\154\033\160\034\161\036" +
    "\131\037\206\044\105\047\224\053\u023e\072\235\073\123" +
    "\077\176\100\133\102\232\103\220\104\163\105\135\112" +
    "\162\113\227\114\047\115\142\124\120\125\164\127\132" +
    "\130\204\131\144\132\151\133\225\134\167\155\214\156" +
    "\211\163\050\165\172\166\221\167\173\170\042\171\210" +
    "\172\126\173\202\174\040\175\143\176\046\200\045\201" +
    "\157\202\146\001\002\000\002\001\uff89\000\136\031\125" +
    "\032\154\033\160\034\161\036\131\037\206\044\105\047" +
    "\224\053\240\072\235\073\123\077\176\100\133\101\243" +
    "\102\232\103\220\104\163\105\135\112\162\113\227\114" +
    "\047\115\142\124\120\125\164\127\132\130\204\131\144" +
    "\132\151\133\225\134\167\155\214\156\211\163\050\165" +
    "\172\166\221\167\173\170\042\171\210\172\126\173\202" +
    "\174\040\175\143\176\046\200\045\201\157\202\146\001" +
    "\002\000\002\001\uff7f\000\134\031\125\032\154\033\160" +
    "\034\161\036\131\037\206\044\105\047\224\053\u0242\072" +
    "\235\073\123\077\176\100\133\102\232\103\220\104\163" +
    "\105\135\112\162\113\227\114\047\115\142\124\120\125" +
    "\164\127\132\130\204\131\144\132\151\133\225\134\167" +
    "\155\214\156\211\163\050\165\172\166\221\167\173\170" +
    "\042\171\210\172\126\173\202\174\040\175\143\176\046" +
    "\200\045\201\157\202\146\001\002\000\002\001\uff75\000" +
    "\136\031\125\032\154\033\160\034\161\036\131\037\206" +
    "\044\105\047\224\053\240\072\235\073\123\077\176\100" +
    "\133\101\243\102\232\103\220\104\163\105\135\112\162" +
    "\113\227\114\047\115\142\124\120\125\164\127\132\130" +
    "\204\131\144\132\151\133\225\134\167\155\214\156\211" +
    "\163\050\165\172\166\221\167\173\170\042\171\210\172" +
    "\126\173\202\174\040\175\143\176\046\200\045\201\157" +
    "\202\146\001\002\000\002\001\uff6f\000\024\052\076\053" +
    "\065\062\067\126\074\143\066\147\077\155\055\173\051" +
    "\200\045\001\uff6a\000\002\001\uff68\000\010\051\u01fa\052" +
    "\102\060\u0247\001\002\000\134\031\125\032\154\033\160" +
    "\034\161\036\131\037\206\044\105\047\224\053\u0249\072" +
    "\235\073\123\077\176\100\133\102\232\103\220\104\163" +
    "\105\135\112\162\113\227\114\047\115\142\124\120\125" +
    "\164\127\132\130\204\131\144\132\151\133\225\134\167" +
    "\155\214\156\211\163\050\165\172\166\221\167\173\170" +
    "\042\171\210\172\126\173\202\174\040\175\143\176\046" +
    "\200\045\201\157\202\146\001\002\000\002\001\uff79\000" +
    "\136\031\125\032\154\033\160\034\161\036\131\037\206" +
    "\044\105\047\224\053\240\072\235\073\123\077\176\100" +
    "\133\101\243\102\232\103\220\104\163\105\135\112\162" +
    "\113\227\114\047\115\142\124\120\125\164\127\132\130" +
    "\204\131\144\132\151\133\225\134\167\155\214\156\211" +
    "\163\050\165\172\166\221\167\173\170\042\171\210\172" +
    "\126\173\202\174\040\175\143\176\046\200\045\201\157" +
    "\202\146\001\002\000\002\001\uff73\000\010\051\u01f5\052" +
    "\102\060\u024c\001\002\000\134\031\125\032\154\033\160" +
    "\034\161\036\131\037\206\044\105\047\224\053\u024e\072" +
    "\235\073\123\077\176\100\133\102\232\103\220\104\163" +
    "\105\135\112\162\113\227\114\047\115\142\124\120\125" +
    "\164\127\132\130\204\131\144\132\151\133\225\134\167" +
    "\155\214\156\211\163\050\165\172\166\221\167\173\170" +
    "\042\171\210\172\126\173\202\174\040\175\143\176\046" +
    "\200\045\201\157\202\146\001\002\000\002\001\uff7a\000" +
    "\136\031\125\032\154\033\160\034\161\036\131\037\206" +
    "\044\105\047\224\053\240\072\235\073\123\077\176\100" +
    "\133\101\243\102\232\103\220\104\163\105\135\112\162" +
    "\113\227\114\047\115\142\124\120\125\164\127\132\130" +
    "\204\131\144\132\151\133\225\134\167\155\214\156\211" +
    "\163\050\165\172\166\221\167\173\170\042\171\210\172" +
    "\126\173\202\174\040\175\143\176\046\200\045\201\157" +
    "\202\146\001\002\000\002\001\uff74\000\010\051\u01e6\052" +
    "\102\060\u0251\001\002\000\134\031\125\032\154\033\160" +
    "\034\161\036\131\037\206\044\105\047\224\053\u0253\072" +
    "\235\073\123\077\176\100\133\102\232\103\220\104\163" +
    "\105\135\112\162\113\227\114\047\115\142\124\120\125" +
    "\164\127\132\130\204\131\144\132\151\133\225\134\167" +
    "\155\214\156\211\163\050\165\172\166\221\167\173\170" +
    "\042\171\210\172\126\173\202\174\040\175\143\176\046" +
    "\200\045\201\157\202\146\001\002\000\002\001\uff78\000" +
    "\136\031\125\032\154\033\160\034\161\036\131\037\206" +
    "\044\105\047\224\053\240\072\235\073\123\077\176\100" +
    "\133\101\243\102\232\103\220\104\163\105\135\112\162" +
    "\113\227\114\047\115\142\124\120\125\164\127\132\130" +
    "\204\131\144\132\151\133\225\134\167\155\214\156\211" +
    "\163\050\165\172\166\221\167\173\170\042\171\210\172" +
    "\126\173\202\174\040\175\143\176\046\200\045\201\157" +
    "\202\146\001\002\000\002\001\uff72\000\004\153\u0256\001" +
    "\002\000\004\051\u0257\001\002\000\134\031\125\032\154" +
    "\033\160\034\161\036\131\037\206\044\105\047\224\053" +
    "\240\072\235\073\123\077\176\100\133\102\232\103\220" +
    "\104\163\105\135\112\162\113\227\114\047\115\142\124" +
    "\120\125\164\127\132\130\204\131\144\132\151\133\225" +
    "\134\167\155\214\156\211\163\050\165\172\166\221\167" +
    "\173\170\042\171\210\172\126\173\202\174\040\175\143" +
    "\176\046\200\045\201\157\202\146\001\002\000\004\100" +
    "\260\001\002\000\002\001\uffbf\000\004\100\260\001\002" +
    "\000\002\001\uffbd\000\134\031\125\032\154\033\160\034" +
    "\161\036\131\037\206\044\105\047\224\053\240\072\235" +
    "\073\123\077\176\100\133\102\232\103\220\104\163\105" +
    "\135\112\162\113\227\114\047\115\142\124\120\125\164" +
    "\127\132\130\204\131\144\132\151\133\225\134\167\155" +
    "\214\156\211\163\050\165\172\166\221\167\173\170\042" +
    "\171\210\172\126\173\202\174\040\175\143\176\046\200" +
    "\045\201\157\202\146\001\002\000\024\052\076\053\065" +
    "\062\067\126\074\143\066\147\077\155\055\173\051\200" +
    "\045\001\uff6a\000\024\052\076\053\065\062\067\126\074" +
    "\143\066\147\077\155\055\173\051\200\045\001\uff6a\000" +
    "\004\152\u0260\001\002\000\004\051\u0261\001\002\000\134" +
    "\031\125\032\154\033\160\034\161\036\131\037\206\044" +
    "\105\047\224\053\240\072\235\073\123\077\176\100\133" +
    "\102\232\103\220\104\163\105\135\112\162\113\227\114" +
    "\047\115\142\124\120\125\164\127\132\130\204\131\144" +
    "\132\151\133\225\134\167\155\214\156\211\163\050\165" +
    "\172\166\221\167\173\170\042\171\210\172\126\173\202" +
    "\174\040\175\143\176\046\200\045\201\157\202\146\001" +
    "\002\000\004\100\260\001\002\000\002\001\uffc1\000\004" +
    "\153\u0265\001\002\000\004\051\u0266\001\002\000\134\031" +
    "\125\032\154\033\160\034\161\036\131\037\206\044\105" +
    "\047\224\053\240\072\235\073\123\077\176\100\133\102" +
    "\232\103\220\104\163\105\135\112\162\113\227\114\047" +
    "\115\142\124\120\125\164\127\132\130\204\131\144\132" +
    "\151\133\225\134\167\155\214\156\211\163\050\165\172" +
    "\166\221\167\173\170\042\171\210\172\126\173\202\174" +
    "\040\175\143\176\046\200\045\201\157\202\146\001\002" +
    "\000\004\100\260\001\002\000\002\001\uffc2\000\004\100" +
    "\260\001\002\000\002\001\uffc0\000\006\042\u026c\101\u026d" +
    "\001\ufffd\000\010\155\055\173\051\200\045\001\002\000" +
    "\022\114\047\155\043\163\050\170\042\173\051\174\040" +
    "\176\046\200\045\001\uffa0\000\004\152\u0273\001\002\000" +
    "\004\052\u0271\001\uff9f\000\002\001\uff9e\000\022\114\047" +
    "\155\043\163\050\170\042\173\051\174\040\176\046\200" +
    "\045\001\002\000\002\001\uff9d\000\004\042\u0274\001\ufffb" +
    "\000\010\155\055\173\051\200\045\001\002\000\002\001" +
    "\ufffa\000\002\001\ufffc\000\010\100\260\101\u0286\105\u0285" +
    "\001\uffa7\000\004\055\u0279\001\002\000\010\155\055\173" +
    "\051\200\045\001\002\000\010\100\260\101\u027d\105\u027c" +
    "\001\002\000\002\001\uffb7\000\024\052\076\053\065\062" +
    "\067\126\074\143\066\147\077\155\055\173\051\200\045" +
    "\001\uff6a\000\024\052\076\053\065\062\067\126\074\143" +
    "\066\147\077\155\055\173\051\200\045\001\uff6a\000\004" +
    "\152\u027f\001\002\000\004\100\260\001\002\000\002\001" +
    "\uffb8\000\004\153\u0282\001\002\000\004\100\260\001\002" +
    "\000\002\001\uffb9\000\002\001\uffba\000\024\052\076\053" +
    "\065\062\067\126\074\143\066\147\077\155\055\173\051" +
    "\200\045\001\uff6a\000\024\052\076\053\065\062\067\126" +
    "\074\143\066\147\077\155\055\173\051\200\045\001\uff6a" +
    "\000\004\152\u0288\001\002\000\004\100\260\001\002\000" +
    "\002\001\uffbb\000\004\153\u028b\001\002\000\004\100\260" +
    "\001\002\000\002\001\uffbc\000\012\060\u028e\100\260\101" +
    "\u0292\105\u0291\001\002\000\134\031\125\032\154\033\160" +
    "\034\161\036\131\037\206\044\105\047\224\053\240\072" +
    "\235\073\123\077\176\100\133\102\232\103\220\104\163" +
    "\105\135\112\162\113\227\114\047\115\142\124\120\125" +
    "\164\127\132\130\204\131\144\132\151\133\225\134\167" +
    "\155\214\156\211\163\050\165\172\166\221\167\173\170" +
    "\042\171\210\172\126\173\202\174\040\175\143\176\046" +
    "\200\045\201\157\202\146\001\002\000\002\001\uffc5\000" +
    "\002\001\uffc4\000\012\153\u0298\155\055\173\051\200\045" +
    "\001\002\000\012\152\u0294\155\055\173\051\200\045\001" +
    "\002\000\006\052\102\152\u0296\001\002\000\006\060\u028e" +
    "\100\260\001\002\000\002\001\uffc6\000\006\060\u028e\100" +
    "\260\001\002\000\002\001\uffc7\000\006\060\u028e\100\260" +
    "\001\002\000\006\052\102\153\u029a\001\002\000\006\060" +
    "\u028e\100\260\001\002\000\002\001\uffc9\000\002\001\uffc8" +
    "\000\002\001\uffc3\000\004\100\u029f\001\002\000\012\151" +
    "\u02a1\155\055\173\051\200\045\001\002\000\006\052\102" +
    "\151\u02a2\001\002\000\002\001\ufff8\000\002\001\ufff9\000" +
    "\006\050\017\154\023\001\002\000\012\100\260\155\055" +
    "\173\051\200\045\001\002\000\014\066\u02a8\100\260\155" +
    "\055\173\051\200\045\001\uffdc\000\004\066\u02a8\001\uffdc" +
    "\000\004\063\u02cb\001\uffe1\000\006\061\u02a9\201\u02ac\001" +
    "\002\000\004\201\u02c2\001\002\000\024\077\u02ba\114\u02c0" +
    "\155\u02be\163\u02c1\170\u02bd\173\051\174\u02bb\176\u02bf\200" +
    "\045\001\002\000\004\052\u02b7\001\uffdd\000\032\046\u02af" +
    "\051\u02ae\055\u02b0\077\uffcd\114\uffcd\155\uffcd\163\uffcd\170" +
    "\uffcd\173\uffcd\174\uffcd\176\uffcd\200\uffcd\001\uffdf\000\002" +
    "\001\uffdb\000\004\201\u02b9\001\002\000\006\061\u02a9\201" +
    "\u02b6\001\002\000\004\055\u02b1\001\002\000\004\201\u02b2" +
    "\001\002\000\004\051\u02b3\001\uffcc\000\004\201\u02b4\001" +
    "\002\000\002\001\uffcb\000\004\052\u02b7\001\uffde\000\006" +
    "\051\u02ae\055\u02b0\001\uffcd\000\006\061\u02a9\201\u02b6\001" +
    "\002\000\002\001\uffda\000\002\001\uffca\000\002\001\uffd7" +
    "\000\002\001\uffd3\000\002\001\uffd9\000\002\001\uffd4\000" +
    "\004\164\056\001\uffd6\000\002\001\uffd5\000\002\001\uffd2" +
    "\000\002\001\uffd8\000\006\051\u02c3\055\u02c4\001\uffd1\000" +
    "\004\201\u02c9\001\002\000\004\055\u02c5\001\002\000\004" +
    "\201\u02c6\001\002\000\004\051\u02c7\001\uffd0\000\004\201" +
    "\u02c8\001\002\000\002\001\uffcf\000\002\001\uffce\000\002" +
    "\001\uffe6\000\004\201\u02cc\001\002\000\002\001\uffe0\000" +
    "\004\066\u02a8\001\uffdc\000\004\066\u02a8\001\uffdc\000\004" +
    "\063\u02cb\001\uffe1\000\002\001\uffe2\000\004\063\u02cb\001" +
    "\uffe1\000\002\001\uffe7\000\004\063\u02cb\001\uffe1\000\002" +
    "\001\uffe3\000\012\052\102\060\u02d8\064\u02d7\076\u02d6\001" +
    "\uffa8\000\022\114\047\155\043\163\050\170\042\173\051" +
    "\174\040\176\046\200\045\001\002\000\022\114\047\155" +
    "\043\163\050\170\042\173\051\174\040\176\046\200\045" +
    "\001\002\000\022\114\047\155\043\163\050\170\042\173" +
    "\051\174\040\176\046\200\045\001\002\000\004\100\u02da" +
    "\001\002\000\024\052\076\053\065\062\067\126\074\143" +
    "\066\147\077\155\055\173\051\200\045\001\uff6a\000\004" +
    "\151\u02dc\001\002\000\004\100\260\001\uff64\000\002\001" +
    "\uffb4\000\002\001\uff63\000\004\144\u02e1\001\uffa9\000\002" +
    "\001\uff9c\000\022\114\047\155\043\163\050\170\042\173" +
    "\051\174\040\176\046\200\045\001\002\000\002\001\uff9b" +
    "\000\002\001\uffab\000\004\144\u02e1\001\uffaa\000\004\101" +
    "\u02e6\001\uffff\000\012\061\u02e8\155\055\173\051\200\045" +
    "\001\002\000\002\001\uff93\000\010\155\055\173\051\200" +
    "\045\001\002\000\006\052\u02ea\152\u02eb\001\002\000\012" +
    "\061\u02ed\155\055\173\051\200\045\001\002\000\002\001" +
    "\ufffe\000\002\001\uff91\000\010\155\055\173\051\200\045" +
    "\001\002\000\002\001\uff90\000\002\001\uff92\000\002\001" +
    "\uffac\000\002\001\uffaf\000\004\100\260\001\002\000\004" +
    "\100\260\001\002\000\002\001\ufff7\000\002\001\ufff5\000" +
    "\002\001\ufff6\000\014\066\u02a8\100\260\155\055\173\051" +
    "\200\045\001\uffdc\000\004\066\u02a8\001\uffdc\000\004\063" +
    "\u02cb\001\uffe1\000\002\001\uffe8\000\004\066\u02a8\001\uffdc" +
    "\000\004\066\u02a8\001\uffdc\000\004\063\u02cb\001\uffe1\000" +
    "\002\001\uffe4\000\004\063\u02cb\001\uffe1\000\002\001\uffe9" +
    "\000\004\063\u02cb\001\uffe1\000\002\001\uffe5\000\004\100" +
    "\260\001\002\000\004\100\260\001\002\000\002\001\ufff4" +
    "\000\002\001\ufff2\000\002\001\ufff3\000\002\001\000" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0306\000\006\112\003\113\004\001\001\000\002\001" +
    "\001\000\024\012\024\013\013\037\014\051\010\073\006" +
    "\102\017\104\020\105\023\131\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\031\u0304\053\u0302\054\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\031\u02f7\053\u02f6\054\043\001\001\000\002" +
    "\001\001\000\010\031\u02f3\053\u02f1\054\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\104\020\105\u02ef" +
    "\001\001\000\006\053\u02e4\054\043\001\001\000\002\001" +
    "\001\000\010\053\067\054\043\055\u02d4\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\053\u029d" +
    "\054\043\001\001\000\006\053\u028c\054\043\001\001\000" +
    "\010\053\u0276\054\043\106\u0277\001\001\000\006\053\u026a" +
    "\054\043\001\001\000\010\053\040\054\043\106\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\053\053\054\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\150\002\111\003\110\004\176\005\107\006\140" +
    "\007\137\010\152\011\151\021\115\022\114\023\216\024" +
    "\215\025\165\026\164\030\u0259\031\225\040\106\041\105" +
    "\042\222\043\221\044\233\045\232\046\206\047\204\053" +
    "\214\054\043\057\127\060\126\061\113\062\112\063\212" +
    "\064\211\065\120\066\116\067\155\070\154\071\123\072" +
    "\121\074\136\075\135\077\170\100\167\106\144\117\147" +
    "\120\146\121\202\122\200\123\230\124\227\125\174\126" +
    "\173\001\001\000\016\014\071\015\070\017\u0254\053\067" +
    "\054\043\055\072\001\001\000\016\014\071\015\070\017" +
    "\074\053\067\054\043\055\072\001\001\000\010\053\067" +
    "\054\043\055\u024f\001\001\000\010\053\067\054\043\055" +
    "\u024a\001\001\000\010\053\067\054\043\055\u0245\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\053\067\054\043\055\u0229\001\001" +
    "\000\002\001\001\000\016\014\071\015\070\017\u0223\053" +
    "\067\054\043\055\072\001\001\000\010\053\067\054\043" +
    "\055\100\001\001\000\010\053\067\054\043\055\u021e\001" +
    "\001\000\002\001\001\000\006\053\u021d\054\043\001\001" +
    "\000\150\002\111\003\110\004\176\005\107\006\140\007" +
    "\137\010\152\011\151\021\115\022\114\023\216\024\215" +
    "\025\165\026\164\030\u021a\031\225\040\106\041\105\042" +
    "\222\043\221\044\233\045\232\046\206\047\204\053\214" +
    "\054\043\057\127\060\126\061\113\062\112\063\212\064" +
    "\211\065\120\066\116\067\155\070\154\071\123\072\121" +
    "\074\136\075\135\077\170\100\167\106\144\117\147\120" +
    "\146\121\202\122\200\123\230\124\227\125\174\126\173" +
    "\001\001\000\150\002\111\003\110\004\176\005\107\006" +
    "\140\007\137\010\152\011\151\021\115\022\114\023\216" +
    "\024\215\025\165\026\164\030\133\031\225\040\106\041" +
    "\105\042\222\043\221\044\233\045\232\046\206\047\204" +
    "\053\214\054\043\057\127\060\126\061\113\062\112\063" +
    "\212\064\211\065\120\066\116\067\155\070\154\071\123" +
    "\072\121\074\136\075\135\077\170\100\167\106\144\117" +
    "\147\120\146\121\202\122\200\123\230\124\227\125\174" +
    "\126\173\001\001\000\006\053\u0219\054\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\076\u0208\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\014\071\015\u0120\016\u0205\053\067\054" +
    "\043\055\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\004\176\005\u0202\006\140\007\137\021\115\022\114" +
    "\023\216\024\215\031\225\046\206\047\204\053\214\054" +
    "\043\065\u0201\066\336\071\123\072\121\074\136\075\135" +
    "\077\170\100\167\106\144\125\174\126\173\001\001\000" +
    "\002\001\001\000\002\001\001\000\076\004\176\005\u0109" +
    "\006\140\007\137\021\115\022\114\023\216\024\215\031" +
    "\225\046\206\047\204\053\214\054\043\065\120\066\116" +
    "\071\123\072\121\074\136\075\135\077\170\100\167\106" +
    "\144\117\u0200\120\u01ff\121\202\122\200\123\230\124\227" +
    "\125\174\126\173\001\001\000\112\004\176\005\u01fd\006" +
    "\140\007\137\010\152\011\151\021\115\022\114\023\216" +
    "\024\215\031\225\046\206\047\204\053\214\054\043\057" +
    "\127\060\126\061\u01fe\062\u013f\065\120\066\116\071\123" +
    "\072\121\074\136\075\135\077\170\100\167\106\144\117" +
    "\147\120\146\121\202\122\200\123\230\124\227\125\174" +
    "\126\173\001\001\000\160\002\111\003\110\004\176\005" +
    "\107\006\140\007\137\010\152\011\151\014\u01da\020\u01d8" +
    "\021\115\022\114\023\216\024\215\025\165\026\164\030" +
    "\264\031\225\033\265\040\106\041\105\042\222\043\221" +
    "\044\233\045\232\046\206\047\204\053\u01db\054\043\055" +
    "\u01d7\057\127\060\126\061\113\062\112\063\212\064\211" +
    "\065\120\066\116\067\155\070\154\071\123\072\121\074" +
    "\136\075\135\077\170\100\167\106\144\117\147\120\146" +
    "\121\202\122\200\123\230\124\227\125\174\126\173\001" +
    "\001\000\002\001\001\000\150\002\111\003\110\004\176" +
    "\005\107\006\140\007\137\010\152\011\151\021\115\022" +
    "\114\023\216\024\215\025\165\026\164\030\u01d3\031\225" +
    "\040\106\041\105\042\222\043\221\044\233\045\232\046" +
    "\206\047\204\053\214\054\043\057\127\060\126\061\113" +
    "\062\112\063\212\064\211\065\120\066\116\067\155\070" +
    "\154\071\123\072\121\074\136\075\135\077\170\100\167" +
    "\106\144\117\147\120\146\121\202\122\200\123\230\124" +
    "\227\125\174\126\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\106\004" +
    "\176\005\u01cd\006\140\007\137\010\152\011\151\021\115" +
    "\022\114\023\216\024\215\031\225\046\206\047\204\053" +
    "\214\054\043\057\u01ce\060\u0164\065\120\066\116\071\123" +
    "\072\121\074\136\075\135\077\170\100\167\106\144\117" +
    "\147\120\146\121\202\122\200\123\230\124\227\125\174" +
    "\126\173\001\001\000\022\004\176\005\u01cb\031\225\053" +
    "\214\054\043\106\144\125\u01cc\126\377\001\001\000\112" +
    "\004\176\005\u01c9\006\140\007\137\010\152\011\151\021" +
    "\115\022\114\023\216\024\215\031\225\046\206\047\204" +
    "\053\214\054\043\057\127\060\126\061\u01ca\062\u0146\065" +
    "\120\066\116\071\123\072\121\074\136\075\135\077\170" +
    "\100\167\106\144\117\147\120\146\121\202\122\200\123" +
    "\230\124\227\125\174\126\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\112\004\176\005\u01c7\006\140\007\137\010\152\011\151" +
    "\021\115\022\114\023\216\024\215\031\225\046\206\047" +
    "\204\053\214\054\043\057\127\060\126\061\u01c8\062\u0147" +
    "\065\120\066\116\071\123\072\121\074\136\075\135\077" +
    "\170\100\167\106\144\117\147\120\146\121\202\122\200" +
    "\123\230\124\227\125\174\126\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\014\071\015\u0120\016\u019a\053\067" +
    "\054\043\055\072\001\001\000\076\004\176\005\u0109\006" +
    "\140\007\137\021\115\022\114\023\216\024\215\031\225" +
    "\046\206\047\204\053\214\054\043\065\120\066\116\071" +
    "\123\072\121\074\136\075\135\077\170\100\167\106\144" +
    "\117\u0199\120\u0198\121\202\122\200\123\230\124\227\125" +
    "\174\126\173\001\001\000\076\004\176\005\u0109\006\140" +
    "\007\137\021\115\022\114\023\216\024\215\031\225\046" +
    "\206\047\204\053\214\054\043\065\120\066\116\071\123" +
    "\072\121\074\136\075\135\077\170\100\167\106\144\117" +
    "\u0197\120\u0196\121\202\122\200\123\230\124\227\125\174" +
    "\126\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\112\004\176\005\u0184\006\140\007\137\010\152\011\151" +
    "\021\115\022\114\023\216\024\215\031\225\046\206\047" +
    "\204\053\214\054\043\057\127\060\126\061\u0185\062\u0149" +
    "\065\120\066\116\071\123\072\121\074\136\075\135\077" +
    "\170\100\167\106\144\117\147\120\146\121\202\122\200" +
    "\123\230\124\227\125\174\126\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\014\071\015\u0120\016\u0182" +
    "\053\067\054\043\055\072\001\001\000\022\004\176\005" +
    "\u0180\031\225\053\214\054\043\106\144\125\u0181\126\376" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\004" +
    "\176\005\u017f\006\140\007\137\021\115\022\114\023\216" +
    "\024\215\031\225\046\206\047\204\053\214\054\043\065" +
    "\u017e\066\u0100\071\123\072\121\074\136\075\135\077\170" +
    "\100\167\106\144\125\174\126\173\001\001\000\002\001" +
    "\001\000\150\002\111\003\110\004\176\005\107\006\140" +
    "\007\137\010\152\011\151\021\115\022\114\023\216\024" +
    "\215\025\165\026\164\030\u017d\031\225\040\106\041\105" +
    "\042\222\043\221\044\233\045\232\046\206\047\204\053" +
    "\214\054\043\057\127\060\126\061\113\062\112\063\212" +
    "\064\211\065\120\066\116\067\155\070\154\071\123\072" +
    "\121\074\136\075\135\077\170\100\167\106\144\117\147" +
    "\120\146\121\202\122\200\123\230\124\227\125\174\126" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\112\004\176\005\u0173\006\140\007\137\010" +
    "\152\011\151\021\115\022\114\023\216\024\215\031\225" +
    "\046\206\047\204\053\214\054\043\057\127\060\126\061" +
    "\u0174\062\u0148\065\120\066\116\071\123\072\121\074\136" +
    "\075\135\077\170\100\167\106\144\117\147\120\146\121" +
    "\202\122\200\123\230\124\227\125\174\126\173\001\001" +
    "\000\002\001\001\000\016\014\071\015\u0120\016\u016f\053" +
    "\067\054\043\055\072\001\001\000\002\001\001\000\016" +
    "\014\071\015\u0120\016\u016d\053\067\054\043\055\072\001" +
    "\001\000\076\004\176\005\u0109\006\140\007\137\021\115" +
    "\022\114\023\216\024\215\031\225\046\206\047\204\053" +
    "\214\054\043\065\120\066\116\071\123\072\121\074\136" +
    "\075\135\077\170\100\167\106\144\117\u016c\120\u016b\121" +
    "\202\122\200\123\230\124\227\125\174\126\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\076\004\176\005" +
    "\u0109\006\140\007\137\021\115\022\114\023\216\024\215" +
    "\031\225\046\206\047\204\053\214\054\043\065\120\066" +
    "\116\071\123\072\121\074\136\075\135\077\170\100\167" +
    "\106\144\117\u0127\120\u0126\121\202\122\200\123\230\124" +
    "\227\125\174\126\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\014\071\015\u0120\016" +
    "\u0121\053\067\054\043\055\072\001\001\000\076\004\176" +
    "\005\u0109\006\140\007\137\021\115\022\114\023\216\024" +
    "\215\031\225\046\206\047\204\053\214\054\043\065\120" +
    "\066\116\071\123\072\121\074\136\075\135\077\170\100" +
    "\167\106\144\117\u011f\120\u011e\121\202\122\200\123\230" +
    "\124\227\125\174\126\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\176\005\u011b\031\225\053\214" +
    "\054\043\106\144\125\u011c\126\345\001\001\000\112\004" +
    "\176\005\u0118\006\140\007\137\010\152\011\151\021\115" +
    "\022\114\023\216\024\215\031\225\046\206\047\204\053" +
    "\214\054\043\057\127\060\126\061\u011a\062\u0119\065\120" +
    "\066\116\071\123\072\121\074\136\075\135\077\170\100" +
    "\167\106\144\117\147\120\146\121\202\122\200\123\230" +
    "\124\227\125\174\126\173\001\001\000\002\001\001\000" +
    "\076\004\176\005\u0109\006\140\007\137\021\115\022\114" +
    "\023\216\024\215\031\225\046\206\047\204\053\214\054" +
    "\043\065\120\066\116\071\123\072\121\074\136\075\135" +
    "\077\170\100\167\106\144\117\u0108\120\u0107\121\202\122" +
    "\200\123\230\124\227\125\174\126\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\050\252\053\251\054" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\004\176\005\240\006\140\007\137\021\115\022\114\023" +
    "\216\024\215\031\225\046\206\047\204\053\214\054\043" +
    "\065\236\066\235\071\123\072\121\074\136\075\135\077" +
    "\170\100\167\106\144\125\174\126\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\154\002\111\003\110\004\176" +
    "\005\107\006\140\007\137\010\152\011\151\021\115\022" +
    "\114\023\216\024\215\025\165\026\164\030\243\031\225" +
    "\035\244\036\245\040\106\041\105\042\222\043\221\044" +
    "\233\045\232\046\206\047\204\053\214\054\043\057\127" +
    "\060\126\061\113\062\112\063\212\064\211\065\120\066" +
    "\116\067\155\070\154\071\123\072\121\074\136\075\135" +
    "\077\170\100\167\106\144\117\147\120\146\121\202\122" +
    "\200\123\230\124\227\125\174\126\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\150\002" +
    "\111\003\110\004\176\005\107\006\140\007\137\010\152" +
    "\011\151\021\115\022\114\023\216\024\215\025\165\026" +
    "\164\030\247\031\225\040\106\041\105\042\222\043\221" +
    "\044\233\045\232\046\206\047\204\053\214\054\043\057" +
    "\127\060\126\061\113\062\112\063\212\064\211\065\120" +
    "\066\116\067\155\070\154\071\123\072\121\074\136\075" +
    "\135\077\170\100\167\106\144\117\147\120\146\121\202" +
    "\122\200\123\230\124\227\125\174\126\173\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\150\002\111\003\110\004\176\005\107\006" +
    "\140\007\137\010\152\011\151\021\115\022\114\023\216" +
    "\024\215\025\165\026\164\030\254\031\225\040\106\041" +
    "\105\042\222\043\221\044\233\045\232\046\206\047\204" +
    "\053\214\054\043\057\127\060\126\061\113\062\112\063" +
    "\212\064\211\065\120\066\116\067\155\070\154\071\123" +
    "\072\121\074\136\075\135\077\170\100\167\106\144\117" +
    "\147\120\146\121\202\122\200\123\230\124\227\125\174" +
    "\126\173\001\001\000\006\031\261\034\256\001\001\000" +
    "\010\050\270\053\251\054\043\001\001\000\002\001\001" +
    "\000\152\002\111\003\110\004\176\005\107\006\140\007" +
    "\137\010\152\011\151\021\115\022\114\023\216\024\215" +
    "\025\165\026\164\030\264\031\225\033\265\040\106\041" +
    "\105\042\222\043\221\044\233\045\232\046\206\047\204" +
    "\053\214\054\043\057\127\060\126\061\113\062\112\063" +
    "\212\064\211\065\120\066\116\067\155\070\154\071\123" +
    "\072\121\074\136\075\135\077\170\100\167\106\144\117" +
    "\147\120\146\121\202\122\200\123\230\124\227\125\174" +
    "\126\173\001\001\000\150\002\111\003\110\004\176\005" +
    "\107\006\140\007\137\010\152\011\151\021\115\022\114" +
    "\023\216\024\215\025\165\026\164\030\262\031\225\040" +
    "\106\041\105\042\222\043\221\044\233\045\232\046\206" +
    "\047\204\053\214\054\043\057\127\060\126\061\113\062" +
    "\112\063\212\064\211\065\120\066\116\067\155\070\154" +
    "\071\123\072\121\074\136\075\135\077\170\100\167\106" +
    "\144\117\147\120\146\121\202\122\200\123\230\124\227" +
    "\125\174\126\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\150\002\111" +
    "\003\110\004\176\005\107\006\140\007\137\010\152\011" +
    "\151\021\115\022\114\023\216\024\215\025\165\026\164" +
    "\030\267\031\225\040\106\041\105\042\222\043\221\044" +
    "\233\045\232\046\206\047\204\053\214\054\043\057\127" +
    "\060\126\061\113\062\112\063\212\064\211\065\120\066" +
    "\116\067\155\070\154\071\123\072\121\074\136\075\135" +
    "\077\170\100\167\106\144\117\147\120\146\121\202\122" +
    "\200\123\230\124\227\125\174\126\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\004" +
    "\176\005\u0106\007\306\022\302\024\215\031\225\047\275" +
    "\053\214\054\043\066\116\072\303\075\310\100\167\106" +
    "\144\122\u0105\126\173\001\001\000\042\004\176\005\u0104" +
    "\007\306\022\302\024\215\031\225\047\275\053\214\054" +
    "\043\066\116\072\303\075\310\100\167\106\144\122\u0103" +
    "\126\173\001\001\000\042\004\176\005\u0102\007\306\022" +
    "\302\024\215\031\225\047\275\053\214\054\043\066\116" +
    "\072\303\075\310\100\167\106\144\122\u0101\126\173\001" +
    "\001\000\042\004\176\005\311\007\306\022\302\024\215" +
    "\031\225\047\275\053\214\054\043\066\116\072\303\075" +
    "\310\100\167\106\144\122\305\126\173\001\001\000\002" +
    "\001\001\000\036\004\176\007\306\022\302\024\215\031" +
    "\225\047\275\053\214\054\043\066\235\072\303\075\310" +
    "\100\167\106\144\126\173\001\001\000\036\004\176\007" +
    "\306\022\302\024\215\031\225\047\275\053\214\054\043" +
    "\066\u0100\072\303\075\310\100\167\106\144\126\173\001" +
    "\001\000\016\004\176\031\225\053\214\054\043\106\144" +
    "\126\377\001\001\000\016\004\176\031\225\053\214\054" +
    "\043\106\144\126\376\001\001\000\004\076\370\001\001" +
    "\000\002\001\001\000\016\004\176\031\225\053\214\054" +
    "\043\106\144\126\345\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\004\176\007\306\022\302\024\215\031" +
    "\225\047\275\053\214\054\043\066\336\072\303\075\310" +
    "\100\167\106\144\126\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\176\007\315\024\215\031\225" +
    "\053\214\054\043\106\144\126\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\154\002\111" +
    "\003\110\004\176\005\107\006\140\007\137\010\152\011" +
    "\151\021\115\022\114\023\216\024\215\025\165\026\164" +
    "\030\243\031\225\035\326\036\245\040\106\041\105\042" +
    "\222\043\221\044\233\045\232\046\206\047\204\053\214" +
    "\054\043\057\127\060\126\061\113\062\112\063\212\064" +
    "\211\065\120\066\116\067\155\070\154\071\123\072\121" +
    "\074\136\075\135\077\170\100\167\106\144\117\147\120" +
    "\146\121\202\122\200\123\230\124\227\125\174\126\173" +
    "\001\001\000\016\004\176\031\225\053\214\054\043\106" +
    "\144\126\324\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\154" +
    "\002\111\003\110\004\176\005\107\006\140\007\137\010" +
    "\152\011\151\021\115\022\114\023\216\024\215\025\165" +
    "\026\164\030\243\031\225\035\331\036\245\040\106\041" +
    "\105\042\222\043\221\044\233\045\232\046\206\047\204" +
    "\053\214\054\043\057\127\060\126\061\113\062\112\063" +
    "\212\064\211\065\120\066\116\067\155\070\154\071\123" +
    "\072\121\074\136\075\135\077\170\100\167\106\144\117" +
    "\147\120\146\121\202\122\200\123\230\124\227\125\174" +
    "\126\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\154\002\111\003\110\004\176\005\107\006\140\007\137" +
    "\010\152\011\151\021\115\022\114\023\216\024\215\025" +
    "\165\026\164\030\243\031\225\035\334\036\245\040\106" +
    "\041\105\042\222\043\221\044\233\045\232\046\206\047" +
    "\204\053\214\054\043\057\127\060\126\061\113\062\112" +
    "\063\212\064\211\065\120\066\116\067\155\070\154\071" +
    "\123\072\121\074\136\075\135\077\170\100\167\106\144" +
    "\117\147\120\146\121\202\122\200\123\230\124\227\125" +
    "\174\126\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\004\176\007\306\022\302\024" +
    "\215\031\225\047\275\053\214\054\043\066\344\072\303" +
    "\075\310\100\167\106\144\126\173\001\001\000\036\004" +
    "\176\007\306\022\302\024\215\031\225\047\275\053\214" +
    "\054\043\066\343\072\303\075\310\100\167\106\144\126" +
    "\173\001\001\000\036\004\176\007\306\022\302\024\215" +
    "\031\225\047\275\053\214\054\043\066\342\072\303\075" +
    "\310\100\167\106\144\126\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\004\176\007\306\022\302\024\215\031\225\047\347" +
    "\053\214\054\043\075\310\100\167\106\144\126\173\001" +
    "\001\000\002\001\001\000\030\004\176\007\306\022\302" +
    "\024\215\031\225\053\214\054\043\075\310\100\351\106" +
    "\144\126\173\001\001\000\002\001\001\000\024\004\176" +
    "\007\306\024\215\031\225\053\214\054\043\075\375\106" +
    "\144\126\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\004\176\007\306\022\302" +
    "\024\215\031\225\053\214\054\043\075\310\100\374\106" +
    "\144\126\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\004\176\005" +
    "\u0117\007\306\022\302\024\215\031\225\047\275\053\214" +
    "\054\043\066\116\072\303\075\310\100\167\106\144\122" +
    "\u010d\124\u0116\126\173\001\001\000\044\004\176\005\u0115" +
    "\007\306\022\302\024\215\031\225\047\275\053\214\054" +
    "\043\066\116\072\303\075\310\100\167\106\144\122\u010d" +
    "\124\u0114\126\173\001\001\000\044\004\176\005\u010f\007" +
    "\306\022\302\024\215\031\225\047\275\053\214\054\043" +
    "\066\116\072\303\075\310\100\167\106\144\122\u010d\124" +
    "\u010e\126\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\176\007\306\022\302\024" +
    "\215\031\225\047\275\053\214\054\043\066\116\072\303" +
    "\075\310\100\167\106\144\122\u0105\126\173\001\001\000" +
    "\040\004\176\007\306\022\302\024\215\031\225\047\275" +
    "\053\214\054\043\066\116\072\303\075\310\100\167\106" +
    "\144\122\u0103\126\173\001\001\000\040\004\176\007\306" +
    "\022\302\024\215\031\225\047\275\053\214\054\043\066" +
    "\116\072\303\075\310\100\167\106\144\122\u0101\126\173" +
    "\001\001\000\040\004\176\007\306\022\302\024\215\031" +
    "\225\047\275\053\214\054\043\066\116\072\303\075\310" +
    "\100\167\106\144\122\305\126\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\261\034\u0123\001\001\000\014\014\071\015\u0124\053\067" +
    "\054\043\055\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\004\176\005\u016a\007" +
    "\306\011\u0130\022\302\024\215\031\225\047\275\053\214" +
    "\054\043\060\126\062\u0169\066\116\072\303\075\310\100" +
    "\167\106\144\120\u012f\122\u010d\124\u0133\126\173\001\001" +
    "\000\054\004\176\005\u0168\007\306\011\u0130\022\302\024" +
    "\215\031\225\047\275\053\214\054\043\060\126\062\u0167" +
    "\066\116\072\303\075\310\100\167\106\144\120\u012f\122" +
    "\u010d\124\u0133\126\173\001\001\000\054\004\176\005\u013d" +
    "\007\306\011\u0130\022\302\024\215\031\225\047\275\053" +
    "\214\054\043\060\126\062\u0131\066\116\072\303\075\310" +
    "\100\167\106\144\120\u012f\122\u010d\124\u0133\126\173\001" +
    "\001\000\044\004\176\007\306\022\302\024\215\031\225" +
    "\047\275\053\214\054\043\066\116\072\303\075\310\100" +
    "\167\106\144\120\u0166\122\u010d\124\u0133\126\173\001\001" +
    "\000\044\004\176\007\306\022\302\024\215\031\225\047" +
    "\275\053\214\054\043\066\116\072\303\075\310\100\167" +
    "\106\144\120\u0165\122\u010d\124\u0133\126\173\001\001\000" +
    "\050\004\176\007\306\011\u0130\022\302\024\215\031\225" +
    "\047\275\053\214\054\043\060\u0164\066\116\072\303\075" +
    "\310\100\167\106\144\120\u012f\122\u010d\124\u0133\126\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\004\176\007\306\011\u0130\022\302\024\215" +
    "\031\225\047\275\053\214\054\043\060\126\062\u0119\066" +
    "\116\072\303\075\310\100\167\106\144\120\u012f\122\u010d" +
    "\124\u0133\126\173\001\001\000\002\001\001\000\044\004" +
    "\176\007\306\022\302\024\215\031\225\047\275\053\214" +
    "\054\043\066\116\072\303\075\310\100\167\106\144\120" +
    "\u014b\122\u010d\124\u0133\126\173\001\001\000\044\004\176" +
    "\007\306\022\302\024\215\031\225\047\275\053\214\054" +
    "\043\066\116\072\303\075\310\100\167\106\144\120\u014a" +
    "\122\u010d\124\u0133\126\173\001\001\000\052\004\176\007" +
    "\306\011\u0130\022\302\024\215\031\225\047\275\053\214" +
    "\054\043\060\126\062\u0149\066\116\072\303\075\310\100" +
    "\167\106\144\120\u012f\122\u010d\124\u0133\126\173\001\001" +
    "\000\052\004\176\007\306\011\u0130\022\302\024\215\031" +
    "\225\047\275\053\214\054\043\060\126\062\u0148\066\116" +
    "\072\303\075\310\100\167\106\144\120\u012f\122\u010d\124" +
    "\u0133\126\173\001\001\000\052\004\176\007\306\011\u0130" +
    "\022\302\024\215\031\225\047\275\053\214\054\043\060" +
    "\126\062\u0147\066\116\072\303\075\310\100\167\106\144" +
    "\120\u012f\122\u010d\124\u0133\126\173\001\001\000\052\004" +
    "\176\007\306\011\u0130\022\302\024\215\031\225\047\275" +
    "\053\214\054\043\060\126\062\u0146\066\116\072\303\075" +
    "\310\100\167\106\144\120\u012f\122\u010d\124\u0133\126\173" +
    "\001\001\000\044\004\176\007\306\022\302\024\215\031" +
    "\225\047\275\053\214\054\043\066\116\072\303\075\310" +
    "\100\167\106\144\120\u0145\122\u010d\124\u0133\126\173\001" +
    "\001\000\044\004\176\007\306\022\302\024\215\031\225" +
    "\047\275\053\214\054\043\066\116\072\303\075\310\100" +
    "\167\106\144\120\u0144\122\u010d\124\u0133\126\173\001\001" +
    "\000\044\004\176\007\306\022\302\024\215\031\225\047" +
    "\275\053\214\054\043\066\116\072\303\075\310\100\167" +
    "\106\144\120\u0140\122\u010d\124\u0133\126\173\001\001\000" +
    "\002\001\001\000\052\004\176\007\306\011\u0130\022\302" +
    "\024\215\031\225\047\275\053\214\054\043\060\126\062" +
    "\u013f\066\116\072\303\075\310\100\167\106\144\120\u012f" +
    "\122\u010d\124\u0133\126\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\004\176\007\306\022\302\024\215" +
    "\031\225\047\275\053\214\054\043\066\116\072\303\075" +
    "\310\100\167\106\144\122\u010d\124\u0116\126\173\001\001" +
    "\000\042\004\176\007\306\022\302\024\215\031\225\047" +
    "\275\053\214\054\043\066\116\072\303\075\310\100\167" +
    "\106\144\122\u010d\124\u0114\126\173\001\001\000\042\004" +
    "\176\007\306\022\302\024\215\031\225\047\275\053\214" +
    "\054\043\066\116\072\303\075\310\100\167\106\144\122" +
    "\u010d\124\u010e\126\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\004\176\007\306\022\302\024\215\031\225\047" +
    "\275\053\214\054\043\066\116\072\303\075\310\100\167" +
    "\106\144\120\u0163\122\u010d\124\u0133\126\173\001\001\000" +
    "\044\004\176\007\306\022\302\024\215\031\225\047\275" +
    "\053\214\054\043\066\116\072\303\075\310\100\167\106" +
    "\144\120\u0162\122\u010d\124\u0133\126\173\001\001\000\044" +
    "\004\176\007\306\022\302\024\215\031\225\047\275\053" +
    "\214\054\043\066\116\072\303\075\310\100\167\106\144" +
    "\120\u0161\122\u010d\124\u0133\126\173\001\001\000\044\004" +
    "\176\007\306\022\302\024\215\031\225\047\275\053\214" +
    "\054\043\066\116\072\303\075\310\100\167\106\144\120" +
    "\u0160\122\u010d\124\u0133\126\173\001\001\000\044\004\176" +
    "\007\306\022\302\024\215\031\225\047\275\053\214\054" +
    "\043\066\116\072\303\075\310\100\167\106\144\120\u015f" +
    "\122\u010d\124\u0133\126\173\001\001\000\044\004\176\007" +
    "\306\022\302\024\215\031\225\047\275\053\214\054\043" +
    "\066\116\072\303\075\310\100\167\106\144\120\u015e\122" +
    "\u010d\124\u0133\126\173\001\001\000\044\004\176\007\306" +
    "\022\302\024\215\031\225\047\275\053\214\054\043\066" +
    "\116\072\303\075\310\100\167\106\144\120\u015d\122\u010d" +
    "\124\u0133\126\173\001\001\000\044\004\176\007\306\022" +
    "\302\024\215\031\225\047\275\053\214\054\043\066\116" +
    "\072\303\075\310\100\167\106\144\120\u015c\122\u010d\124" +
    "\u0133\126\173\001\001\000\044\004\176\007\306\022\302" +
    "\024\215\031\225\047\275\053\214\054\043\066\116\072" +
    "\303\075\310\100\167\106\144\120\u015b\122\u010d\124\u0133" +
    "\126\173\001\001\000\044\004\176\007\306\022\302\024" +
    "\215\031\225\047\275\053\214\054\043\066\116\072\303" +
    "\075\310\100\167\106\144\120\u015a\122\u010d\124\u0133\126" +
    "\173\001\001\000\044\004\176\007\306\022\302\024\215" +
    "\031\225\047\275\053\214\054\043\066\116\072\303\075" +
    "\310\100\167\106\144\120\u0159\122\u010d\124\u0133\126\173" +
    "\001\001\000\044\004\176\007\306\022\302\024\215\031" +
    "\225\047\275\053\214\054\043\066\116\072\303\075\310" +
    "\100\167\106\144\120\u0158\122\u010d\124\u0133\126\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\261\034\u016e" +
    "\001\001\000\002\001\001\000\006\031\261\034\u0170\001" +
    "\001\000\002\001\001\000\032\004\176\005\u0172\007\306" +
    "\022\302\024\215\031\225\053\214\054\043\075\310\100" +
    "\351\106\144\126\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\054\u0176\001\001\000" +
    "\002\001\001\000\040\004\176\005\u017c\007\306\022\302" +
    "\024\215\031\225\047\275\053\214\054\043\066\344\072" +
    "\303\075\310\100\167\106\144\126\173\001\001\000\040" +
    "\004\176\005\u017b\007\306\022\302\024\215\031\225\047" +
    "\275\053\214\054\043\066\343\072\303\075\310\100\167" +
    "\106\144\126\173\001\001\000\040\004\176\005\u017a\007" +
    "\306\022\302\024\215\031\225\047\275\053\214\054\043" +
    "\066\342\072\303\075\310\100\167\106\144\126\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\261\034\u0183" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\066\003\u0187\004\176\005\u018a\007\306\011\u0130" +
    "\022\302\024\215\031\225\041\u0188\043\221\045\232\047" +
    "\275\053\214\054\043\060\126\062\112\064\u0189\066\116" +
    "\072\303\075\310\100\167\106\144\120\u012f\122\u010d\124" +
    "\u0133\126\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\004\176\007" +
    "\306\011\u0130\022\302\024\215\031\225\047\275\053\214" +
    "\054\043\060\126\062\u0169\066\116\072\303\075\310\100" +
    "\167\106\144\120\u012f\122\u010d\124\u0133\126\173\001\001" +
    "\000\052\004\176\007\306\011\u0130\022\302\024\215\031" +
    "\225\047\275\053\214\054\043\060\126\062\u0167\066\116" +
    "\072\303\075\310\100\167\106\144\120\u012f\122\u010d\124" +
    "\u0133\126\173\001\001\000\052\004\176\007\306\011\u0130" +
    "\022\302\024\215\031\225\047\275\053\214\054\043\060" +
    "\126\062\u0131\066\116\072\303\075\310\100\167\106\144" +
    "\120\u012f\122\u010d\124\u0133\126\173\001\001\000\064\003" +
    "\u0187\004\176\007\306\011\u0130\022\302\024\215\031\225" +
    "\041\u0191\043\u0192\045\232\047\275\053\214\054\043\060" +
    "\126\062\112\064\u0189\066\116\072\303\075\310\100\167" +
    "\106\144\120\u012f\122\u010d\124\u0133\126\173\001\001\000" +
    "\054\004\176\007\306\011\u0130\022\302\024\215\031\225" +
    "\047\275\053\214\054\043\060\126\062\112\064\u0190\066" +
    "\116\072\303\075\310\100\167\106\144\120\u012f\122\u010d" +
    "\124\u0133\126\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\003\u0187\004\176\007\306" +
    "\011\u0130\022\302\024\215\031\225\043\u0195\045\u0194\047" +
    "\275\053\214\054\043\060\126\062\112\064\u0189\066\116" +
    "\072\303\075\310\100\167\106\144\120\u012f\122\u010d\124" +
    "\u0133\126\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\261\034\u019b\001\001\000\002" +
    "\001\001\000\154\002\111\003\110\004\176\005\107\006" +
    "\140\007\137\010\152\011\151\021\115\022\114\023\216" +
    "\024\215\025\165\026\164\030\243\031\225\035\u019d\036" +
    "\245\040\106\041\105\042\222\043\221\044\233\045\232" +
    "\046\206\047\204\053\214\054\043\057\127\060\126\061" +
    "\113\062\112\063\212\064\211\065\120\066\116\067\155" +
    "\070\154\071\123\072\121\074\136\075\135\077\170\100" +
    "\167\106\144\117\147\120\146\121\202\122\200\123\230" +
    "\124\227\125\174\126\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\003\u0187\004\176\005\u01a0\007\306" +
    "\011\u0130\022\302\024\215\026\u01a1\031\225\041\105\043" +
    "\221\045\232\047\275\053\214\054\043\060\126\062\112" +
    "\064\u0189\066\116\072\303\075\310\100\167\106\144\120" +
    "\u012f\122\u010d\124\u0133\126\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\064\003\u0187\004\176\007\306\011" +
    "\u0130\022\302\024\215\031\225\041\u0188\043\221\045\232" +
    "\047\275\053\214\054\043\060\126\062\112\064\u0189\066" +
    "\116\072\303\075\310\100\167\106\144\120\u012f\122\u010d" +
    "\124\u0133\126\173\001\001\000\076\004\176\005\u0109\006" +
    "\140\007\137\021\115\022\114\023\216\024\215\031\225" +
    "\046\206\047\204\053\214\054\043\065\120\066\116\071" +
    "\123\072\121\074\136\075\135\077\170\100\167\106\144" +
    "\117\u01c6\120\u01c5\121\202\122\200\123\230\124\227\125" +
    "\174\126\173\001\001\000\076\004\176\005\u0109\006\140" +
    "\007\137\021\115\022\114\023\216\024\215\031\225\046" +
    "\206\047\204\053\214\054\043\065\120\066\116\071\123" +
    "\072\121\074\136\075\135\077\170\100\167\106\144\117" +
    "\u01c4\120\u01c3\121\202\122\200\123\230\124\227\125\174" +
    "\126\173\001\001\000\076\004\176\005\u0109\006\140\007" +
    "\137\021\115\022\114\023\216\024\215\031\225\046\206" +
    "\047\204\053\214\054\043\065\120\066\116\071\123\072" +
    "\121\074\136\075\135\077\170\100\167\106\144\117\u01c2" +
    "\120\u01c1\121\202\122\200\123\230\124\227\125\174\126" +
    "\173\001\001\000\076\004\176\005\u0109\006\140\007\137" +
    "\021\115\022\114\023\216\024\215\031\225\046\206\047" +
    "\204\053\214\054\043\065\120\066\116\071\123\072\121" +
    "\074\136\075\135\077\170\100\167\106\144\117\u01c0\120" +
    "\u01bf\121\202\122\200\123\230\124\227\125\174\126\173" +
    "\001\001\000\076\004\176\005\u0109\006\140\007\137\021" +
    "\115\022\114\023\216\024\215\031\225\046\206\047\204" +
    "\053\214\054\043\065\120\066\116\071\123\072\121\074" +
    "\136\075\135\077\170\100\167\106\144\117\u01be\120\u01bd" +
    "\121\202\122\200\123\230\124\227\125\174\126\173\001" +
    "\001\000\076\004\176\005\u0109\006\140\007\137\021\115" +
    "\022\114\023\216\024\215\031\225\046\206\047\204\053" +
    "\214\054\043\065\120\066\116\071\123\072\121\074\136" +
    "\075\135\077\170\100\167\106\144\117\u01bc\120\u01bb\121" +
    "\202\122\200\123\230\124\227\125\174\126\173\001\001" +
    "\000\076\004\176\005\u0109\006\140\007\137\021\115\022" +
    "\114\023\216\024\215\031\225\046\206\047\204\053\214" +
    "\054\043\065\120\066\116\071\123\072\121\074\136\075" +
    "\135\077\170\100\167\106\144\117\u01ba\120\u01b9\121\202" +
    "\122\200\123\230\124\227\125\174\126\173\001\001\000" +
    "\076\004\176\005\u0109\006\140\007\137\021\115\022\114" +
    "\023\216\024\215\031\225\046\206\047\204\053\214\054" +
    "\043\065\120\066\116\071\123\072\121\074\136\075\135" +
    "\077\170\100\167\106\144\117\u01b8\120\u01b7\121\202\122" +
    "\200\123\230\124\227\125\174\126\173\001\001\000\076" +
    "\004\176\005\u0109\006\140\007\137\021\115\022\114\023" +
    "\216\024\215\031\225\046\206\047\204\053\214\054\043" +
    "\065\120\066\116\071\123\072\121\074\136\075\135\077" +
    "\170\100\167\106\144\117\u01b6\120\u01b5\121\202\122\200" +
    "\123\230\124\227\125\174\126\173\001\001\000\076\004" +
    "\176\005\u0109\006\140\007\137\021\115\022\114\023\216" +
    "\024\215\031\225\046\206\047\204\053\214\054\043\065" +
    "\120\066\116\071\123\072\121\074\136\075\135\077\170" +
    "\100\167\106\144\117\u01b4\120\u01b3\121\202\122\200\123" +
    "\230\124\227\125\174\126\173\001\001\000\076\004\176" +
    "\005\u0109\006\140\007\137\021\115\022\114\023\216\024" +
    "\215\031\225\046\206\047\204\053\214\054\043\065\120" +
    "\066\116\071\123\072\121\074\136\075\135\077\170\100" +
    "\167\106\144\117\u01b2\120\u01b1\121\202\122\200\123\230" +
    "\124\227\125\174\126\173\001\001\000\076\004\176\005" +
    "\u0109\006\140\007\137\021\115\022\114\023\216\024\215" +
    "\031\225\046\206\047\204\053\214\054\043\065\120\066" +
    "\116\071\123\072\121\074\136\075\135\077\170\100\167" +
    "\106\144\117\u01b0\120\u01af\121\202\122\200\123\230\124" +
    "\227\125\174\126\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\176\005\u01d0\031\225" +
    "\053\214\054\043\106\144\126\324\001\001\000\002\001" +
    "\001\000\024\004\176\005\u01d2\007\315\024\215\031\225" +
    "\053\214\054\043\106\144\126\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\053\067" +
    "\054\043\055\u01f8\001\001\000\010\053\067\054\043\055" +
    "\u01f3\001\001\000\002\001\001\000\006\031\261\034\u01ea" +
    "\001\001\000\010\053\067\054\043\055\u01e4\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\053\067\054\043" +
    "\055\u01de\001\001\000\010\053\067\054\043\055\u01df\001" +
    "\001\000\002\001\001\000\002\001\001\000\150\002\111" +
    "\003\110\004\176\005\107\006\140\007\137\010\152\011" +
    "\151\021\115\022\114\023\216\024\215\025\165\026\164" +
    "\030\u01e1\031\225\040\106\041\105\042\222\043\221\044" +
    "\233\045\232\046\206\047\204\053\214\054\043\057\127" +
    "\060\126\061\113\062\112\063\212\064\211\065\120\066" +
    "\116\067\155\070\154\071\123\072\121\074\136\075\135" +
    "\077\170\100\167\106\144\117\147\120\146\121\202\122" +
    "\200\123\230\124\227\125\174\126\173\001\001\000\002" +
    "\001\001\000\150\002\111\003\110\004\176\005\107\006" +
    "\140\007\137\010\152\011\151\021\115\022\114\023\216" +
    "\024\215\025\165\026\164\030\u01e3\031\225\040\106\041" +
    "\105\042\222\043\221\044\233\045\232\046\206\047\204" +
    "\053\214\054\043\057\127\060\126\061\113\062\112\063" +
    "\212\064\211\065\120\066\116\067\155\070\154\071\123" +
    "\072\121\074\136\075\135\077\170\100\167\106\144\117" +
    "\147\120\146\121\202\122\200\123\230\124\227\125\174" +
    "\126\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\150\002\111\003\110\004\176\005\107\006\140\007\137" +
    "\010\152\011\151\021\115\022\114\023\216\024\215\025" +
    "\165\026\164\030\u01e6\031\225\040\106\041\105\042\222" +
    "\043\221\044\233\045\232\046\206\047\204\053\214\054" +
    "\043\057\127\060\126\061\113\062\112\063\212\064\211" +
    "\065\120\066\116\067\155\070\154\071\123\072\121\074" +
    "\136\075\135\077\170\100\167\106\144\117\147\120\146" +
    "\121\202\122\200\123\230\124\227\125\174\126\173\001" +
    "\001\000\002\001\001\000\150\002\111\003\110\004\176" +
    "\005\107\006\140\007\137\010\152\011\151\021\115\022" +
    "\114\023\216\024\215\025\165\026\164\030\u01e8\031\225" +
    "\040\106\041\105\042\222\043\221\044\233\045\232\046" +
    "\206\047\204\053\214\054\043\057\127\060\126\061\113" +
    "\062\112\063\212\064\211\065\120\066\116\067\155\070" +
    "\154\071\123\072\121\074\136\075\135\077\170\100\167" +
    "\106\144\117\147\120\146\121\202\122\200\123\230\124" +
    "\227\125\174\126\173\001\001\000\002\001\001\000\012" +
    "\014\u01ee\053\067\054\043\055\u01d7\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\053\067" +
    "\054\043\055\u01e4\001\001\000\002\001\001\000\150\002" +
    "\111\003\110\004\176\005\107\006\140\007\137\010\152" +
    "\011\151\021\115\022\114\023\216\024\215\025\165\026" +
    "\164\030\u01f0\031\225\040\106\041\105\042\222\043\221" +
    "\044\233\045\232\046\206\047\204\053\214\054\043\057" +
    "\127\060\126\061\113\062\112\063\212\064\211\065\120" +
    "\066\116\067\155\070\154\071\123\072\121\074\136\075" +
    "\135\077\170\100\167\106\144\117\147\120\146\121\202" +
    "\122\200\123\230\124\227\125\174\126\173\001\001\000" +
    "\002\001\001\000\150\002\111\003\110\004\176\005\107" +
    "\006\140\007\137\010\152\011\151\021\115\022\114\023" +
    "\216\024\215\025\165\026\164\030\u01f2\031\225\040\106" +
    "\041\105\042\222\043\221\044\233\045\232\046\206\047" +
    "\204\053\214\054\043\057\127\060\126\061\113\062\112" +
    "\063\212\064\211\065\120\066\116\067\155\070\154\071" +
    "\123\072\121\074\136\075\135\077\170\100\167\106\144" +
    "\117\147\120\146\121\202\122\200\123\230\124\227\125" +
    "\174\126\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\150\002\111\003\110\004\176\005\107\006\140\007" +
    "\137\010\152\011\151\021\115\022\114\023\216\024\215" +
    "\025\165\026\164\030\u01f5\031\225\040\106\041\105\042" +
    "\222\043\221\044\233\045\232\046\206\047\204\053\214" +
    "\054\043\057\127\060\126\061\113\062\112\063\212\064" +
    "\211\065\120\066\116\067\155\070\154\071\123\072\121" +
    "\074\136\075\135\077\170\100\167\106\144\117\147\120" +
    "\146\121\202\122\200\123\230\124\227\125\174\126\173" +
    "\001\001\000\002\001\001\000\150\002\111\003\110\004" +
    "\176\005\107\006\140\007\137\010\152\011\151\021\115" +
    "\022\114\023\216\024\215\025\165\026\164\030\u01f7\031" +
    "\225\040\106\041\105\042\222\043\221\044\233\045\232" +
    "\046\206\047\204\053\214\054\043\057\127\060\126\061" +
    "\113\062\112\063\212\064\211\065\120\066\116\067\155" +
    "\070\154\071\123\072\121\074\136\075\135\077\170\100" +
    "\167\106\144\117\147\120\146\121\202\122\200\123\230" +
    "\124\227\125\174\126\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\150\002\111\003\110\004\176\005\107" +
    "\006\140\007\137\010\152\011\151\021\115\022\114\023" +
    "\216\024\215\025\165\026\164\030\u01fa\031\225\040\106" +
    "\041\105\042\222\043\221\044\233\045\232\046\206\047" +
    "\204\053\214\054\043\057\127\060\126\061\113\062\112" +
    "\063\212\064\211\065\120\066\116\067\155\070\154\071" +
    "\123\072\121\074\136\075\135\077\170\100\167\106\144" +
    "\117\147\120\146\121\202\122\200\123\230\124\227\125" +
    "\174\126\173\001\001\000\002\001\001\000\150\002\111" +
    "\003\110\004\176\005\107\006\140\007\137\010\152\011" +
    "\151\021\115\022\114\023\216\024\215\025\165\026\164" +
    "\030\u01fc\031\225\040\106\041\105\042\222\043\221\044" +
    "\233\045\232\046\206\047\204\053\214\054\043\057\127" +
    "\060\126\061\113\062\112\063\212\064\211\065\120\066" +
    "\116\067\155\070\154\071\123\072\121\074\136\075\135" +
    "\077\170\100\167\106\144\117\147\120\146\121\202\122" +
    "\200\123\230\124\227\125\174\126\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\004\176\005\u0204\007\306\022\302\024\215\031" +
    "\225\047\347\053\214\054\043\075\310\100\167\106\144" +
    "\126\173\001\001\000\002\001\001\000\006\031\261\034" +
    "\u0206\001\001\000\002\001\001\000\026\004\176\005\u020a" +
    "\007\306\024\215\031\225\053\214\054\043\075\375\106" +
    "\144\126\173\001\001\000\032\004\176\005\u0209\007\306" +
    "\022\302\024\215\031\225\053\214\054\043\075\310\100" +
    "\374\106\144\126\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\004\176\007\306\011\u0130\022\302\024" +
    "\215\031\225\047\275\053\214\054\043\060\126\062\112" +
    "\064\u020c\066\116\072\303\075\310\100\167\106\144\120" +
    "\u012f\122\u010d\124\u0133\126\173\001\001\000\002\001\001" +
    "\000\136\002\111\003\110\004\176\005\u0211\006\140\007" +
    "\137\010\152\011\151\021\115\022\114\023\216\024\215" +
    "\031\225\040\u0210\041\u0191\042\222\043\u0212\044\233\045" +
    "\232\046\206\047\204\053\214\054\043\057\127\060\126" +
    "\061\113\062\112\063\212\064\211\065\120\066\116\071" +
    "\123\072\121\074\136\075\135\077\170\100\167\106\144" +
    "\117\147\120\146\121\202\122\200\123\230\124\227\125" +
    "\174\126\173\001\001\000\056\004\176\005\u020f\007\306" +
    "\011\u0130\022\302\024\215\031\225\047\275\053\214\054" +
    "\043\060\126\062\112\064\u0190\066\116\072\303\075\310" +
    "\100\167\106\144\120\u012f\122\u010d\124\u0133\126\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\132\002\111\003\110\004\176\005" +
    "\u0214\006\140\007\137\010\152\011\151\021\115\022\114" +
    "\023\216\024\215\031\225\042\u0215\043\u0195\044\u0216\045" +
    "\u0194\046\206\047\204\053\214\054\043\057\127\060\126" +
    "\061\113\062\112\063\212\064\211\065\120\066\116\071" +
    "\123\072\121\074\136\075\135\077\170\100\167\106\144" +
    "\117\147\120\146\121\202\122\200\123\230\124\227\125" +
    "\174\126\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\004\176\007\306\011\u0130\022" +
    "\302\024\215\031\225\047\275\053\214\054\043\060\126" +
    "\062\112\064\u0218\066\116\072\303\075\310\100\167\106" +
    "\144\120\u012f\122\u010d\124\u0133\126\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\150\002" +
    "\111\003\110\004\176\005\107\006\140\007\137\010\152" +
    "\011\151\021\115\022\114\023\216\024\215\025\165\026" +
    "\164\030\u021c\031\225\040\106\041\105\042\222\043\221" +
    "\044\233\045\232\046\206\047\204\053\214\054\043\057" +
    "\127\060\126\061\113\062\112\063\212\064\211\065\120" +
    "\066\116\067\155\070\154\071\123\072\121\074\136\075" +
    "\135\077\170\100\167\106\144\117\147\120\146\121\202" +
    "\122\200\123\230\124\227\125\174\126\173\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\150" +
    "\002\111\003\110\004\176\005\107\006\140\007\137\010" +
    "\152\011\151\021\115\022\114\023\216\024\215\025\165" +
    "\026\164\030\u0220\031\225\040\106\041\105\042\222\043" +
    "\221\044\233\045\232\046\206\047\204\053\214\054\043" +
    "\057\127\060\126\061\113\062\112\063\212\064\211\065" +
    "\120\066\116\067\155\070\154\071\123\072\121\074\136" +
    "\075\135\077\170\100\167\106\144\117\147\120\146\121" +
    "\202\122\200\123\230\124\227\125\174\126\173\001\001" +
    "\000\002\001\001\000\150\002\111\003\110\004\176\005" +
    "\107\006\140\007\137\010\152\011\151\021\115\022\114" +
    "\023\216\024\215\025\165\026\164\030\u0222\031\225\040" +
    "\106\041\105\042\222\043\221\044\233\045\232\046\206" +
    "\047\204\053\214\054\043\057\127\060\126\061\113\062" +
    "\112\063\212\064\211\065\120\066\116\067\155\070\154" +
    "\071\123\072\121\074\136\075\135\077\170\100\167\106" +
    "\144\117\147\120\146\121\202\122\200\123\230\124\227" +
    "\125\174\126\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\150\002\111\003\110\004\176" +
    "\005\107\006\140\007\137\010\152\011\151\021\115\022" +
    "\114\023\216\024\215\025\165\026\164\030\u0226\031\225" +
    "\040\106\041\105\042\222\043\221\044\233\045\232\046" +
    "\206\047\204\053\214\054\043\057\127\060\126\061\113" +
    "\062\112\063\212\064\211\065\120\066\116\067\155\070" +
    "\154\071\123\072\121\074\136\075\135\077\170\100\167" +
    "\106\144\117\147\120\146\121\202\122\200\123\230\124" +
    "\227\125\174\126\173\001\001\000\004\031\u0227\001\001" +
    "\000\002\001\001\000\010\053\067\054\043\055\u023a\001" +
    "\001\000\002\001\001\000\010\053\067\054\043\055\u022c" +
    "\001\001\000\010\053\067\054\043\055\u0231\001\001\000" +
    "\002\001\001\000\150\002\111\003\110\004\176\005\107" +
    "\006\140\007\137\010\152\011\151\021\115\022\114\023" +
    "\216\024\215\025\165\026\164\030\u022e\031\225\040\106" +
    "\041\105\042\222\043\221\044\233\045\232\046\206\047" +
    "\204\053\214\054\043\057\127\060\126\061\113\062\112" +
    "\063\212\064\211\065\120\066\116\067\155\070\154\071" +
    "\123\072\121\074\136\075\135\077\170\100\167\106\144" +
    "\117\147\120\146\121\202\122\200\123\230\124\227\125" +
    "\174\126\173\001\001\000\002\001\001\000\150\002\111" +
    "\003\110\004\176\005\107\006\140\007\137\010\152\011" +
    "\151\021\115\022\114\023\216\024\215\025\165\026\164" +
    "\030\u0230\031\225\040\106\041\105\042\222\043\221\044" +
    "\233\045\232\046\206\047\204\053\214\054\043\057\127" +
    "\060\126\061\113\062\112\063\212\064\211\065\120\066" +
    "\116\067\155\070\154\071\123\072\121\074\136\075\135" +
    "\077\170\100\167\106\144\117\147\120\146\121\202\122" +
    "\200\123\230\124\227\125\174\126\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\150\002\111\003\110\004" +
    "\176\005\107\006\140\007\137\010\152\011\151\021\115" +
    "\022\114\023\216\024\215\025\165\026\164\030\u0233\031" +
    "\225\040\106\041\105\042\222\043\221\044\233\045\232" +
    "\046\206\047\204\053\214\054\043\057\127\060\126\061" +
    "\113\062\112\063\212\064\211\065\120\066\116\067\155" +
    "\070\154\071\123\072\121\074\136\075\135\077\170\100" +
    "\167\106\144\117\147\120\146\121\202\122\200\123\230" +
    "\124\227\125\174\126\173\001\001\000\002\001\001\000" +
    "\150\002\111\003\110\004\176\005\107\006\140\007\137" +
    "\010\152\011\151\021\115\022\114\023\216\024\215\025" +
    "\165\026\164\030\u0235\031\225\040\106\041\105\042\222" +
    "\043\221\044\233\045\232\046\206\047\204\053\214\054" +
    "\043\057\127\060\126\061\113\062\112\063\212\064\211" +
    "\065\120\066\116\067\155\070\154\071\123\072\121\074" +
    "\136\075\135\077\170\100\167\106\144\117\147\120\146" +
    "\121\202\122\200\123\230\124\227\125\174\126\173\001" +
    "\001\000\002\001\001\000\150\002\111\003\110\004\176" +
    "\005\107\006\140\007\137\010\152\011\151\021\115\022" +
    "\114\023\216\024\215\025\165\026\164\030\u0237\031\225" +
    "\040\106\041\105\042\222\043\221\044\233\045\232\046" +
    "\206\047\204\053\214\054\043\057\127\060\126\061\113" +
    "\062\112\063\212\064\211\065\120\066\116\067\155\070" +
    "\154\071\123\072\121\074\136\075\135\077\170\100\167" +
    "\106\144\117\147\120\146\121\202\122\200\123\230\124" +
    "\227\125\174\126\173\001\001\000\002\001\001\000\150" +
    "\002\111\003\110\004\176\005\107\006\140\007\137\010" +
    "\152\011\151\021\115\022\114\023\216\024\215\025\165" +
    "\026\164\030\u0239\031\225\040\106\041\105\042\222\043" +
    "\221\044\233\045\232\046\206\047\204\053\214\054\043" +
    "\057\127\060\126\061\113\062\112\063\212\064\211\065" +
    "\120\066\116\067\155\070\154\071\123\072\121\074\136" +
    "\075\135\077\170\100\167\106\144\117\147\120\146\121" +
    "\202\122\200\123\230\124\227\125\174\126\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\150\002\111\003" +
    "\110\004\176\005\107\006\140\007\137\010\152\011\151" +
    "\021\115\022\114\023\216\024\215\025\165\026\164\030" +
    "\u023c\031\225\040\106\041\105\042\222\043\221\044\233" +
    "\045\232\046\206\047\204\053\214\054\043\057\127\060" +
    "\126\061\113\062\112\063\212\064\211\065\120\066\116" +
    "\067\155\070\154\071\123\072\121\074\136\075\135\077" +
    "\170\100\167\106\144\117\147\120\146\121\202\122\200" +
    "\123\230\124\227\125\174\126\173\001\001\000\002\001" +
    "\001\000\150\002\111\003\110\004\176\005\107\006\140" +
    "\007\137\010\152\011\151\021\115\022\114\023\216\024" +
    "\215\025\165\026\164\030\u023e\031\225\040\106\041\105" +
    "\042\222\043\221\044\233\045\232\046\206\047\204\053" +
    "\214\054\043\057\127\060\126\061\113\062\112\063\212" +
    "\064\211\065\120\066\116\067\155\070\154\071\123\072" +
    "\121\074\136\075\135\077\170\100\167\106\144\117\147" +
    "\120\146\121\202\122\200\123\230\124\227\125\174\126" +
    "\173\001\001\000\002\001\001\000\150\002\111\003\110" +
    "\004\176\005\107\006\140\007\137\010\152\011\151\021" +
    "\115\022\114\023\216\024\215\025\165\026\164\030\u0240" +
    "\031\225\040\106\041\105\042\222\043\221\044\233\045" +
    "\232\046\206\047\204\053\214\054\043\057\127\060\126" +
    "\061\113\062\112\063\212\064\211\065\120\066\116\067" +
    "\155\070\154\071\123\072\121\074\136\075\135\077\170" +
    "\100\167\106\144\117\147\120\146\121\202\122\200\123" +
    "\230\124\227\125\174\126\173\001\001\000\002\001\001" +
    "\000\150\002\111\003\110\004\176\005\107\006\140\007" +
    "\137\010\152\011\151\021\115\022\114\023\216\024\215" +
    "\025\165\026\164\030\u0242\031\225\040\106\041\105\042" +
    "\222\043\221\044\233\045\232\046\206\047\204\053\214" +
    "\054\043\057\127\060\126\061\113\062\112\063\212\064" +
    "\211\065\120\066\116\067\155\070\154\071\123\072\121" +
    "\074\136\075\135\077\170\100\167\106\144\117\147\120" +
    "\146\121\202\122\200\123\230\124\227\125\174\126\173" +
    "\001\001\000\002\001\001\000\016\014\071\015\070\017" +
    "\u0244\053\067\054\043\055\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\150\002\111\003\110\004\176\005" +
    "\107\006\140\007\137\010\152\011\151\021\115\022\114" +
    "\023\216\024\215\025\165\026\164\030\u0247\031\225\040" +
    "\106\041\105\042\222\043\221\044\233\045\232\046\206" +
    "\047\204\053\214\054\043\057\127\060\126\061\113\062" +
    "\112\063\212\064\211\065\120\066\116\067\155\070\154" +
    "\071\123\072\121\074\136\075\135\077\170\100\167\106" +
    "\144\117\147\120\146\121\202\122\200\123\230\124\227" +
    "\125\174\126\173\001\001\000\002\001\001\000\150\002" +
    "\111\003\110\004\176\005\107\006\140\007\137\010\152" +
    "\011\151\021\115\022\114\023\216\024\215\025\165\026" +
    "\164\030\u0249\031\225\040\106\041\105\042\222\043\221" +
    "\044\233\045\232\046\206\047\204\053\214\054\043\057" +
    "\127\060\126\061\113\062\112\063\212\064\211\065\120" +
    "\066\116\067\155\070\154\071\123\072\121\074\136\075" +
    "\135\077\170\100\167\106\144\117\147\120\146\121\202" +
    "\122\200\123\230\124\227\125\174\126\173\001\001\000" +
    "\002\001\001\000\002\001\001\000\150\002\111\003\110" +
    "\004\176\005\107\006\140\007\137\010\152\011\151\021" +
    "\115\022\114\023\216\024\215\025\165\026\164\030\u024c" +
    "\031\225\040\106\041\105\042\222\043\221\044\233\045" +
    "\232\046\206\047\204\053\214\054\043\057\127\060\126" +
    "\061\113\062\112\063\212\064\211\065\120\066\116\067" +
    "\155\070\154\071\123\072\121\074\136\075\135\077\170" +
    "\100\167\106\144\117\147\120\146\121\202\122\200\123" +
    "\230\124\227\125\174\126\173\001\001\000\002\001\001" +
    "\000\150\002\111\003\110\004\176\005\107\006\140\007" +
    "\137\010\152\011\151\021\115\022\114\023\216\024\215" +
    "\025\165\026\164\030\u024e\031\225\040\106\041\105\042" +
    "\222\043\221\044\233\045\232\046\206\047\204\053\214" +
    "\054\043\057\127\060\126\061\113\062\112\063\212\064" +
    "\211\065\120\066\116\067\155\070\154\071\123\072\121" +
    "\074\136\075\135\077\170\100\167\106\144\117\147\120" +
    "\146\121\202\122\200\123\230\124\227\125\174\126\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\150\002" +
    "\111\003\110\004\176\005\107\006\140\007\137\010\152" +
    "\011\151\021\115\022\114\023\216\024\215\025\165\026" +
    "\164\030\u0251\031\225\040\106\041\105\042\222\043\221" +
    "\044\233\045\232\046\206\047\204\053\214\054\043\057" +
    "\127\060\126\061\113\062\112\063\212\064\211\065\120" +
    "\066\116\067\155\070\154\071\123\072\121\074\136\075" +
    "\135\077\170\100\167\106\144\117\147\120\146\121\202" +
    "\122\200\123\230\124\227\125\174\126\173\001\001\000" +
    "\002\001\001\000\150\002\111\003\110\004\176\005\107" +
    "\006\140\007\137\010\152\011\151\021\115\022\114\023" +
    "\216\024\215\025\165\026\164\030\u0253\031\225\040\106" +
    "\041\105\042\222\043\221\044\233\045\232\046\206\047" +
    "\204\053\214\054\043\057\127\060\126\061\113\062\112" +
    "\063\212\064\211\065\120\066\116\067\155\070\154\071" +
    "\123\072\121\074\136\075\135\077\170\100\167\106\144" +
    "\117\147\120\146\121\202\122\200\123\230\124\227\125" +
    "\174\126\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\150\002\111\003\110\004\176\005" +
    "\107\006\140\007\137\010\152\011\151\021\115\022\114" +
    "\023\216\024\215\025\165\026\164\030\u0257\031\225\040" +
    "\106\041\105\042\222\043\221\044\233\045\232\046\206" +
    "\047\204\053\214\054\043\057\127\060\126\061\113\062" +
    "\112\063\212\064\211\065\120\066\116\067\155\070\154" +
    "\071\123\072\121\074\136\075\135\077\170\100\167\106" +
    "\144\117\147\120\146\121\202\122\200\123\230\124\227" +
    "\125\174\126\173\001\001\000\004\031\u0258\001\001\000" +
    "\002\001\001\000\004\031\u025a\001\001\000\002\001\001" +
    "\000\150\002\111\003\110\004\176\005\107\006\140\007" +
    "\137\010\152\011\151\021\115\022\114\023\216\024\215" +
    "\025\165\026\164\030\u0268\031\225\040\106\041\105\042" +
    "\222\043\221\044\233\045\232\046\206\047\204\053\214" +
    "\054\043\057\127\060\126\061\113\062\112\063\212\064" +
    "\211\065\120\066\116\067\155\070\154\071\123\072\121" +
    "\074\136\075\135\077\170\100\167\106\144\117\147\120" +
    "\146\121\202\122\200\123\230\124\227\125\174\126\173" +
    "\001\001\000\016\014\071\015\070\017\u0263\053\067\054" +
    "\043\055\072\001\001\000\016\014\071\015\070\017\u025e" +
    "\053\067\054\043\055\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\150\002\111\003\110\004\176\005\107" +
    "\006\140\007\137\010\152\011\151\021\115\022\114\023" +
    "\216\024\215\025\165\026\164\030\u0261\031\225\040\106" +
    "\041\105\042\222\043\221\044\233\045\232\046\206\047" +
    "\204\053\214\054\043\057\127\060\126\061\113\062\112" +
    "\063\212\064\211\065\120\066\116\067\155\070\154\071" +
    "\123\072\121\074\136\075\135\077\170\100\167\106\144" +
    "\117\147\120\146\121\202\122\200\123\230\124\227\125" +
    "\174\126\173\001\001\000\004\031\u0262\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\150\002" +
    "\111\003\110\004\176\005\107\006\140\007\137\010\152" +
    "\011\151\021\115\022\114\023\216\024\215\025\165\026" +
    "\164\030\u0266\031\225\040\106\041\105\042\222\043\221" +
    "\044\233\045\232\046\206\047\204\053\214\054\043\057" +
    "\127\060\126\061\113\062\112\063\212\064\211\065\120" +
    "\066\116\067\155\070\154\071\123\072\121\074\136\075" +
    "\135\077\170\100\167\106\144\117\147\120\146\121\202" +
    "\122\200\123\230\124\227\125\174\126\173\001\001\000" +
    "\004\031\u0267\001\001\000\002\001\001\000\004\031\u0269" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\053" +
    "\u0275\054\043\001\001\000\014\053\214\054\043\106\u026f" +
    "\107\u026e\110\u026d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\053\214\054\043\106\u0271" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\053" +
    "\u0274\054\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\u0283\001\001\000\002\001\001\000\006\053" +
    "\u0279\054\043\001\001\000\004\031\u027a\001\001\000\002" +
    "\001\001\000\016\014\071\015\070\017\u0280\053\067\054" +
    "\043\055\072\001\001\000\016\014\071\015\070\017\u027d" +
    "\053\067\054\043\055\072\001\001\000\002\001\001\000" +
    "\004\031\u027f\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\u0282\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\014\071\015\070\017\u0289\053\067\054\043" +
    "\055\072\001\001\000\016\014\071\015\070\017\u0286\053" +
    "\067\054\043\055\072\001\001\000\002\001\001\000\004" +
    "\031\u0288\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\u028b\001\001\000\002\001\001\000\006\031\u028f" +
    "\052\u028e\001\001\000\150\002\111\003\110\004\176\005" +
    "\107\006\140\007\137\010\152\011\151\021\115\022\114" +
    "\023\216\024\215\025\165\026\164\030\u029c\031\225\040" +
    "\106\041\105\042\222\043\221\044\233\045\232\046\206" +
    "\047\204\053\214\054\043\057\127\060\126\061\113\062" +
    "\112\063\212\064\211\065\120\066\116\067\155\070\154" +
    "\071\123\072\121\074\136\075\135\077\170\100\167\106" +
    "\144\117\147\120\146\121\202\122\200\123\230\124\227" +
    "\125\174\126\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\053\067\054\043\055\u0298\001\001\000\010" +
    "\053\067\054\043\055\u0292\001\001\000\002\001\001\000" +
    "\006\031\u028f\052\u0294\001\001\000\002\001\001\000\006" +
    "\031\u028f\052\u0296\001\001\000\002\001\001\000\006\031" +
    "\u028f\052\u029b\001\001\000\002\001\001\000\006\031\u028f" +
    "\052\u029a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\053\067\054\043" +
    "\055\u029f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u02a3\001\001\000\010\031\u02a5" +
    "\053\u02a4\054\043\001\001\000\012\031\u02cd\053\u02cc\054" +
    "\043\101\u02ce\001\001\000\004\101\u02a6\001\001\000\004" +
    "\027\u02c9\001\001\000\010\114\u02a9\115\u02ac\116\u02aa\001" +
    "\001\000\002\001\001\000\006\053\u02bb\054\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\114\u02a9\115\u02ac\116\u02b4\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\114\u02a9\115\u02b7\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\101\u02d2\001\001\000\004\101\u02d0" +
    "\001\001\000\004\027\u02cf\001\001\000\002\001\001\000" +
    "\004\027\u02d1\001\001\000\002\001\001\000\004\027\u02d3" +
    "\001\001\000\002\001\001\000\004\103\u02d8\001\001\000" +
    "\012\053\214\054\043\106\u02df\111\u02e3\001\001\000\010" +
    "\053\214\054\043\106\u02e2\001\001\000\012\053\214\054" +
    "\043\106\u02df\111\u02de\001\001\000\002\001\001\000\016" +
    "\014\071\015\070\017\u02da\053\067\054\043\055\072\001" +
    "\001\000\002\001\001\000\006\031\u02dd\032\u02dc\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\053\214\054\043\106\u02e1\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\053\u02e6\054\043\056\u02e8\001\001" +
    "\000\002\001\001\000\006\053\u02ee\054\043\001\001\000" +
    "\002\001\001\000\006\053\u02eb\054\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\053\u02ed\054\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\u02f5\001\001\000\004\031" +
    "\u02f4\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\031\u02fb\053\u02fa\054\043\101\u02fc\001" +
    "\001\000\004\101\u02f8\001\001\000\004\027\u02f9\001\001" +
    "\000\002\001\001\000\004\101\u0300\001\001\000\004\101" +
    "\u02fe\001\001\000\004\027\u02fd\001\001\000\002\001\001" +
    "\000\004\027\u02ff\001\001\000\002\001\001\000\004\027" +
    "\u0301\001\001\000\002\001\001\000\004\031\u0306\001\001" +
    "\000\004\031\u0305\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public CompModule alloymodule=null;

  @Override public Symbol parse() throws java.lang.Exception {
     int act; // current action code
     Symbol lhs_sym = null; // the Symbol/stack element returned by a reduce
     short handle_size, lhs_sym_num; // information about production being reduced with
     boolean logging = "yes".equals(System.getProperty("debug"));
     production_tab = production_table();
     action_tab     = action_table();
     reduce_tab     = reduce_table();
     init_actions();
     user_init();
     // start
     cur_token = scan();
     stack.removeAllElements();
     stack.push(getSymbolFactory().startSymbol("START", 0, start_state()));
     tos = 0;
     for (_done_parsing = false; !_done_parsing; ) {
        act = get_action(((Symbol)stack.peek()).parse_state, cur_token.sym);
        if (act > 0) { // "shift"; thus, we shift to the encoded state by pushing it on the stack
           if (logging) System.out.println("shift " + cur_token.sym);
           cur_token.parse_state = act-1;
           stack.push(cur_token);
           tos++;
           cur_token = scan();
        } else if (act<0) { // "reduce"
           if (logging) System.out.println("reduce " + ((-act)-1));
           lhs_sym = do_action((-act)-1, this, stack, tos);
           lhs_sym_num = production_tab[(-act)-1][0];
           handle_size = production_tab[(-act)-1][1];
           for (int i = 0; i < handle_size; i++)  {  stack.pop(); tos--; }
           act = get_reduce(((Symbol)stack.peek()).parse_state, lhs_sym_num);
           lhs_sym.parse_state = act;
           stack.push(lhs_sym);
           tos++;
        } else { // "error"
           if (logging) System.out.println("error");
           syntax_error(cur_token);
           done_parsing();
        }
     }
     return lhs_sym;
  }

  public void syntax_error(Symbol x) throws Err {
    Map<Integer,String> ch = new LinkedHashMap<Integer,String>();
    ch.put(CompSym.ARROW, "->");
    ch.put(CompSym.ANY_ARROW_SOME, "->");
    ch.put(CompSym.ANY_ARROW_ONE, "->");
    ch.put(CompSym.ANY_ARROW_LONE, "->");
    ch.put(CompSym.SOME_ARROW_ANY, "some");
    ch.put(CompSym.SOME_ARROW_SOME, "some");
    ch.put(CompSym.SOME_ARROW_ONE, "some");
    ch.put(CompSym.SOME_ARROW_LONE, "some");
    ch.put(CompSym.ONE_ARROW_ANY, "one");
    ch.put(CompSym.ONE_ARROW_SOME, "one");
    ch.put(CompSym.ONE_ARROW_ONE, "one");
    ch.put(CompSym.ONE_ARROW_LONE, "one");
    ch.put(CompSym.LONE_ARROW_ANY, "lone");
    ch.put(CompSym.LONE_ARROW_SOME, "lone");
    ch.put(CompSym.LONE_ARROW_ONE, "lone");
    ch.put(CompSym.LONE_ARROW_LONE, "lone");
    ch.put(CompSym.INTADD, "fun");
    ch.put(CompSym.INTSUB, "fun");
    ch.put(CompSym.INTMUL, "fun");
    ch.put(CompSym.INTDIV, "fun");
    ch.put(CompSym.INTREM, "fun");
    ch.put(CompSym.INTMIN, "fun");
    ch.put(CompSym.INTMAX, "fun");
    ch.put(CompSym.INTNEXT, "fun");
    ch.put(CompSym.TOTALORDER, "pred");
    ch.put(CompSym.ABSTRACT, "abstract");
    ch.put(CompSym.ALL, "all");
    ch.put(CompSym.ALL2, "all");
    ch.put(CompSym.AMPERSAND, "&");
    ch.put(CompSym.AND, "&&");
    ch.put(CompSym.AS, "as");
    ch.put(CompSym.ASSERT, "assert");
    ch.put(CompSym.AT, "@");
    ch.put(CompSym.BAR, "|");
    ch.put(CompSym.BUT, "but");
    ch.put(CompSym.CARET, "^");
    ch.put(CompSym.CHECK, "check");
    ch.put(CompSym.COLON, ":");
    ch.put(CompSym.COMMA, ", ");
    ch.put(CompSym.DISJ, "disj");
    ch.put(CompSym.DOMAIN, "<:");
    ch.put(CompSym.DOT, ".");
    ch.put(CompSym.ELSE, "else");
    ch.put(CompSym.ENUM, "enum");
    ch.put(CompSym.EQUALS, "=");
    ch.put(CompSym.EXACTLY, "exactly");
    ch.put(CompSym.EXH, "exh");
    ch.put(CompSym.EXPECT, "expect");
    ch.put(CompSym.EXTENDS, "extends");
    ch.put(CompSym.FACT, "fact");
    ch.put(CompSym.FOR, "for");
    ch.put(CompSym.FUN, "fun");
    ch.put(CompSym.GT, ">");
    ch.put(CompSym.GTE, ">=");
    ch.put(CompSym.HASH, "#");
    ch.put(CompSym.IDEN, "iden");
    ch.put(CompSym.IFF, "iff");
    ch.put(CompSym.IMPLIES, "=>");
    ch.put(CompSym.IN, "in");
    ch.put(CompSym.INT, "int");
    ch.put(CompSym.LBRACE, "{");
    ch.put(CompSym.LBRACKET, "[");
    ch.put(CompSym.LET, "let");
    ch.put(CompSym.LONE2, "lone");
    ch.put(CompSym.LONE, "lone");
    ch.put(CompSym.LPAREN, "(");
    ch.put(CompSym.LT, "<");
    ch.put(CompSym.LTE, "<=");
    ch.put(CompSym.MINUS, "-");
    ch.put(CompSym.MODULE, "module");
    ch.put(CompSym.NO2, "no");
    ch.put(CompSym.NO, "no");
    ch.put(CompSym.NONE, "none");
    ch.put(CompSym.NOT, "!");
    ch.put(CompSym.NOTEQUALS, "!");
    ch.put(CompSym.NOTGT, "!");
    ch.put(CompSym.NOTGTE, "!");
    ch.put(CompSym.NOTIN, "!");
    ch.put(CompSym.NOTLT, "!");
    ch.put(CompSym.NOTLTE, "!");
    ch.put(CompSym.ONE2, "one");
    ch.put(CompSym.ONE, "one");
    ch.put(CompSym.VAR, "var");                       // [HASLab] variable tokens
    ch.put(CompSym.ALWAYS, "always");                 // [HASLab] ltl tokens
    ch.put(CompSym.EVENTUALLY, "eventually");         // [HASLab] ltl tokens
    ch.put(CompSym.AFTER, "after");                   // [HASLab] ltl tokens
    ch.put(CompSym.PREVIOUS, "previous");             // [HASLab] ltl tokens
    ch.put(CompSym.HISTORICALLY, "historically");     // [HASLab] ltl tokens
    ch.put(CompSym.ONCE, "once");                     // [HASLab] ltl tokens
    ch.put(CompSym.RELEASE, "release");               // [HASLab] ltl tokens
    ch.put(CompSym.UNTIL, "until");                   // [HASLab] ltl tokens
    ch.put(CompSym.SINCE, "since");                   // [HASLab] ltl tokens
    ch.put(CompSym.TRCSEQ, ";");	   	                 // [HASLab] ltl tokens
    ch.put(CompSym.OPEN, "open");
    ch.put(CompSym.OR, "||");
    ch.put(CompSym.PART, "part");
    ch.put(CompSym.PLUS, "+");
    ch.put(CompSym.PLUSPLUS, "++");
    ch.put(CompSym.PRED, "pred");
    ch.put(CompSym.PRIVATE, "private");
    ch.put(CompSym.RANGE, ":>");
    ch.put(CompSym.RBRACE, "}");
    ch.put(CompSym.RBRACKET, "]");
    ch.put(CompSym.RPAREN, ")");
    ch.put(CompSym.RUN, "run");
    ch.put(CompSym.SEQ, "seq");
    ch.put(CompSym.SET, "set");
    ch.put(CompSym.SHL, "<<");
    ch.put(CompSym.SHR, ">>>");
    ch.put(CompSym.SHA, ">>");
    ch.put(CompSym.SIG, "sig");
    ch.put(CompSym.SIGINT, "Int");
    ch.put(CompSym.SLASH, "/");
    ch.put(CompSym.SOME2, "some");
    ch.put(CompSym.SOME, "some");
    ch.put(CompSym.STAR, "*");
    ch.put(CompSym.STRING, "String");
    ch.put(CompSym.SUM2, "sum");
    ch.put(CompSym.SUM, "sum");
    ch.put(CompSym.THIS, "this");
    ch.put(CompSym.TILDE, "~");
    ch.put(CompSym.UNIV, "univ");
    ch.put(CompSym.ID, "NAME");
    ch.put(CompSym.PRIME, "'"); // [HASLab] ltl tokens
    ch.put(CompSym.NUMBER, "NUMBER");
    ch.put(CompSym.STR, "STRING");
    ch.put(CompSym.TIME, "Time"); // [HASLab]
    TreeSet<String> list = new TreeSet<String>();
    Pos p=Pos.UNKNOWN;
    if (x!=null && x.value instanceof Pos) p=(Pos)(x.value);
       else if (x!=null && x.value instanceof Expr) p=((Expr)(x.value)).pos;
       else if (x!=null) p=x.pos;
    if (!stack.empty()) for(Map.Entry<Integer,String> e:ch.entrySet()) {
        int key=e.getKey(), act=get_action(((Symbol)stack.peek()).parse_state, key);
        if (act==0) continue;
        try {
            if (act>0 || alloy_confirm(key)) list.add(e.getValue());
        } catch(Throwable ex) {
            // If the parser is really really confused, alloy_confirm() could fail with array out-of-bound exception, etc.
        }
    }
    String result="There are "+list.size()+" possible tokens that can appear here:\n";
    for(String item:list) result=result+item+" ";
    throw new ErrorSyntax(p, (list.size()!=0)?result:"");
  }

  private boolean alloy_confirm(int key) {
    int state = ((Symbol)stack.peek()).parse_state;
    Stack<Object> newstack=new Stack<Object>(); for(Object x:stack) newstack.push(x);
    while(true) {
      int act = get_action(state, key);
      if (act>0) return true;
      if (act==0) return false;
      int lhs_sym_num = production_tab[(-act)-1][0];
      int handle_size = production_tab[(-act)-1][1];
      for (int i = 0; i < handle_size; i++) { if (newstack.empty()) return false; newstack.pop(); }
      if (newstack.empty()) return false;
      if (newstack.peek() instanceof Symbol) state=((Symbol)newstack.peek()).parse_state;
      state=get_reduce(state, lhs_sym_num);
      newstack.push(null);
    }
  }

  static CompModule alloy_parseStream (List<Object> seenDollar,
  Map<String,String> loaded, Map<String,String> fc, CompModule root,
  int lineOffset, String filename, String prefix, int initialResolutionMode) throws Err, FileNotFoundException, IOException {
    Reader isr=null;
    try {
        if (root==null && prefix.length()!=0) throw new ErrorFatal("Internal error (parse subfile with root==null)");
        if (root!=null && prefix.length()==0) throw new ErrorFatal("Internal error (parse topfile with root!=null)");
        CompModule u = new CompModule(root, filename, prefix);
        if (root == null)
            u.addOpen(null, null, ExprVar.make(null, "util/integer"), null, ExprVar.make(null, "integer"));
        u.resolution = initialResolutionMode;
        String content = fc!=null ? fc.get(filename) : null;
        if (content==null && loaded!=null) content = loaded.get(filename);
        if (content==null) content = Util.readAll(filename);
        if (loaded!=null) loaded.put(filename,content);
        content = Util.convertLineBreak(content);
        isr = new StringReader(content);
        CompFilter s = new CompFilter(u, seenDollar, filename, lineOffset, new BufferedReader(isr));
        CompParser p = new CompParser(s);
        p.alloymodule=u;
        try {p.parse();} catch(Throwable ex) {if (ex instanceof Err) throw (Err)ex; throw new ErrorFatal("Parser Exception", ex);}
        // if no sigs are defined by the user, add one
        if (root == null && u.getAllSigs().isEmpty()) {
            u.addGhostSig(); 
        }
        return u;
    } finally {
        Util.close(isr);
    }
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CompParser$actions {


    /** This function is needed to handle a difficult parsing ambiguity.
     *
     * <p>
     * "some EXPR", "one EXPR", and "lone EXPR"
     * can be either formulas (saying the EXPR has at least 1, exactly 1, or at most 1 tuple),
     * or multiplicity constraints (saying something else has this multiplicity).
     *
     * <p>
     * So we let the parser generate the former by default.
     * And whenever we construct a Decl "x: y" object,
     * or an binary expression "x in y", or a function return type,
     * we call this method on y to convert it into a multiplicity constraint.
     *
     * <p>
     * This is safe, because in all 3 cases, a formula would be illegal.
     * So the first form is always wrong.
     *
     * <p>
     * And this is sufficient, because those are the only 3 places
     * where a mulitplicity constraint is allowed to appear.
     *
     * @return a newly formed multiplciity constraint (if this.op==SOME or LONE or ONE),
     * otherwise it just returns the original node.
     */
    private Expr mult(Expr x) throws Err {
        if (x instanceof ExprUnary) {
           ExprUnary y=(ExprUnary)x;
           if (y.op==ExprUnary.Op.SOME) return ExprUnary.Op.SOMEOF.make(y.pos, y.sub);
           if (y.op==ExprUnary.Op.LONE) return ExprUnary.Op.LONEOF.make(y.pos, y.sub);
           if (y.op==ExprUnary.Op.ONE)  return ExprUnary.Op.ONEOF.make(y.pos, y.sub);
        }
        return x;
    }
    private void nod(ExprVar name) throws Err {
        if (name.label.indexOf('$')>=0) throw new ErrorSyntax(name.pos, "The name cannot contain the '$' symbol.");
    }
    private void nod(List<ExprVar> names) throws Err {
        if (names!=null) for(ExprVar n:names) if (n!=null && n.label.indexOf('$')>=0) throw new ErrorSyntax(n.pos, "The name cannot contain the '$' symbol.");
    }
    // [HASLab] extended with time scopes
    private void c(boolean follow, ExprVar o, ExprVar x, ExprVar n, Expr e, List<CommandScope> s, ExprConstant c) throws Err {
        if (n!=null) nod(n);
        int bitwidth=(-1), maxseq=(-1), overall=(-1), expects=(c==null ? -1 : c.num); 
        int maxtime = (-1), mintime = (-1); // [HASLab]
        Pos p = o.pos.merge(n!=null ? n.span() : e.span());
        for(int i=s.size()-1; i>=0; i--) {
          Sig j=s.get(i).sig;  int k=s.get(i).startingScope;
          p=p.merge(j.pos);
          if (j.label.equals("univ")) { overall=k; s.remove(i); continue; }
          if (j.label.equals("int"))  { if (bitwidth>=0) throw new ErrorSyntax(j.pos, "The bitwidth cannot be specified more than once."); bitwidth=k; s.remove(i); continue; }
          if (j.label.equals("seq"))  { if (maxseq>=0) throw new ErrorSyntax(j.pos, "The maximum sequence length cannot be specified more than once."); maxseq=k; s.remove(i); continue; }
          if (j.label.equals("Time")) { // [HASLab]
        	  	if (maxtime>=0) throw new ErrorSyntax(j.pos, "The time cannot be specified more than once."); 
        	  	maxtime=k; 
        	  	if (s.get(i).isExact) mintime = k; 
        	  	else if (s.get(i).endingScope == s.get(i).startingScope) mintime = 1;
        	  	else { maxtime = s.get(i).endingScope; mintime = s.get(i).startingScope; }
        	  	s.remove(i); continue; 
        	  }
        }
        if (n!=null)
          parser.alloymodule.addCommand(follow, p, n.label, o.label.equals("c"), overall, bitwidth, maxseq, mintime, maxtime, expects, s, x); // [HASLab]
        else
          parser.alloymodule.addCommand(follow, p, e,       o.label.equals("c"), overall, bitwidth, maxseq, mintime, maxtime, expects, s, x); // [HASLab]
    }
    private Expr t(Pos pos, Pos oldClosing, Expr left, Expr right, Pos close) throws Err {
      if (right instanceof ExprVar) {
         String n = ((ExprVar)right).label;
         if (n.equals("int"))             return ExprUnary.Op.CAST2INT.make(pos, left);
         if (n.equals("disj"))            return ExprList.makeDISJOINT(pos, close, Util.asList(left));
         if (n.equals("pred/totalOrder")) return ExprList.makeTOTALORDER(pos, close, Util.asList(left));
      }
      else if (right instanceof ExprList) {
         return ((ExprList)right).addArg(left);
      }
      return ExprBadJoin.make(pos, oldClosing, left, right);
    }

  private final CompParser parser;

  /** Constructor */
  CUP$CompParser$actions(CompParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompParser$do_action(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack            CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompParser$result;

      /* select the action based on the action number */
      switch (CUP$CompParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // BaseExpr ::= LBRACE Declz RBRACE 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.COMPREHENSION.make(o, c, a, ExprConstant.TRUE); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // BaseExpr ::= LBRACE Declz SuperOrBar RBRACE 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.COMPREHENSION.make(o, c, a, b);                 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // BaseExpr ::= Super 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // BaseExpr ::= AT Name 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(x); RESULT = ExprVar.make(o.merge(x.pos), "@"+x.label);        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // BaseExpr ::= SigRef 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // BaseExpr ::= LPAREN Expr RPAREN 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // BaseExpr ::= INTNEXT 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprConstant.Op.NEXT.make(o, 0);                          
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // BaseExpr ::= INTMAX 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprConstant.Op.MAX.make(o, 0);                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // BaseExpr ::= INTMIN 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprConstant.Op.MIN.make(o, 0);                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // BaseExpr ::= THIS 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprVar.make(o, "this");                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // BaseExpr ::= IDEN 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprVar.make(o, "iden");                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // BaseExpr ::= STR 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant x = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // BaseExpr ::= NUMBER 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant x = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // UnopExprB ::= UnopExprB PRIME 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.PRIME.make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",84, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // UnopExprA ::= UnopExprA PRIME 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.PRIME.make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",83, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // UnopExprA ::= Bind PRIME 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.PRIME.make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",83, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // UnopExprB ::= CARET UnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CLOSURE  .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",84, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // UnopExprB ::= STAR UnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.RCLOSURE .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",84, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // UnopExprB ::= TILDE UnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.TRANSPOSE.make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",84, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // UnopExprB ::= BaseExpr 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",84, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // UnopExprA ::= CARET UnopExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CLOSURE  .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",83, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // UnopExprA ::= STAR UnopExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.RCLOSURE .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",83, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // UnopExprA ::= TILDE UnopExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.TRANSPOSE.make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",83, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // UnopExprA ::= CARET Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CLOSURE  .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",83, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // UnopExprA ::= STAR Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.RCLOSURE .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",83, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // UnopExprA ::= TILDE Bind 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.TRANSPOSE.make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",83, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // DotExprB ::= BracketExprB DOT SUM 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, a)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // DotExprB ::= BracketExprB DOT INT 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, a)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // DotExprB ::= BracketExprB DOT TOTALORDER 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=t(o, null, a, ExprVar.make(b, "pred/totalOrder"), null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // DotExprB ::= BracketExprB DOT DISJ 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=t(o, null, a, ExprVar.make(b, "disj"),            null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // DotExprB ::= BracketExprB DOT UnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=t(o, null, a, b,                                  null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // DotExprB ::= UnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // DotExprA ::= BracketExprB DOT Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=t(o, null, a, b,                                  null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprA",17, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // DotExprA ::= UnopExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprA",17, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // BracketExprB ::= SUM LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=ExprVar.make(a, "int");             for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=ExprUnary.Op.CAST2SIGINT.make(a, aa); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // BracketExprB ::= INT LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=ExprVar.make(a, "int");             for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=ExprUnary.Op.CAST2SIGINT.make(a, aa); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // BracketExprB ::= TOTALORDER LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=ExprVar.make(a, "pred/totalOrder"); for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=aa; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // BracketExprB ::= DISJ LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=ExprVar.make(a, "disj");            for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=aa; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // BracketExprB ::= BracketExprB LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=a;                                  for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=aa; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // BracketExprB ::= DotExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                                                                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // BracketExprA ::= DotExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                                                                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprA",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // RangeExprB ::= RangeExprB RANGE BracketExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.RANGE.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprB",59, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // RangeExprB ::= BracketExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprB",59, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // RangeExprA ::= RangeExprB RANGE Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.RANGE.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprA",58, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // RangeExprA ::= BracketExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprA",58, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // DomainExprB ::= DomainExprB DOMAIN RangeExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.DOMAIN.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprB",16, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // DomainExprB ::= RangeExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprB",16, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // DomainExprA ::= DomainExprB DOMAIN Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.DOMAIN.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprA",15, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // DomainExprA ::= RangeExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprA",15, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // RelationExprB ::= DomainExprB RelOp RelationExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pair<Pos,ExprBinary.Op> o = (Pair<Pos,ExprBinary.Op>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=o.b.make(o.a, null, a, b);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprB",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // RelationExprB ::= DomainExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                          
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprB",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // RelationExprA ::= DomainExprB RelOp Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pair<Pos,ExprBinary.Op> o = (Pair<Pos,ExprBinary.Op>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=o.b.make(o.a, null, a, b);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprA",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // RelationExprA ::= DomainExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                          
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprA",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // RelOp ::= LONE_ARROW_LONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_LONE); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // RelOp ::= LONE_ARROW_ONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_ONE ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // RelOp ::= LONE_ARROW_SOME 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_SOME); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // RelOp ::= LONE_ARROW_ANY 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_ANY ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // RelOp ::= ONE_ARROW_LONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_LONE ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // RelOp ::= ONE_ARROW_ONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_ONE  ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // RelOp ::= ONE_ARROW_SOME 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_SOME ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // RelOp ::= ONE_ARROW_ANY 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_ANY  ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // RelOp ::= SOME_ARROW_LONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_LONE); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // RelOp ::= SOME_ARROW_ONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_ONE ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // RelOp ::= SOME_ARROW_SOME 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_SOME); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // RelOp ::= SOME_ARROW_ANY 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_ANY ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // RelOp ::= ANY_ARROW_LONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ANY_ARROW_LONE ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // RelOp ::= ANY_ARROW_ONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ANY_ARROW_ONE  ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // RelOp ::= ANY_ARROW_SOME 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ANY_ARROW_SOME ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // RelOp ::= ARROW 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ARROW          ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // IntersectExprB ::= IntersectExprB AMPERSAND RelationExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.INTERSECT.make(o, null, a, b);     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprB",37, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // IntersectExprB ::= RelationExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprB",37, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // IntersectExprA ::= IntersectExprB AMPERSAND Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.INTERSECT.make(o, null, a, b);     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprA",36, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // IntersectExprA ::= RelationExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprA",36, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // OverrideExprB ::= OverrideExprB PLUSPLUS IntersectExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.PLUSPLUS.make(o, null, a, b);      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprB",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // OverrideExprB ::= IntersectExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprB",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // OverrideExprA ::= OverrideExprB PLUSPLUS Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.PLUSPLUS.make(o, null, a, b);      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprA",55, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // OverrideExprA ::= IntersectExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprA",55, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // NumUnopExprB ::= INT NumUnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",52, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // NumUnopExprB ::= SUM NumUnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",52, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // NumUnopExprB ::= HASH NumUnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CARDINALITY.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",52, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // NumUnopExprB ::= OverrideExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",52, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // NumUnopExprA ::= INT NumUnopExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",51, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // NumUnopExprA ::= SUM NumUnopExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",51, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // NumUnopExprA ::= HASH NumUnopExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CARDINALITY.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",51, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // NumUnopExprA ::= INT Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",51, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // NumUnopExprA ::= SUM Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",51, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // NumUnopExprA ::= HASH Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CARDINALITY.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",51, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // NumUnopExprA ::= OverrideExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",51, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // MulExprB ::= MulExprB INTREM NumUnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.REM       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",80, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // MulExprB ::= MulExprB INTDIV NumUnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.DIV       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",80, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // MulExprB ::= MulExprB INTMUL NumUnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.MUL       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",80, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // MulExprB ::= NumUnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                            
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",80, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // MulExprA ::= MulExprB INTREM Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.REM       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // MulExprA ::= MulExprB INTDIV Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.DIV       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // MulExprA ::= MulExprB INTMUL Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.MUL       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // MulExprA ::= NumUnopExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                            
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // UnionDiffExprB ::= UnionDiffExprB INTSUB MulExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IMINUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",82, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // UnionDiffExprB ::= UnionDiffExprB INTADD MulExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IPLUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",82, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // UnionDiffExprB ::= UnionDiffExprB MINUS MulExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.MINUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",82, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // UnionDiffExprB ::= UnionDiffExprB PLUS MulExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.PLUS .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",82, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // UnionDiffExprB ::= MulExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",82, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // UnionDiffExprA ::= UnionDiffExprB INTSUB Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IMINUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",81, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // UnionDiffExprA ::= UnionDiffExprB INTADD Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IPLUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",81, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // UnionDiffExprA ::= UnionDiffExprB MINUS Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.MINUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",81, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // UnionDiffExprA ::= UnionDiffExprB PLUS Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.PLUS .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",81, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // UnionDiffExprA ::= MulExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",81, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // ShiftExprB ::= ShiftExprB SHA UnionDiffExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHA.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",78, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // ShiftExprB ::= ShiftExprB SHR UnionDiffExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",78, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // ShiftExprB ::= ShiftExprB SHL UnionDiffExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHL.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",78, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // ShiftExprB ::= UnionDiffExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",78, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // ShiftExprA ::= ShiftExprB SHA Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHA.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",77, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // ShiftExprA ::= ShiftExprB SHR Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",77, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // ShiftExprA ::= ShiftExprB SHL Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHL.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",77, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // ShiftExprA ::= UnionDiffExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",77, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // CompareExprB ::= ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // CompareExprB ::= SEQ ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.ISSEQ_ARROW_LONE.make(o, null, ExprVar.make(o,"seq/Int"), b); parser.alloymodule.addSeq(o); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // CompareExprB ::= SET ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.SETOF.make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // CompareExprB ::= ONE ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.ONE  .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // CompareExprB ::= LONE ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.LONE .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // CompareExprB ::= SOME ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.SOME .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // CompareExprB ::= NO ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NO   .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // CompareExprB ::= ALL ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(o,"The \"all x\" construct is no longer supported. If you know the range of possible values of x, consider rewriting it as \"x == set_of_all_possible_values\"."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // CompareExprB ::= CompareExprB NOTGTE ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_GTE   .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // CompareExprB ::= CompareExprB NOTLTE ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_LTE   .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // CompareExprB ::= CompareExprB NOTGT ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_GT    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // CompareExprB ::= CompareExprB NOTLT ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_LT    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // CompareExprB ::= CompareExprB NOTEQUALS ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_EQUALS.make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // CompareExprB ::= CompareExprB NOTIN ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_IN    .make(o, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // CompareExprB ::= CompareExprB GTE ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.GTE       .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // CompareExprB ::= CompareExprB LTE ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LTE       .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // CompareExprB ::= CompareExprB GT ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.GT        .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // CompareExprB ::= CompareExprB LT ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LT        .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // CompareExprB ::= CompareExprB EQUALS ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.EQUALS    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // CompareExprB ::= CompareExprB IN ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IN        .make(o, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // CompareExprA ::= ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // CompareExprA ::= SEQ ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.ISSEQ_ARROW_LONE.make(o, null, ExprVar.make(o, "seq/Int"), b); parser.alloymodule.addSeq(o); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // CompareExprA ::= SET ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.SETOF.make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // CompareExprA ::= ONE ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.ONE  .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // CompareExprA ::= LONE ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.LONE .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // CompareExprA ::= SOME ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.SOME .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // CompareExprA ::= NO ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NO   .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // CompareExprA ::= ALL ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(o,"The \"all x\" construct is no longer supported. If you know the range of possible values of x, consider rewriting it as \"x == set_of_all_possible_values\"."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // CompareExprA ::= CompareExprB NOTGTE ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_GTE   .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // CompareExprA ::= CompareExprB NOTLTE ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_LTE   .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // CompareExprA ::= CompareExprB NOTGT ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_GT    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // CompareExprA ::= CompareExprB NOTLT ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_LT    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // CompareExprA ::= CompareExprB NOTEQUALS ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_EQUALS.make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // CompareExprA ::= CompareExprB NOTIN ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_IN    .make(o, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // CompareExprA ::= CompareExprB GTE ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.GTE       .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // CompareExprA ::= CompareExprB LTE ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LTE       .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // CompareExprA ::= CompareExprB GT ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.GT        .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // CompareExprA ::= CompareExprB LT ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LT        .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // CompareExprA ::= CompareExprB EQUALS ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.EQUALS    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // CompareExprA ::= CompareExprB IN ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IN        .make(o, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // NegExprB ::= NOT NegExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOT.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprB",46, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // NegExprB ::= CompareExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprB",46, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // NegExprA ::= NOT NegExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOT.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprA",45, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // NegExprA ::= NOT Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOT.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprA",45, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // NegExprA ::= CompareExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprA",45, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // TempUnaryB ::= PREVIOUS TempUnaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.PREVIOUS    .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryB",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // TempUnaryB ::= ONCE TempUnaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.ONCE        .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryB",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // TempUnaryB ::= HISTORICALLY TempUnaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.HISTORICALLY.make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryB",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // TempUnaryB ::= AFTER TempUnaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.AFTER       .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryB",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // TempUnaryB ::= EVENTUALLY TempUnaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.EVENTUALLY  .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryB",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // TempUnaryB ::= ALWAYS TempUnaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.ALWAYS      .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryB",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // TempUnaryB ::= NegExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 										
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryB",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // TempUnaryA ::= PREVIOUS TempUnaryA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.PREVIOUS    .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // TempUnaryA ::= ONCE TempUnaryA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.ONCE        .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // TempUnaryA ::= HISTORICALLY TempUnaryA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.HISTORICALLY.make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // TempUnaryA ::= AFTER TempUnaryA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.AFTER       .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // TempUnaryA ::= EVENTUALLY TempUnaryA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.EVENTUALLY  .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // TempUnaryA ::= ALWAYS TempUnaryA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.ALWAYS      .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // TempUnaryA ::= PREVIOUS Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.PREVIOUS    .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // TempUnaryA ::= ONCE Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.ONCE        .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // TempUnaryA ::= HISTORICALLY Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.HISTORICALLY.make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // TempUnaryA ::= AFTER Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.AFTER  		.make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // TempUnaryA ::= EVENTUALLY Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.EVENTUALLY  .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // TempUnaryA ::= ALWAYS Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.ALWAYS      .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // TempUnaryA ::= NegExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 										
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // TempBinaryB ::= TempUnaryB TRCSEQ TempBinaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.AND    .make(o, null, a, ExprUnary.Op.AFTER.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempBinaryB",50, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // TempBinaryB ::= TempBinaryB RELEASE TempUnaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.RELEASE.make(o, null, a, b);                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempBinaryB",50, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // TempBinaryB ::= TempBinaryB SINCE TempUnaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.SINCE  .make(o, null, a, b);                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempBinaryB",50, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // TempBinaryB ::= TempBinaryB UNTIL TempUnaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.UNTIL  .make(o, null, a, b);                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempBinaryB",50, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // TempBinaryB ::= TempUnaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempBinaryB",50, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // TempBinaryA ::= Bind TRCSEQ TempBinaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.AND    .make(o, null, a, ExprUnary.Op.AFTER.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempBinaryA",49, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // TempBinaryA ::= TempBinaryB RELEASE Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.RELEASE.make(o, null, a, b);                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempBinaryA",49, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // TempBinaryA ::= TempBinaryB SINCE Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.SINCE  .make(o, null, a, b);                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempBinaryA",49, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // TempBinaryA ::= TempBinaryB UNTIL Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.UNTIL  .make(o, null, a, b);                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempBinaryA",49, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // TempBinaryA ::= TempUnaryA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                                                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempBinaryA",49, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // AndExprB ::= AndExprB AND TempBinaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.AND.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprB",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // AndExprB ::= TempBinaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprB",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // AndExprA ::= AndExprB AND Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.AND.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprA",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // AndExprA ::= TempBinaryA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprA",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // ImpliesExprOpenB ::= AndExprB IMPLIES ImpliesExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.IMPLIES.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenB",35, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // ImpliesExprOpenB ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprOpenB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenB",35, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // ImpliesExprCloseB ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprCloseB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseB",33, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // ImpliesExprCloseB ::= AndExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseB",33, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // ImpliesExprB ::= ImpliesExprOpenB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprB",31, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // ImpliesExprB ::= ImpliesExprCloseB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprB",31, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // ImpliesExprOpenA ::= AndExprB IMPLIES Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.IMPLIES.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenA",34, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // ImpliesExprCloseA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseA",32, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // ImpliesExprOpenA ::= AndExprB IMPLIES ImpliesExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.IMPLIES.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenA",34, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // ImpliesExprOpenA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprOpenA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenA",34, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // ImpliesExprCloseA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprCloseA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseA",32, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // ImpliesExprCloseA ::= AndExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseA",32, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // ImpliesExprA ::= ImpliesExprOpenA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprA",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // ImpliesExprA ::= ImpliesExprCloseA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprA",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // EquivExprB ::= EquivExprB IFF ImpliesExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IFF.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprB",20, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // EquivExprB ::= ImpliesExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprB",20, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // EquivExprA ::= EquivExprB IFF Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IFF.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprA",19, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // EquivExprA ::= ImpliesExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprA",19, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // OrExprB ::= OrExprB OR EquivExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.OR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprB",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // OrExprB ::= EquivExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprB",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // OrExprA ::= OrExprB OR Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.OR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprA",53, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // OrExprA ::= EquivExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprA",53, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Bind ::= SUM2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.SUM     	   .make(o, null, a, b); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // Bind ::= ONE2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.ONE     	   .make(o, null, a, b); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Bind ::= LONE2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.LONE    	   .make(o, null, a, b); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Bind ::= SOME2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.SOME    	   .make(o, null, a, b); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Bind ::= NO2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.NO      	   .make(o, null, a, b); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Bind ::= ALL2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.ALL     	   .make(o, null, a, b); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Bind ::= LET Let 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                  		    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Expr ::= Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",22, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Expr ::= OrExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",22, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Expr ::= OrExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",22, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Exprp ::= Exprp COMMA Expr 
            {
              List<Expr> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Expr> a = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 a.add(b); RESULT=a;                          
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprp",28, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Exprp ::= Expr 
            {
              List<Expr> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Expr>(); RESULT.add(x); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprp",28, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Exprs ::= Exprp 
            {
              List<Expr> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		List<Expr> x = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprs",27, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Exprs ::= 
            {
              List<Expr> RESULT =null;
		 RESULT=new ArrayList<Expr>();                
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprs",27, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // SuperOrBar ::= Super 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOrBar",26, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // SuperOrBar ::= BAR Expr 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOrBar",26, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // SuperP ::= SuperP Expr 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.AND.make(null, null, a, b);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperP",25, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // SuperP ::= Expr 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                                         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperP",25, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Super ::= LBRACE RBRACE 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprConstant.Op.TRUE.make(a.merge(b), 0);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Super",23, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Super ::= LBRACE SuperP RBRACE 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOOP.make(a.merge(b), x);     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Super",23, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SuperOpt ::= Super 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOpt",24, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SuperOpt ::= 
            {
              Expr RESULT =null;
		 RESULT=null;                                      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOpt",24, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Let ::= Name EQUALS Expr COMMA Let 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
  nod(a);
  if (a.label.indexOf('/')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'/\'");
  if (a.label.indexOf('@')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'@\'");
  RESULT = ExprLet.make(o, ExprVar.make(a.pos, a.label), b, x);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Let",38, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Let ::= Name EQUALS Expr SuperOrBar 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
  nod(a);
  if (a.label.indexOf('/')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'/\'");
  if (a.label.indexOf('@')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'@\'");
  RESULT = ExprLet.make(o, ExprVar.make(a.pos, a.label), b, x);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Let",38, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Decls ::= COMMA Decls 
            {
              List<Decl> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		List<Decl> y = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=y;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",13, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Decls ::= Declb COMMA Decls 
            {
              List<Decl> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		List<Decl> y = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=y; RESULT.add(0,x);                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",13, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Decls ::= Declb 
            {
              List<Decl> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Decl>(); RESULT.add(x);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",13, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Decls ::= 
            {
              List<Decl> RESULT =null;
		 RESULT=new ArrayList<Decl>();                 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",13, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Declp ::= Declb 
            {
              List<Decl> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Decl>(); RESULT.add(y);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declp",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Declp ::= Declp COMMA Declb 
            {
              List<Decl> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Decl> x = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; RESULT.add(y);                      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declp",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Declz ::= Decla 
            {
              List<Decl> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Decl>(); RESULT.add(y);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declz",14, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Declz ::= Declz COMMA Decla 
            {
              List<Decl> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Decl> x = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; RESULT.add(y);                      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declz",14, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Declb ::= Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Declb ::= PRIVATE Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Declb ::= PRIVATE DISJ Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Declb ::= DISJ Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Declb ::= EXH Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		 if (1==1) throw CompModule.hint(k, "exh");                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Declb ::= PART Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		 if (1==1) throw CompModule.hint(k, "part");                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Declb ::= Names EQUALS Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, null, null, null,  a, ExprUnary.Op.EXACTLYOF.make(null, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Declb ::= PRIVATE Names EQUALS Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, p,    null, null,  a, ExprUnary.Op.EXACTLYOF.make(null, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Declb ::= PRIVATE DISJ Names EQUALS Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint.");    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Declb ::= DISJ Names EQUALS Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint.");    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Declb ::= EXH Names EQUALS Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw CompModule.hint(k, "exh");                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Declb ::= PART Names EQUALS Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw CompModule.hint(k, "part");                                      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Declb ::= Decla 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Decla ::= VAR Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos v = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(v,    null, null, d,    a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Decla ::= VAR PRIVATE Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos v = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(v,    p,    null, d,    a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Decla ::= VAR PRIVATE DISJ Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		Pos v = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(v,    p,    k,    d,    a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Decla ::= VAR DISJ Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos v = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(v,    null, k,    d,    a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Decla ::= Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, null, null, d,    a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Decla ::= PRIVATE Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, p,    null, d,    a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Decla ::= PRIVATE DISJ Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, p,    k,    d,    a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Decla ::= DISJ Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, null, k,    d,    a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Decla ::= EXH Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		 if (1==1) throw CompModule.hint(k, "exh");         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Decla ::= PART Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		 if (1==1) throw CompModule.hint(k, "part");        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Decla ::= VAR Names COLON Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos v = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(v,    null, null, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Decla ::= VAR PRIVATE Names COLON Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos v = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(v,    p,    null, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Decla ::= VAR PRIVATE DISJ Names COLON Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos v = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(v,    p,    k,    null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Decla ::= VAR DISJ Names COLON Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos v = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(v,    null, k,    null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Decla ::= Names COLON Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, null, null, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Decla ::= PRIVATE Names COLON Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, p,    null, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Decla ::= PRIVATE DISJ Names COLON Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, p,    k,    null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Decla ::= DISJ Names COLON Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, null, k,    null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Decla ::= EXH Names COLON Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw CompModule.hint(k, "exh");         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Decla ::= PART Names COLON Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw CompModule.hint(k, "part");        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Namex ::= Namex COMMA EXACTLY Name 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(b); a.add(null); a.add(b); RESULT=a;                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",44, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Namex ::= Namex COMMA Name 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(b);              a.add(b); RESULT=a;                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",44, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Namex ::= EXACTLY Name 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(x); RESULT=new ArrayList<ExprVar>(); RESULT.add(null); RESULT.add(x);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",44, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Namex ::= Name 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.peek();
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(x); RESULT=new ArrayList<ExprVar>();                   RESULT.add(x);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",44, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Names ::= Names COMMA Name 
            {
              List<ExprVar> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(b); a.add(b); RESULT=a;                              
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Names",43, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Names ::= Name 
            {
              List<ExprVar> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(x); RESULT=new ArrayList<ExprVar>(); RESULT.add(x);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Names",43, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NameHelper ::= NameHelper SLASH ID 
            {
              ExprVar RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(a.pos.merge(b.pos), a.label+"/"+b.label); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NameHelper",42, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NameHelper ::= ID 
            {
              ExprVar RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NameHelper",42, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Name ::= SEQ SLASH NameHelper 
            {
              ExprVar RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(a.merge(b.pos),  "seq/"+b.label); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name",41, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Name ::= THIS SLASH NameHelper 
            {
              ExprVar RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(a.merge(b.pos), "this/"+b.label); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name",41, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Name ::= NameHelper 
            {
              ExprVar RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name",41, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SigRefu ::= SigRefu PLUS SigRef 
            {
              List<ExprVar> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 a.add(b); RESULT=a;                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefu",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SigRefu ::= SigRef 
            {
              List<ExprVar> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<ExprVar>(); RESULT.add(x); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefu",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SigRefp ::= SigRefp COMMA SigRef 
            {
              List<ExprVar> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 a.add(b); RESULT=a;                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefp",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SigRefp ::= SigRef 
            {
              List<ExprVar> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<ExprVar>(); RESULT.add(x); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefp",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SigRefs ::= SigRefp 
            {
              List<ExprVar> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List<ExprVar> x = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefs",70, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SigRefs ::= 
            {
              List<ExprVar> RESULT =null;
		 RESULT=new ArrayList<ExprVar>(); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefs",70, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SigRef ::= NONE 
            {
              ExprVar RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(x, "none");              
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",68, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SigRef ::= SEQ SLASH SIGINT 
            {
              ExprVar RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(a.merge(b), "seq/Int");  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",68, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SigRef ::= SIGINT 
            {
              ExprVar RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(x, "Int");               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",68, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SigRef ::= TIME 
            {
              ExprVar RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(x, "Time");              
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",68, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SigRef ::= STRING 
            {
              ExprVar RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(x, "String");            
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",68, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SigRef ::= UNIV 
            {
              ExprVar RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(x, "univ");              
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",68, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SigRef ::= Name 
            {
              ExprVar RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",68, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SigIn ::= 
            {
              List<ExprVar> RESULT =null;
		 RESULT=null;                                                                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",65, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SigIn ::= EQUALS SigRefu 
            {
              List<ExprVar> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List<ExprVar> x = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;  x.add(ExprVar.make(a,"="));                                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",65, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SigIn ::= IN SigRefu 
            {
              List<ExprVar> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List<ExprVar> x = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;  x.add(ExprVar.make(a,"in"));                                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",65, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SigIn ::= EXTENDS SigRef 
            {
              List<ExprVar> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<ExprVar>(2); RESULT.add(x); RESULT.add(ExprVar.make(a, "extends")); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",65, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SigQuals ::= SigQual SigQuals 
            {
              List<Pos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<Pos> a = (List<Pos>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List<Pos> b = (List<Pos>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; for(int i=0;i<6;i++) if (a.get(i)==null) a.set(i,b.get(i)); else if (b.get(i)!=null) throw new ErrorSyntax(b.get(i), "The same qualifer cannot be specified more than once for the same sig."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQuals",67, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SigQuals ::= SIG 
            {
              List<Pos> RESULT =null;
		 RESULT=new ArrayList<Pos>(6); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQuals",67, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SigQual ::= VAR 
            {
              List<Pos> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Pos>(6); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(x);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",66, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SigQual ::= PRIVATE 
            {
              List<Pos> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Pos>(6); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(x);  	 RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",66, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SigQual ::= SOME 
            {
              List<Pos> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Pos>(6); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(x);    RESULT.add(null); RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",66, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SigQual ::= ONE 
            {
              List<Pos> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Pos>(6); RESULT.add(null); RESULT.add(null); RESULT.add(x);    RESULT.add(null); RESULT.add(null); RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",66, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SigQual ::= LONE 
            {
              List<Pos> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Pos>(6); RESULT.add(null); RESULT.add(x);    RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",66, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SigQual ::= ABSTRACT 
            {
              List<Pos> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Pos>(6); RESULT.add(x);    RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",66, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Sig ::= SigQuals Names SigIn LBRACE Decls RBRACE SuperOpt 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		List<Pos> a = (List<Pos>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		List<ExprVar> c = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
   if (e==null) e = ExprConstant.Op.TRUE.make(o, 0);
   ExprVar cc = (c!=null && c.size()>0) ? c.remove(c.size()-1) : null;
   for(ExprVar bb:b) {
      parser.alloymodule.addSig(bb.label, cc, c, d, e,
         AttrType.WHERE   .makenull(bb.pos.merge(e==null ? o : e.span())),
         AttrType.ABSTRACT.makenull(a.get(0)),
         AttrType.LONE    .makenull(a.get(1)),
         AttrType.ONE     .makenull(a.get(2)),
         AttrType.SOME    .makenull(a.get(3)),
         AttrType.PRIVATE .makenull(a.get(4)),
         AttrType.VARIABLE.makenull(a.get(5)));
   }
 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig",64, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Vis ::= PRIVATE 
            {
              Pos RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=p;    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Vis",87, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Vis ::= 
            {
              Pos RESULT =null;
		 RESULT=null; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Vis",87, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Predicate ::= Vis PRED SigRef DOT Name Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , null , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Predicate ::= Vis PRED SigRef DOT Name LBRACKET Decls RBRACKET Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Predicate ::= Vis PRED SigRef DOT Name LPAREN Decls RPAREN Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Predicate ::= Vis PRED Name Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, null , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Predicate ::= Vis PRED Name LBRACKET Decls RBRACKET Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Predicate ::= Vis PRED Name LPAREN Decls RPAREN Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Function ::= Vis FUN SigRef DOT Name COLON Expr Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , null , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Function ::= Vis FUN SigRef DOT Name LBRACKET Decls RBRACKET COLON Expr Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-9)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-9)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).right;
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Function ::= Vis FUN SigRef DOT Name LPAREN Decls RPAREN COLON Expr Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-9)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-9)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).right;
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Function ::= Vis FUN Name COLON Expr Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, null , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Function ::= Vis FUN Name LBRACKET Decls RBRACKET COLON Expr Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Function ::= Vis FUN Name LPAREN Decls RPAREN COLON Expr Super 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MacroBody ::= EQUALS Expr 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MacroBody",40, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // MacroBody ::= Super 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MacroBody",40, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Macro ::= Vis LET Name MacroBody 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, null  , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",39, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Macro ::= Vis LET Name LBRACKET RBRACKET MacroBody 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, null  , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",39, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Macro ::= Vis LET Name LBRACKET Names RBRACKET MacroBody 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> d = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, d     , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",39, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Macro ::= Vis LET Name LPAREN RPAREN MacroBody 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, null  , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",39, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Macro ::= Vis LET Name LPAREN Names RPAREN MacroBody 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<ExprVar> d = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, d     , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",39, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TypeNumber ::= NUMBER COLON NUMBER 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(a.pos.merge(i.pos), Sig.NONE, false, a.num, Integer.MAX_VALUE, i.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TypeNumber ::= NUMBER DOT DOT NUMBER COLON NUMBER 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(a.pos.merge(i.pos), Sig.NONE, false, a.num, b.num,             i.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TypeNumber ::= NUMBER DOT DOT NUMBER 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(a.pos.merge(b.pos), Sig.NONE, false, a.num, b.num,             1    ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TypeNumber ::= NUMBER 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		                                                                                RESULT = new CommandScope(a.pos             , Sig.NONE, false, a.num, a.num,             1    ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TypeNumber ::= EXACTLY NUMBER COLON NUMBER 
            {
              CommandScope RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(    e.merge(i.pos), Sig.NONE, true,  a.num, Integer.MAX_VALUE, i.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TypeNumber ::= EXACTLY NUMBER DOT DOT NUMBER COLON NUMBER 
            {
              CommandScope RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(    e.merge(i.pos), Sig.NONE, true,  a.num, b.num,             i.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TypeNumber ::= EXACTLY NUMBER DOT DOT NUMBER 
            {
              CommandScope RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(    e.merge(b.pos), Sig.NONE, true,  a.num, b.num,             1    ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TypeNumber ::= EXACTLY NUMBER 
            {
              CommandScope RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		                                                                                RESULT = new CommandScope(    e.merge(a.pos), Sig.NONE, true,  a.num, a.num,             1    ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Typescope ::= TypeNumber NONE 
            {
              CommandScope RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		CommandScope e = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos f = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (1==1) throw new ErrorSyntax(e.pos.merge(f), "You cannot set a scope on none."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Typescope ::= TypeNumber TIME 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
    Pos p = a.pos.merge(b);
	RESULT = new CommandScope(p, new PrimSig("Time", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.endingScope, a.increment); 

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Typescope ::= TypeNumber STRING 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = new CommandScope(a.pos.merge(b), new PrimSig("String", AttrType.WHERE.make(a.pos.merge(b))), a.isExact, a.startingScope, a.endingScope, a.increment); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Typescope ::= TypeNumber UNIV 
            {
              CommandScope RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		CommandScope e = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos f = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (1==1) throw new ErrorSyntax(e.pos.merge(f), "You cannot set a scope on univ."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Typescope ::= TypeNumber SEQ 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
   Pos p = a.pos.merge(b);
   if (a.endingScope>a.startingScope) throw new ErrorSyntax(p, "Cannot specify a growing scope for \"seq\"");
   if (a.isExact) throw new ErrorSyntax(p, "The exactly keyword is redundant here since the number of sequence index has to be exact.");
   RESULT = new CommandScope(p, new PrimSig("seq", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.startingScope, 1);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Typescope ::= TypeNumber INT 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 
   Pos p = a.pos.merge(b);
   if (a.endingScope>a.startingScope) throw new ErrorSyntax(p, "Cannot specify a growing scope for \"Int\"");
   if (a.isExact) throw new ErrorSyntax(p, "The exactly keyword is redundant here since the integer bitwidth must be exact.");
   RESULT = new CommandScope(p, new PrimSig("int", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.startingScope, 1);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Typescope ::= TypeNumber SIGINT 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 
   Pos p = a.pos.merge(b);
   if (a.endingScope>a.startingScope) throw new ErrorSyntax(p, "Cannot specify a growing scope for \"Int\"");
   if (a.isExact) throw new ErrorSyntax(p, "The exactly keyword is redundant here since the integer bitwidth must be exact.");
   RESULT = new CommandScope(p, new PrimSig("int", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.startingScope, 1);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Typescope ::= TypeNumber Name 
            {
              CommandScope RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
   nod(b);
   RESULT = new CommandScope(a.pos.merge(b.pos), new PrimSig(b.label, AttrType.WHERE.make(a.pos.merge(b.pos))), a.isExact, a.startingScope, a.endingScope, a.increment);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Typescopes ::= Typescopes COMMA Typescope 
            {
              List<CommandScope> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		List<CommandScope> a = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		CommandScope b = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; a.add(b);                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescopes",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Typescopes ::= Typescope 
            {
              List<CommandScope> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<CommandScope>(); RESULT.add(a); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescopes",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Scope ::= 
            {
              List<CommandScope> RESULT =null;
		 RESULT=new ArrayList<CommandScope>();                                                                                         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",63, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Scope ::= FOR Typescopes 
            {
              List<CommandScope> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List<CommandScope> b = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                                                                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",63, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Scope ::= FOR NUMBER BUT Typescopes 
            {
              List<CommandScope> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		List<CommandScope> b = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                  b.add(new CommandScope(a.pos, new PrimSig("univ", AttrType.WHERE.make(a.pos)), true, a.num, a.num, 1)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",63, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Scope ::= FOR NUMBER 
            {
              List<CommandScope> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<CommandScope>(); RESULT.add(new CommandScope(a.pos, new PrimSig("univ", AttrType.WHERE.make(a.pos)), true, a.num, a.num, 1)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",63, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expects ::= EXPECT NUMBER 
            {
              ExprConstant RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expects",21, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expects ::= 
            {
              ExprConstant RESULT =null;
		 RESULT=null; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expects",21, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Command ::= Command IMPLIES CommandPrefix Name Scope Expects 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(true ,o,null,n   ,null,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Command ::= Command IMPLIES CommandPrefix Name Name Scope Expects 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(true ,o,x   ,n   ,null,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Command ::= CommandPrefix Name Scope Expects 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(false,o,null,n   ,null,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Command ::= CommandPrefix Name Name Scope Expects 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(false,o,x   ,n   ,null,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Command ::= Command IMPLIES CommandPrefix Super Scope Expects 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(true ,o,null,null,e   ,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Command ::= Command IMPLIES CommandPrefix Name Super Scope Expects 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(true ,o,x   ,null,e   ,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Command ::= CommandPrefix Super Scope Expects 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(false,o,null,null,e   ,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Command ::= CommandPrefix Name Super Scope Expects 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(false,o,x   ,null,e   ,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CommandPrefix ::= RUN 
            {
              ExprVar RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos r = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprVar.make(r, "r"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CommandPrefix",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CommandPrefix ::= CHECK 
            {
              ExprVar RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprVar.make(c, "c"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CommandPrefix",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Spec ::= 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Spec ::= Spec Command 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Spec ::= Spec Macro 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Spec ::= Spec Predicate 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Spec ::= Spec Function 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Spec ::= Spec Sig 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Spec ::= Spec ASSERT STR Super 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		ExprConstant n = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addAssertion (o , n.string , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Spec ::= Spec ASSERT Name Super 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addAssertion (o , n.label  , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Spec ::= Spec ASSERT Super 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addAssertion (o , ""       , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Spec ::= Spec FACT STR Super 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		ExprConstant n = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addFact      (o , n.string , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Spec ::= Spec FACT Name Super 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFact      (o , n.label  , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Spec ::= Spec FACT Super 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addFact      (o , ""       , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Spec ::= Spec Vis ENUM Name LBRACE RBRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a);         parser.alloymodule.addEnum(o.merge(c),     p, a, null, c);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Spec ::= Spec Vis ENUM Name LBRACE Names RBRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<ExprVar> n = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a);         parser.alloymodule.addEnum(o.merge(c),     p, a, n,    c);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Spec ::= Spec Vis OPEN Name LBRACKET SigRefs RBRACKET AS Name 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar c = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a); nod(c); parser.alloymodule.addOpen(o.merge(c.pos), p, a, b,    c);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Spec ::= Spec Vis OPEN Name LBRACKET SigRefs RBRACKET 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a);         parser.alloymodule.addOpen(o.merge(c),     p, a, b,    null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Spec ::= Spec Vis OPEN Name AS Name 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar c = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a); nod(c); parser.alloymodule.addOpen(o.merge(c.pos), p, a, null, c);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Spec ::= Spec Vis OPEN Name 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).right;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a);         parser.alloymodule.addOpen(o.merge(a.pos), p, a, null, null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Spec ::= Spec MODULE Name LBRACKET Namex RBRACKET 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		Pos r = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); nod(b); parser.alloymodule.addModelName(o.merge(r)     , n.label , b                       ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Spec ::= Spec MODULE Name 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()).right;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n);         parser.alloymodule.addModelName(o.merge(n.pos) , n.label , new ArrayList<ExprVar>()); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= File EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		RESULT = start_val;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompParser$parser.done_parsing();
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // File ::= Spec 
            {
              Object RESULT =null;
		 parser.alloymodule.doneParsing(); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("File",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

